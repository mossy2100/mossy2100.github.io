### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XLong
  commentId: T:Galaxon.Core.Numbers.XLong
  id: XLong
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XLong.Abs(System.Int64)
  - Galaxon.Core.Numbers.XLong.GetRandom
  - Galaxon.Core.Numbers.XLong.Pow(System.Int64,System.Int64)
  - Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  langs:
  - csharp
  - vb
  name: XLong
  nameWithType: XLong
  fullName: Galaxon.Core.Numbers.XLong
  type: Class
  source:
    remote:
      path: Core/Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XLong
    path: ../Core/Core/Numbers/XLong.cs
    startLine: 3
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: Extension methods for long.
  example: []
  syntax:
    content: 'public static class XLong : object'
    content.vb: >-
      Public Module XLong
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XLong.Pow(System.Int64,System.Int64)
  commentId: M:Galaxon.Core.Numbers.XLong.Pow(System.Int64,System.Int64)
  id: Pow(System.Int64,System.Int64)
  parent: Galaxon.Core.Numbers.XLong
  langs:
  - csharp
  - vb
  name: Pow(Int64, Int64)
  nameWithType: XLong.Pow(Int64, Int64)
  fullName: Galaxon.Core.Numbers.XLong.Pow(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: Core/Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Pow
    path: ../Core/Core/Numbers/XLong.cs
    startLine: 11
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the long value closest to x^y.\n"
  example: []
  syntax:
    content: public static long Pow(long x, long y)
    parameters:
    - id: x
      type: System.Int64
      description: ''
    - id: y
      type: System.Int64
      description: ''
    return:
      type: System.Int64
      description: ''
    content.vb: Public Shared Function Pow(x As Long, y As Long) As Long
  overload: Galaxon.Core.Numbers.XLong.Pow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  commentId: M:Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  id: Sqrt(System.Int64)
  parent: Galaxon.Core.Numbers.XLong
  langs:
  - csharp
  - vb
  name: Sqrt(Int64)
  nameWithType: XLong.Sqrt(Int64)
  fullName: Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  type: Method
  source:
    remote:
      path: Core/Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Sqrt
    path: ../Core/Core/Numbers/XLong.cs
    startLine: 19
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the long value closest to âˆšx.\n"
  example: []
  syntax:
    content: public static long Sqrt(long x)
    parameters:
    - id: x
      type: System.Int64
      description: ''
    return:
      type: System.Int64
      description: ''
    content.vb: Public Shared Function Sqrt(x As Long) As Long
  overload: Galaxon.Core.Numbers.XLong.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XLong.Abs(System.Int64)
  commentId: M:Galaxon.Core.Numbers.XLong.Abs(System.Int64)
  id: Abs(System.Int64)
  parent: Galaxon.Core.Numbers.XLong
  langs:
  - csharp
  - vb
  name: Abs(Int64)
  nameWithType: XLong.Abs(Int64)
  fullName: Galaxon.Core.Numbers.XLong.Abs(System.Int64)
  type: Method
  source:
    remote:
      path: Core/Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Abs
    path: ../Core/Core/Numbers/XLong.cs
    startLine: 30
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nReturn the absolute value of a long as a ulong.\nThis addresses an issue with long.Abs(), which is that Abs(long.MinValue) can&apos;t be expressed\nas a long, and so wrap-around occurs.\nUnsigned integer types don&apos;t have an Abs() method, so there&apos;s no collision.\n"
  example: []
  syntax:
    content: public static ulong Abs(long n)
    parameters:
    - id: n
      type: System.Int64
      description: A long value.
    return:
      type: System.UInt64
      description: The absolute value as a ulong.
    content.vb: Public Shared Function Abs(n As Long) As ULong
  overload: Galaxon.Core.Numbers.XLong.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XLong.GetRandom
  commentId: M:Galaxon.Core.Numbers.XLong.GetRandom
  id: GetRandom
  parent: Galaxon.Core.Numbers.XLong
  langs:
  - csharp
  - vb
  name: GetRandom()
  nameWithType: XLong.GetRandom()
  fullName: Galaxon.Core.Numbers.XLong.GetRandom()
  type: Method
  source:
    remote:
      path: Core/Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetRandom
    path: ../Core/Core/Numbers/XLong.cs
    startLine: 41
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet a random long.\n"
  example: []
  syntax:
    content: public static long GetRandom()
    return:
      type: System.Int64
    content.vb: Public Shared Function GetRandom As Long
  overload: Galaxon.Core.Numbers.XLong.GetRandom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Numbers.XLong.Pow*
  commentId: Overload:Galaxon.Core.Numbers.XLong.Pow
  name: Pow
  nameWithType: XLong.Pow
  fullName: Galaxon.Core.Numbers.XLong.Pow
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Galaxon.Core.Numbers.XLong.Sqrt*
  commentId: Overload:Galaxon.Core.Numbers.XLong.Sqrt
  name: Sqrt
  nameWithType: XLong.Sqrt
  fullName: Galaxon.Core.Numbers.XLong.Sqrt
- uid: Galaxon.Core.Numbers.XLong.Abs*
  commentId: Overload:Galaxon.Core.Numbers.XLong.Abs
  name: Abs
  nameWithType: XLong.Abs
  fullName: Galaxon.Core.Numbers.XLong.Abs
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Galaxon.Core.Numbers.XLong.GetRandom*
  commentId: Overload:Galaxon.Core.Numbers.XLong.GetRandom
  name: GetRandom
  nameWithType: XLong.GetRandom
  fullName: Galaxon.Core.Numbers.XLong.GetRandom
