### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XDouble
  commentId: T:Galaxon.Core.Numbers.XDouble
  id: XDouble
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XDouble.Assemble(System.Byte,System.UInt16,System.UInt64)
  - Galaxon.Core.Numbers.XDouble.Delta
  - Galaxon.Core.Numbers.XDouble.Disassemble(System.Double)
  - Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Double,System.Double,System.Double)
  - Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Nullable{System.Double},System.Nullable{System.Double},System.Double)
  - Galaxon.Core.Numbers.XDouble.FuzzyIsInteger(System.Double,System.Double)
  - Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger(System.Double,System.Double)
  - Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger(System.Double,System.Double)
  - Galaxon.Core.Numbers.XDouble.GetRandom
  - Galaxon.Core.Numbers.XDouble.IsNegativeInteger(System.Double)
  - Galaxon.Core.Numbers.XDouble.IsPerfectSquare(System.Double)
  - Galaxon.Core.Numbers.XDouble.IsPositiveInteger(System.Double)
  - Galaxon.Core.Numbers.XDouble.MaxExp
  - Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue
  - Galaxon.Core.Numbers.XDouble.MinExp
  - Galaxon.Core.Numbers.XDouble.MinPosNormalValue
  - Galaxon.Core.Numbers.XDouble.NumExpBits
  - Galaxon.Core.Numbers.XDouble.NumFracBits
  - Galaxon.Core.Numbers.XDouble.RoundSigFigs(System.Double,System.Int32)
  langs:
  - csharp
  - vb
  name: XDouble
  nameWithType: XDouble
  fullName: Galaxon.Core.Numbers.XDouble
  type: Class
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XDouble
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 3
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: Extension methods and other bonus stuff for double.
  example: []
  syntax:
    content: 'public static class XDouble : object'
    content.vb: >-
      Public Module XDouble
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XDouble.Delta
  commentId: F:Galaxon.Core.Numbers.XDouble.Delta
  id: Delta
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: Delta
  nameWithType: XDouble.Delta
  fullName: Galaxon.Core.Numbers.XDouble.Delta
  type: Field
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Delta
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 10
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nThe default maximum difference between 2 double values being compared for equality.\n"
  example: []
  syntax:
    content: public const double Delta = null
    return:
      type: System.Double
    content.vb: Public Const Delta As Double = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDouble.NumExpBits
  commentId: F:Galaxon.Core.Numbers.XDouble.NumExpBits
  id: NumExpBits
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: NumExpBits
  nameWithType: XDouble.NumExpBits
  fullName: Galaxon.Core.Numbers.XDouble.NumExpBits
  type: Field
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: NumExpBits
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 13
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: The number of bits in the exponent.
  example: []
  syntax:
    content: public const byte NumExpBits = null
    return:
      type: System.Byte
    content.vb: Public Const NumExpBits As Byte = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDouble.NumFracBits
  commentId: F:Galaxon.Core.Numbers.XDouble.NumFracBits
  id: NumFracBits
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: NumFracBits
  nameWithType: XDouble.NumFracBits
  fullName: Galaxon.Core.Numbers.XDouble.NumFracBits
  type: Field
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: NumFracBits
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 16
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: The number of bits in the fraction.
  example: []
  syntax:
    content: public const byte NumFracBits = null
    return:
      type: System.Byte
    content.vb: Public Const NumFracBits As Byte = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDouble.MinExp
  commentId: F:Galaxon.Core.Numbers.XDouble.MinExp
  id: MinExp
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: MinExp
  nameWithType: XDouble.MinExp
  fullName: Galaxon.Core.Numbers.XDouble.MinExp
  type: Field
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: MinExp
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 19
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: The minimum binary exponent supported by the type.
  example: []
  syntax:
    content: public const short MinExp = null
    return:
      type: System.Int16
    content.vb: Public Const MinExp As Short = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDouble.MaxExp
  commentId: F:Galaxon.Core.Numbers.XDouble.MaxExp
  id: MaxExp
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: MaxExp
  nameWithType: XDouble.MaxExp
  fullName: Galaxon.Core.Numbers.XDouble.MaxExp
  type: Field
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: MaxExp
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 22
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: The maximum binary exponent supported by the type.
  example: []
  syntax:
    content: public const short MaxExp = null
    return:
      type: System.Int16
    content.vb: Public Const MaxExp As Short = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue
  commentId: P:Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue
  id: MaxPosSubnormalValue
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: MaxPosSubnormalValue
  nameWithType: XDouble.MaxPosSubnormalValue
  fullName: Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue
  type: Property
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: MaxPosSubnormalValue
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 27
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nThe maximum positive subnormal value.\n"
  example: []
  syntax:
    content: public static double MaxPosSubnormalValue { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Shared ReadOnly Property MaxPosSubnormalValue As Double
  overload: Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Core.Numbers.XDouble.MinPosNormalValue
  commentId: P:Galaxon.Core.Numbers.XDouble.MinPosNormalValue
  id: MinPosNormalValue
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: MinPosNormalValue
  nameWithType: XDouble.MinPosNormalValue
  fullName: Galaxon.Core.Numbers.XDouble.MinPosNormalValue
  type: Property
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: MinPosNormalValue
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 32
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nThe minimum positive normal value.\n"
  example: []
  syntax:
    content: public static double MinPosNormalValue { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Shared ReadOnly Property MinPosNormalValue As Double
  overload: Galaxon.Core.Numbers.XDouble.MinPosNormalValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Core.Numbers.XDouble.RoundSigFigs(System.Double,System.Int32)
  commentId: M:Galaxon.Core.Numbers.XDouble.RoundSigFigs(System.Double,System.Int32)
  id: RoundSigFigs(System.Double,System.Int32)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: RoundSigFigs(Double, Int32)
  nameWithType: XDouble.RoundSigFigs(Double, Int32)
  fullName: Galaxon.Core.Numbers.XDouble.RoundSigFigs(System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: RoundSigFigs
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 44
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nRound off a value to a given number of significant figures.\n"
  example: []
  syntax:
    content: public static double RoundSigFigs(double d, int nSigFigs)
    parameters:
    - id: d
      type: System.Double
      description: The number to round.
    - id: nSigFigs
      type: System.Int32
      description: The number of significant figures.
    return:
      type: System.Double
      description: The rounded number.
    content.vb: Public Shared Function RoundSigFigs(d As Double, nSigFigs As Integer) As Double
  overload: Galaxon.Core.Numbers.XDouble.RoundSigFigs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.Disassemble(System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.Disassemble(System.Double)
  id: Disassemble(System.Double)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: Disassemble(Double)
  nameWithType: XDouble.Disassemble(Double)
  fullName: Galaxon.Core.Numbers.XDouble.Disassemble(System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Disassemble
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 66
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nDisassemble the double into its bitwise components.\n"
  example: []
  syntax:
    content: public static (byte signBit, ushort expBits, ulong fracBits) Disassemble(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.ValueTuple{System.Byte,System.UInt16,System.UInt64}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Disassemble(x As Double) As(signBit As Byte, expBits As UShort, fracBits As ULong)(Of Byte , UShort, ULong)
  overload: Galaxon.Core.Numbers.XDouble.Disassemble*
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Double-precision_floating-point_format
    altText: https://en.wikipedia.org/wiki/Double-precision_floating-point_format
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.Assemble(System.Byte,System.UInt16,System.UInt64)
  commentId: M:Galaxon.Core.Numbers.XDouble.Assemble(System.Byte,System.UInt16,System.UInt64)
  id: Assemble(System.Byte,System.UInt16,System.UInt64)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: Assemble(Byte, UInt16, UInt64)
  nameWithType: XDouble.Assemble(Byte, UInt16, UInt64)
  fullName: Galaxon.Core.Numbers.XDouble.Assemble(System.Byte, System.UInt16, System.UInt64)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Assemble
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 76
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nAssemble a new double from parts.\n"
  example: []
  syntax:
    content: public static double Assemble(byte signBit, ushort expBits, ulong fracBits)
    parameters:
    - id: signBit
      type: System.Byte
      description: The sign bit (1 or 0).
    - id: expBits
      type: System.UInt16
      description: The exponent bits.
    - id: fracBits
      type: System.UInt64
      description: The fraction bits.
    return:
      type: System.Double
      description: The new double.
    content.vb: Public Shared Function Assemble(signBit As Byte, expBits As UShort, fracBits As ULong) As Double
  overload: Galaxon.Core.Numbers.XDouble.Assemble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.GetRandom
  commentId: M:Galaxon.Core.Numbers.XDouble.GetRandom
  id: GetRandom
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: GetRandom()
  nameWithType: XDouble.GetRandom()
  fullName: Galaxon.Core.Numbers.XDouble.GetRandom()
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetRandom
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 82
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet a random double.\n"
  example: []
  syntax:
    content: public static double GetRandom()
    return:
      type: System.Double
    content.vb: Public Shared Function GetRandom As Double
  overload: Galaxon.Core.Numbers.XDouble.GetRandom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.IsPositiveInteger(System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.IsPositiveInteger(System.Double)
  id: IsPositiveInteger(System.Double)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: IsPositiveInteger(Double)
  nameWithType: XDouble.IsPositiveInteger(Double)
  fullName: Galaxon.Core.Numbers.XDouble.IsPositiveInteger(System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsPositiveInteger
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 103
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if a double is a positive integer.\n"
  example: []
  syntax:
    content: public static bool IsPositiveInteger(double d)
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsPositiveInteger(d As Double) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.IsPositiveInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.IsNegativeInteger(System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.IsNegativeInteger(System.Double)
  id: IsNegativeInteger(System.Double)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: IsNegativeInteger(Double)
  nameWithType: XDouble.IsNegativeInteger(Double)
  fullName: Galaxon.Core.Numbers.XDouble.IsNegativeInteger(System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsNegativeInteger
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 109
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if a double is a negative integer.\n"
  example: []
  syntax:
    content: public static bool IsNegativeInteger(double d)
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNegativeInteger(d As Double) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.IsNegativeInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.IsPerfectSquare(System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.IsPerfectSquare(System.Double)
  id: IsPerfectSquare(System.Double)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: IsPerfectSquare(Double)
  nameWithType: XDouble.IsPerfectSquare(Double)
  fullName: Galaxon.Core.Numbers.XDouble.IsPerfectSquare(System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsPerfectSquare
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 115
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if a value is a perfect square.\n"
  example: []
  syntax:
    content: public static bool IsPerfectSquare(double d)
    parameters:
    - id: d
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsPerfectSquare(d As Double) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.IsPerfectSquare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Double,System.Double,System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Double,System.Double,System.Double)
  id: FuzzyEquals(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: FuzzyEquals(Double, Double, Double)
  nameWithType: XDouble.FuzzyEquals(Double, Double, Double)
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FuzzyEquals
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 138
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if 2 double values are equal for practical purposes.\n\nIf two double values differ only by the least significant bit, this is more likely\ndue to inaccuracies in floating point representations than actual inequality.\n\nThis code is copied/adapted from Google Guava DoubleMath.fuzzyEquals().\n<a href=\"https://github.com/google/guava/blob/master/guava/src/com/google/common/math/DoubleMath.java#L360\">https://github.com/google/guava/blob/master/guava/src/com/google/common/math/DoubleMath.java#L360</a>\n\nI initially tried the algorithm from the Microsoft documentation, it didn&apos;t work in all cases.\n<a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.double.equals?view=net-7.0#system-double-equals(system-double)\">https://learn.microsoft.com/en-us/dotnet/api/system.double.equals?view=net-7.0#system-double-equals(system-double)</a>\n"
  example: []
  syntax:
    content: public static bool FuzzyEquals(this double a, double b, double tolerance = null)
    parameters:
    - id: a
      type: System.Double
      description: First number.
    - id: b
      type: System.Double
      description: Second number.
    - id: tolerance
      type: System.Double
      description: The maximum allowable difference between them.
    return:
      type: System.Boolean
      description: If close enough to equal.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FuzzyEquals(a As Double, b As Double, tolerance As Double = Nothing) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.FuzzyEquals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Nullable{System.Double},System.Nullable{System.Double},System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Nullable{System.Double},System.Nullable{System.Double},System.Double)
  id: FuzzyEquals(System.Nullable{System.Double},System.Nullable{System.Double},System.Double)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: FuzzyEquals(Nullable<Double>, Nullable<Double>, Double)
  nameWithType: XDouble.FuzzyEquals(Nullable<Double>, Nullable<Double>, Double)
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Nullable<System.Double>, System.Nullable<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FuzzyEquals
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 160
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCompare two nullable doubles for fuzzy equality.\n"
  example: []
  syntax:
    content: public static bool FuzzyEquals(this double? a, double? b, double tolerance = null)
    parameters:
    - id: a
      type: System.Nullable{System.Double}
      description: ''
    - id: b
      type: System.Nullable{System.Double}
      description: ''
    - id: tolerance
      type: System.Double
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FuzzyEquals(a As Double?, b As Double?, tolerance As Double = Nothing) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.FuzzyEquals*
  nameWithType.vb: XDouble.FuzzyEquals(Nullable(Of Double), Nullable(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XDouble.FuzzyEquals(System.Nullable(Of System.Double), System.Nullable(Of System.Double), System.Double)
  name.vb: FuzzyEquals(Nullable(Of Double), Nullable(Of Double), Double)
- uid: Galaxon.Core.Numbers.XDouble.FuzzyIsInteger(System.Double,System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.FuzzyIsInteger(System.Double,System.Double)
  id: FuzzyIsInteger(System.Double,System.Double)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: FuzzyIsInteger(Double, Double)
  nameWithType: XDouble.FuzzyIsInteger(Double, Double)
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyIsInteger(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FuzzyIsInteger
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 181
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nIsInteger() can be a bit strict. This method allows for some fuzziness.\n"
  example: []
  syntax:
    content: public static bool FuzzyIsInteger(double d, double tolerance = null)
    parameters:
    - id: d
      type: System.Double
    - id: tolerance
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function FuzzyIsInteger(d As Double, tolerance As Double = Nothing) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.FuzzyIsInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger(System.Double,System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger(System.Double,System.Double)
  id: FuzzyIsPositiveInteger(System.Double,System.Double)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: FuzzyIsPositiveInteger(Double, Double)
  nameWithType: XDouble.FuzzyIsPositiveInteger(Double, Double)
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FuzzyIsPositiveInteger
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 187
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if a double is a positive integer, with some fuzziness.\n"
  example: []
  syntax:
    content: public static bool FuzzyIsPositiveInteger(double d, double tolerance = null)
    parameters:
    - id: d
      type: System.Double
    - id: tolerance
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function FuzzyIsPositiveInteger(d As Double, tolerance As Double = Nothing) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger(System.Double,System.Double)
  commentId: M:Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger(System.Double,System.Double)
  id: FuzzyIsNegativeInteger(System.Double,System.Double)
  parent: Galaxon.Core.Numbers.XDouble
  langs:
  - csharp
  - vb
  name: FuzzyIsNegativeInteger(Double, Double)
  nameWithType: XDouble.FuzzyIsNegativeInteger(Double, Double)
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDouble.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FuzzyIsNegativeInteger
    path: ../Core/Core/Numbers/XDouble.cs
    startLine: 193
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if a double is a negative integer, with some fuzziness.\n"
  example: []
  syntax:
    content: public static bool FuzzyIsNegativeInteger(double d, double tolerance = null)
    parameters:
    - id: d
      type: System.Double
    - id: tolerance
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function FuzzyIsNegativeInteger(d As Double, tolerance As Double = Nothing) As Boolean
  overload: Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int16
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue
  name: MaxPosSubnormalValue
  nameWithType: XDouble.MaxPosSubnormalValue
  fullName: Galaxon.Core.Numbers.XDouble.MaxPosSubnormalValue
- uid: Galaxon.Core.Numbers.XDouble.MinPosNormalValue*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.MinPosNormalValue
  name: MinPosNormalValue
  nameWithType: XDouble.MinPosNormalValue
  fullName: Galaxon.Core.Numbers.XDouble.MinPosNormalValue
- uid: Galaxon.Core.Numbers.XDouble.RoundSigFigs*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.RoundSigFigs
  name: RoundSigFigs
  nameWithType: XDouble.RoundSigFigs
  fullName: Galaxon.Core.Numbers.XDouble.RoundSigFigs
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Galaxon.Core.Numbers.XDouble.Disassemble*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.Disassemble
  name: Disassemble
  nameWithType: XDouble.Disassemble
  fullName: Galaxon.Core.Numbers.XDouble.Disassemble
- uid: System.ValueTuple{System.Byte,System.UInt16,System.UInt64}
  commentId: '!:System.ValueTuple{System.Byte,System.UInt16,System.UInt64}'
  definition: System.ValueTuple`3
  name: (, , )<Byte, UInt16, UInt64>
  nameWithType: (, , )<Byte, UInt16, UInt64>
  fullName: System.ValueTuple<System.Byte, System.UInt16, System.UInt64>
  nameWithType.vb: (, , )(Of Byte, UInt16, UInt64)
  fullName.vb: System.ValueTuple(Of System.Byte, System.UInt16, System.UInt64)
  name.vb: (, , )(Of Byte, UInt16, UInt64)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  isExternal: true
  name: (, , )<, , >
  nameWithType: (, , )<, , >
  fullName: System.ValueTuple<, , >
  nameWithType.vb: (, , )(Of , , )
  fullName.vb: System.ValueTuple(Of , , )
  name.vb: (, , )(Of , , )
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Numbers.XDouble.Assemble*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.Assemble
  name: Assemble
  nameWithType: XDouble.Assemble
  fullName: Galaxon.Core.Numbers.XDouble.Assemble
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Galaxon.Core.Numbers.XDouble.GetRandom*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.GetRandom
  name: GetRandom
  nameWithType: XDouble.GetRandom
  fullName: Galaxon.Core.Numbers.XDouble.GetRandom
- uid: Galaxon.Core.Numbers.XDouble.IsPositiveInteger*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.IsPositiveInteger
  name: IsPositiveInteger
  nameWithType: XDouble.IsPositiveInteger
  fullName: Galaxon.Core.Numbers.XDouble.IsPositiveInteger
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Galaxon.Core.Numbers.XDouble.IsNegativeInteger*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.IsNegativeInteger
  name: IsNegativeInteger
  nameWithType: XDouble.IsNegativeInteger
  fullName: Galaxon.Core.Numbers.XDouble.IsNegativeInteger
- uid: Galaxon.Core.Numbers.XDouble.IsPerfectSquare*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.IsPerfectSquare
  name: IsPerfectSquare
  nameWithType: XDouble.IsPerfectSquare
  fullName: Galaxon.Core.Numbers.XDouble.IsPerfectSquare
- uid: Galaxon.Core.Numbers.XDouble.FuzzyEquals*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.FuzzyEquals
  name: FuzzyEquals
  nameWithType: XDouble.FuzzyEquals
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyEquals
- uid: System.Nullable{System.Double}
  commentId: '!:System.Nullable{System.Double}'
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Numbers.XDouble.FuzzyIsInteger*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.FuzzyIsInteger
  name: FuzzyIsInteger
  nameWithType: XDouble.FuzzyIsInteger
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyIsInteger
- uid: Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger
  name: FuzzyIsPositiveInteger
  nameWithType: XDouble.FuzzyIsPositiveInteger
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyIsPositiveInteger
- uid: Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger*
  commentId: Overload:Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger
  name: FuzzyIsNegativeInteger
  nameWithType: XDouble.FuzzyIsNegativeInteger
  fullName: Galaxon.Core.Numbers.XDouble.FuzzyIsNegativeInteger
