### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Time.XDateOnly
  commentId: T:Galaxon.Core.Time.XDateOnly
  id: XDateOnly
  parent: Galaxon.Core.Time
  children:
  - Galaxon.Core.Time.XDateOnly.Add(DateOnly,TimeOnly)
  - Galaxon.Core.Time.XDateOnly.Add(DateOnly,TimeSpan)
  - Galaxon.Core.Time.XDateOnly.AddWeeks(DateOnly,System.Int32)
  - Galaxon.Core.Time.XDateOnly.FromDayOfYear(System.Int32,System.Int32)
  - Galaxon.Core.Time.XDateOnly.FromJulianDay(System.Double)
  - Galaxon.Core.Time.XDateOnly.FromTotalDays(System.Int64)
  - Galaxon.Core.Time.XDateOnly.FromTotalYears(System.Double)
  - Galaxon.Core.Time.XDateOnly.GetChristmas(System.Int32)
  - Galaxon.Core.Time.XDateOnly.GetEaster(System.Int32)
  - Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth(System.Int32,System.Int32,System.Int32,DayOfWeek)
  - Galaxon.Core.Time.XDateOnly.GetThanksgiving(System.Int32,System.String)
  - Galaxon.Core.Time.XDateOnly.GetTicks(DateOnly)
  - Galaxon.Core.Time.XDateOnly.GetTotalDays(DateOnly)
  - Galaxon.Core.Time.XDateOnly.GetTotalSeconds(DateOnly)
  - Galaxon.Core.Time.XDateOnly.GetTotalYears(DateOnly)
  - Galaxon.Core.Time.XDateOnly.Subtract(DateOnly,DateOnly)
  - Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly)
  - Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly,DateTimeKind)
  - Galaxon.Core.Time.XDateOnly.ToIsoString(DateOnly)
  - Galaxon.Core.Time.XDateOnly.ToJulianDay(DateOnly)
  langs:
  - csharp
  - vb
  name: XDateOnly
  nameWithType: XDateOnly
  fullName: Galaxon.Core.Time.XDateOnly
  type: Class
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XDateOnly
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 8
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nExtension methods for the DateOnly class.\n"
  example: []
  syntax:
    content: 'public static class XDateOnly : object'
    content.vb: >-
      Public Module XDateOnly
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Time.XDateOnly.ToIsoString(DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.ToIsoString(DateOnly)
  id: ToIsoString(DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: ToIsoString(DateOnly)
  nameWithType: XDateOnly.ToIsoString(DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.ToIsoString(DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToIsoString
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 18
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nFormat the date using ISO 8601 format YYYY-MM-DD.\n<a href=\"https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates\">https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates</a>\n"
  example: []
  syntax:
    content: public static string ToIsoString(this DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    return:
      type: System.String
      description: A string representing the date in ISO format.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToIsoString(date As DateOnly) As String
  overload: Galaxon.Core.Time.XDateOnly.ToIsoString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly)
  id: ToDateTime(DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: ToDateTime(DateOnly)
  nameWithType: XDateOnly.ToDateTime(DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToDateTime
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 30
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nConvert a DateOnly to a DateTime, with default time 00:00:00.\n"
  example: []
  syntax:
    content: public static DateTime ToDateTime(this DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    return:
      type: DateTime
      description: The new DateTime object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDateTime(date As DateOnly) As DateTime
  overload: Galaxon.Core.Time.XDateOnly.ToDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly,DateTimeKind)
  commentId: M:Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly,DateTimeKind)
  id: ToDateTime(DateOnly,DateTimeKind)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: ToDateTime(DateOnly, DateTimeKind)
  nameWithType: XDateOnly.ToDateTime(DateOnly, DateTimeKind)
  fullName: Galaxon.Core.Time.XDateOnly.ToDateTime(DateOnly, DateTimeKind)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToDateTime
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 39
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nConvert a DateOnly to a DateTime, with default time 00:00:00 and specified DateTimeKind.\n"
  example: []
  syntax:
    content: public static DateTime ToDateTime(this DateOnly date, DateTimeKind kind)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    - id: kind
      type: DateTimeKind
      description: The DateTimeKind.
    return:
      type: DateTime
      description: The new DateTime object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDateTime(date As DateOnly, kind As DateTimeKind) As DateTime
  overload: Galaxon.Core.Time.XDateOnly.ToDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetTicks(DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetTicks(DateOnly)
  id: GetTicks(DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetTicks(DateOnly)
  nameWithType: XDateOnly.GetTicks(DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.GetTicks(DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetTicks
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 59
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nGet the number of ticks between the start of the epoch (0001-01-01 00:00:00) and the start\nof the date.\n\nIf extension properties are added to the language I may change this to a property &quot;Ticks&quot;\nlater, for consistency with DateTime.\n"
  example: []
  syntax:
    content: public static long GetTicks(this DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    return:
      type: System.Int64
      description: The number of ticks.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTicks(date As DateOnly) As Long
  overload: Galaxon.Core.Time.XDateOnly.GetTicks*
  see:
  - linkType: HRef
    linkId: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.ticks?view=net-7.0
    altText: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.ticks?view=net-7.0
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetTotalSeconds(DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetTotalSeconds(DateOnly)
  id: GetTotalSeconds(DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetTotalSeconds(DateOnly)
  nameWithType: XDateOnly.GetTotalSeconds(DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.GetTotalSeconds(DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetTotalSeconds
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 67
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nGet the number of seconds between the start of the epoch and the start of the date.\n"
  example: []
  syntax:
    content: public static long GetTotalSeconds(this DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    return:
      type: System.Int64
      description: The number of seconds since the epoch start.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTotalSeconds(date As DateOnly) As Long
  overload: Galaxon.Core.Time.XDateOnly.GetTotalSeconds*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetTotalDays(DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetTotalDays(DateOnly)
  id: GetTotalDays(DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetTotalDays(DateOnly)
  nameWithType: XDateOnly.GetTotalDays(DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.GetTotalDays(DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetTotalDays
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 75
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nGet the number of days between the start of the epoch and the given date.\n"
  example: []
  syntax:
    content: public static long GetTotalDays(this DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    return:
      type: System.Int64
      description: The number of days since the epoch start.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTotalDays(date As DateOnly) As Long
  overload: Galaxon.Core.Time.XDateOnly.GetTotalDays*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetTotalYears(DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetTotalYears(DateOnly)
  id: GetTotalYears(DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetTotalYears(DateOnly)
  nameWithType: XDateOnly.GetTotalYears(DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.GetTotalYears(DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetTotalYears
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 85
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nGet the number of years between the start of the epoch and the start of the date.\n\nThe result will be greater than or equal to `date.Year - 1` and less than `date.Year`.\n"
  example: []
  syntax:
    content: public static double GetTotalYears(this DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    return:
      type: System.Double
      description: The number of years since the epoch start.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTotalYears(date As DateOnly) As Double
  overload: Galaxon.Core.Time.XDateOnly.GetTotalYears*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.Add(DateOnly,TimeSpan)
  commentId: M:Galaxon.Core.Time.XDateOnly.Add(DateOnly,TimeSpan)
  id: Add(DateOnly,TimeSpan)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: Add(DateOnly, TimeSpan)
  nameWithType: XDateOnly.Add(DateOnly, TimeSpan)
  fullName: Galaxon.Core.Time.XDateOnly.Add(DateOnly, TimeSpan)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Add
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 99
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nAdd a period of time to a date to find a new DateTime.\n"
  example: []
  syntax:
    content: public static DateTime Add(this DateOnly date, TimeSpan period)
    parameters:
    - id: date
      type: DateOnly
      description: The date.
    - id: period
      type: TimeSpan
      description: The time period to add.
    return:
      type: DateTime
      description: The resulting DateTime.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(date As DateOnly, period As TimeSpan) As DateTime
  overload: Galaxon.Core.Time.XDateOnly.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.Add(DateOnly,TimeOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.Add(DateOnly,TimeOnly)
  id: Add(DateOnly,TimeOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: Add(DateOnly, TimeOnly)
  nameWithType: XDateOnly.Add(DateOnly, TimeOnly)
  fullName: Galaxon.Core.Time.XDateOnly.Add(DateOnly, TimeOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Add
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 108
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nAdd a time of day to a date to find a new DateTime.\n"
  example: []
  syntax:
    content: public static DateTime Add(this DateOnly date, TimeOnly time)
    parameters:
    - id: date
      type: DateOnly
      description: The date.
    - id: time
      type: TimeOnly
      description: The time of day to add.
    return:
      type: DateTime
      description: The resulting DateTime.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(date As DateOnly, time As TimeOnly) As DateTime
  overload: Galaxon.Core.Time.XDateOnly.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.AddWeeks(DateOnly,System.Int32)
  commentId: M:Galaxon.Core.Time.XDateOnly.AddWeeks(DateOnly,System.Int32)
  id: AddWeeks(DateOnly,System.Int32)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: AddWeeks(DateOnly, Int32)
  nameWithType: XDateOnly.AddWeeks(DateOnly, Int32)
  fullName: Galaxon.Core.Time.XDateOnly.AddWeeks(DateOnly, System.Int32)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: AddWeeks
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 117
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nAdd a number of weeks to a date.\n"
  example: []
  syntax:
    content: public static DateOnly AddWeeks(this DateOnly date, int weeks)
    parameters:
    - id: date
      type: DateOnly
      description: The date.
    - id: weeks
      type: System.Int32
      description: The number of weeks to add.
    return:
      type: DateOnly
      description: The resulting date.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddWeeks(date As DateOnly, weeks As Integer) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.AddWeeks*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.Subtract(DateOnly,DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.Subtract(DateOnly,DateOnly)
  id: Subtract(DateOnly,DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: Subtract(DateOnly, DateOnly)
  nameWithType: XDateOnly.Subtract(DateOnly, DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.Subtract(DateOnly, DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Subtract
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 130
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nReturns the difference between two dates as a number of days.\nEmulates the <see cref=\"!:DateTime.Subtract(DateTime)\"></see> method.\n\nIf the end date is later than the start date, the result will be positive.\nIf they are equal, the result will be zero. Otherwise, the result will be negative.\n"
  example: []
  syntax:
    content: public static long Subtract(this DateOnly end, DateOnly start)
    parameters:
    - id: end
      type: DateOnly
      description: The end date.
    - id: start
      type: DateOnly
      description: The start date.
    return:
      type: System.Int64
      description: The number of days difference between the two dates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(end As DateOnly, start As DateOnly) As Long
  overload: Galaxon.Core.Time.XDateOnly.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.FromTotalDays(System.Int64)
  commentId: M:Galaxon.Core.Time.XDateOnly.FromTotalDays(System.Int64)
  id: FromTotalDays(System.Int64)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: FromTotalDays(Int64)
  nameWithType: XDateOnly.FromTotalDays(Int64)
  fullName: Galaxon.Core.Time.XDateOnly.FromTotalDays(System.Int64)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromTotalDays
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 143
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nFind a date given the number of days from the start of the epoch.\n"
  example: []
  syntax:
    content: public static DateOnly FromTotalDays(long days)
    parameters:
    - id: days
      type: System.Int64
      description: The number of days.
    return:
      type: DateOnly
      description: The resulting date.
    content.vb: Public Shared Function FromTotalDays(days As Long) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.FromTotalDays*
  see:
  - linkId: Galaxon.Core.Time.XDateTime.FromTotalDays(System.Double)
    commentId: M:Galaxon.Core.Time.XDateTime.FromTotalDays(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.FromTotalYears(System.Double)
  commentId: M:Galaxon.Core.Time.XDateOnly.FromTotalYears(System.Double)
  id: FromTotalYears(System.Double)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: FromTotalYears(Double)
  nameWithType: XDateOnly.FromTotalYears(Double)
  fullName: Galaxon.Core.Time.XDateOnly.FromTotalYears(System.Double)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromTotalYears
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 151
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nFind the date given the number of years since the start of the epoch.\n"
  example: []
  syntax:
    content: public static DateOnly FromTotalYears(double years)
    parameters:
    - id: years
      type: System.Double
      description: The number of years. May include a fractional part.
    return:
      type: DateOnly
      description: The resulting date.
    content.vb: Public Shared Function FromTotalYears(years As Double) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.FromTotalYears*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.FromDayOfYear(System.Int32,System.Int32)
  commentId: M:Galaxon.Core.Time.XDateOnly.FromDayOfYear(System.Int32,System.Int32)
  id: FromDayOfYear(System.Int32,System.Int32)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: FromDayOfYear(Int32, Int32)
  nameWithType: XDateOnly.FromDayOfYear(Int32, Int32)
  fullName: Galaxon.Core.Time.XDateOnly.FromDayOfYear(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromDayOfYear
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 162
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nFind a date given a year and the day of the year.\n\nFormula from Meeus (Astronomical Algorithms 2 ed. p66).\n"
  example: []
  syntax:
    content: public static DateOnly FromDayOfYear(int year, int dayOfYear)
    parameters:
    - id: year
      type: System.Int32
      description: The year (1..9999).
    - id: dayOfYear
      type: System.Int32
      description: The day of the year (1..366).
    return:
      type: DateOnly
      description: The resulting date.
    content.vb: Public Shared Function FromDayOfYear(year As Integer, dayOfYear As Integer) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.FromDayOfYear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.ToJulianDay(DateOnly)
  commentId: M:Galaxon.Core.Time.XDateOnly.ToJulianDay(DateOnly)
  id: ToJulianDay(DateOnly)
  isExtensionMethod: true
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: ToJulianDay(DateOnly)
  nameWithType: XDateOnly.ToJulianDay(DateOnly)
  fullName: Galaxon.Core.Time.XDateOnly.ToJulianDay(DateOnly)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToJulianDay
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 200
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nConvert a  DateOnly object to a Julian Day value.\nThe result gives the Julian Day at the start of the given date\n(00:00:00, i.e. midnight), which will always have a fraction of 0.5, since a Julian Day\nstarts at 12:00:00 (noon).\n<xref href=\"Galaxon.Core.Time.XDateTime.ToJulianDay(DateTime)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static double ToJulianDay(this DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The DateOnly instance.
    return:
      type: System.Double
      description: The Julian Day value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToJulianDay(date As DateOnly) As Double
  overload: Galaxon.Core.Time.XDateOnly.ToJulianDay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.FromJulianDay(System.Double)
  commentId: M:Galaxon.Core.Time.XDateOnly.FromJulianDay(System.Double)
  id: FromJulianDay(System.Double)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: FromJulianDay(Double)
  nameWithType: XDateOnly.FromJulianDay(Double)
  fullName: Galaxon.Core.Time.XDateOnly.FromJulianDay(System.Double)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromJulianDay
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 212
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nConvert a Julian Day value to a date.\n"
  example: []
  syntax:
    content: public static DateOnly FromJulianDay(double jd)
    parameters:
    - id: jd
      type: System.Double
      description: "\nThe Julian Day value. If a fractional part indicating the time of day is included, this\ninformation will be discarded.\n"
    return:
      type: DateOnly
      description: A new DateOnly object.
    content.vb: Public Shared Function FromJulianDay(jd As Double) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.FromJulianDay*
  see:
  - linkId: Galaxon.Core.Time.XDateTime.FromJulianDay(System.Double)
    commentId: M:Galaxon.Core.Time.XDateTime.FromJulianDay(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetEaster(System.Int32)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetEaster(System.Int32)
  id: GetEaster(System.Int32)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetEaster(Int32)
  nameWithType: XDateOnly.GetEaster(Int32)
  fullName: Galaxon.Core.Time.XDateOnly.GetEaster(System.Int32)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetEaster
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 231
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nGet the date of Easter Sunday in the given year.\nFormula is from Wikipedia.\nThis method uses the &quot;Meeus/Jones/Butcher&quot; algorithm from 1876, with the New Scientist\nmodifications from 1961.\nTested for years 1600..2299.\n"
  example: []
  syntax:
    content: public static DateOnly GetEaster(int year)
    parameters:
    - id: year
      type: System.Int32
      description: The Gregorian year number.
    return:
      type: DateOnly
      description: The date of Easter Sunday for the given year.
    content.vb: Public Shared Function GetEaster(year As Integer) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.GetEaster*
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Date_of_Easter#Anonymous_Gregorian_algorithm
    altText: https://en.wikipedia.org/wiki/Date_of_Easter#Anonymous_Gregorian_algorithm
  - linkType: HRef
    linkId: https://www.census.gov/data/software/x13as/genhol/easter-dates.html
    altText: https://www.census.gov/data/software/x13as/genhol/easter-dates.html
  - linkType: HRef
    linkId: https://www.assa.org.au/edm
    altText: https://www.assa.org.au/edm
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetChristmas(System.Int32)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetChristmas(System.Int32)
  id: GetChristmas(System.Int32)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetChristmas(Int32)
  nameWithType: XDateOnly.GetChristmas(Int32)
  fullName: Galaxon.Core.Time.XDateOnly.GetChristmas(System.Int32)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetChristmas
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 255
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nGet the date of Christmas Day in the given year.\n"
  example: []
  syntax:
    content: public static DateOnly GetChristmas(int year)
    parameters:
    - id: year
      type: System.Int32
      description: The year.
    return:
      type: DateOnly
      description: The date of Christmas in the given year.
    content.vb: Public Shared Function GetChristmas(year As Integer) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.GetChristmas*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth(System.Int32,System.Int32,System.Int32,DayOfWeek)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth(System.Int32,System.Int32,System.Int32,DayOfWeek)
  id: GetNthWeekdayInMonth(System.Int32,System.Int32,System.Int32,DayOfWeek)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetNthWeekdayInMonth(Int32, Int32, Int32, DayOfWeek)
  nameWithType: XDateOnly.GetNthWeekdayInMonth(Int32, Int32, Int32, DayOfWeek)
  fullName: Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth(System.Int32, System.Int32, System.Int32, DayOfWeek)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetNthWeekdayInMonth
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 280
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nFind the nth weekday in a given month.\nExample:\n<pre><code>// Get the 4th Thursday in January, 2023.\nDateOnly meetup = XDateOnly.GetNthWeekdayInMonth(2023, 1, 4, DayOfWeek.Thursday);</code></pre>\nA negative value for n means count from the end of the month.\nn = -1 means the last one in the month. n = -2 means the second-last, etc.\nExample:\n<pre><code>// Get the last Monday in November, 2025.\nDateOnly meetup = XDateOnly.GetNthWeekdayInMonth(2025, 11, -1, DayOfWeek.Monday);</code></pre>\n"
  example: []
  syntax:
    content: public static DateOnly GetNthWeekdayInMonth(int year, int month, int n, DayOfWeek dayOfWeek)
    parameters:
    - id: year
      type: System.Int32
      description: The year.
    - id: month
      type: System.Int32
      description: The month.
    - id: n
      type: System.Int32
      description: Which occurence of the day of the week within the month.
    - id: dayOfWeek
      type: DayOfWeek
      description: The day of the week.
    return:
      type: DateOnly
      description: The requested date.
    content.vb: Public Shared Function GetNthWeekdayInMonth(year As Integer, month As Integer, n As Integer, dayOfWeek As DayOfWeek) As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Time.XDateOnly.GetThanksgiving(System.Int32,System.String)
  commentId: M:Galaxon.Core.Time.XDateOnly.GetThanksgiving(System.Int32,System.String)
  id: GetThanksgiving(System.Int32,System.String)
  parent: Galaxon.Core.Time.XDateOnly
  langs:
  - csharp
  - vb
  name: GetThanksgiving(Int32, String)
  nameWithType: XDateOnly.GetThanksgiving(Int32, String)
  fullName: Galaxon.Core.Time.XDateOnly.GetThanksgiving(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Core/Time/XDateOnly.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetThanksgiving
    path: ../Core/Core/Time/XDateOnly.cs
    startLine: 338
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Time
  summary: "\nFind the date of Thanksgiving for a specified country in a given year.\nOnly years with a holiday called &quot;Thanksgiving&quot; are supported. The default is &quot;US&quot;.\n"
  example: []
  syntax:
    content: public static DateOnly GetThanksgiving(int year, string countryCode = "US")
    parameters:
    - id: year
      type: System.Int32
      description: The year.
    - id: countryCode
      type: System.String
      description: The ISO 2-letter country code.
    return:
      type: DateOnly
      description: The date of Thanksgiving.
    content.vb: Public Shared Function GetThanksgiving(year As Integer, countryCode As String = "US") As DateOnly
  overload: Galaxon.Core.Time.XDateOnly.GetThanksgiving*
  exceptions:
  - type: Galaxon.Core.Exceptions.ArgumentInvalidException
    commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
    description: "\nEither this country doesn&apos;t celebrate Thanksgiving, or the method doesn&apos;t support it.\n"
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Thanksgiving#Observance
    altText: https://en.wikipedia.org/wiki/Thanksgiving#Observance
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Time
  commentId: N:Galaxon.Core.Time
  name: Galaxon.Core.Time
  nameWithType: Galaxon.Core.Time
  fullName: Galaxon.Core.Time
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Time.XDateOnly.ToIsoString*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.ToIsoString
  name: ToIsoString
  nameWithType: XDateOnly.ToIsoString
  fullName: Galaxon.Core.Time.XDateOnly.ToIsoString
- uid: DateOnly
  isExternal: true
  name: DateOnly
  nameWithType: DateOnly
  fullName: DateOnly
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Galaxon.Core.Time.XDateOnly.ToDateTime*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.ToDateTime
  name: ToDateTime
  nameWithType: XDateOnly.ToDateTime
  fullName: Galaxon.Core.Time.XDateOnly.ToDateTime
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: DateTimeKind
  commentId: '!:DateTimeKind'
  isExternal: true
  name: DateTimeKind
  nameWithType: DateTimeKind
  fullName: DateTimeKind
- uid: Galaxon.Core.Time.XDateOnly.GetTicks*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetTicks
  name: GetTicks
  nameWithType: XDateOnly.GetTicks
  fullName: Galaxon.Core.Time.XDateOnly.GetTicks
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Galaxon.Core.Time.XDateOnly.GetTotalSeconds*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetTotalSeconds
  name: GetTotalSeconds
  nameWithType: XDateOnly.GetTotalSeconds
  fullName: Galaxon.Core.Time.XDateOnly.GetTotalSeconds
- uid: Galaxon.Core.Time.XDateOnly.GetTotalDays*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetTotalDays
  name: GetTotalDays
  nameWithType: XDateOnly.GetTotalDays
  fullName: Galaxon.Core.Time.XDateOnly.GetTotalDays
- uid: Galaxon.Core.Time.XDateOnly.GetTotalYears*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetTotalYears
  name: GetTotalYears
  nameWithType: XDateOnly.GetTotalYears
  fullName: Galaxon.Core.Time.XDateOnly.GetTotalYears
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Galaxon.Core.Time.XDateOnly.Add*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.Add
  name: Add
  nameWithType: XDateOnly.Add
  fullName: Galaxon.Core.Time.XDateOnly.Add
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: TimeOnly
  isExternal: true
  name: TimeOnly
  nameWithType: TimeOnly
  fullName: TimeOnly
- uid: Galaxon.Core.Time.XDateOnly.AddWeeks*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.AddWeeks
  name: AddWeeks
  nameWithType: XDateOnly.AddWeeks
  fullName: Galaxon.Core.Time.XDateOnly.AddWeeks
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Galaxon.Core.Time.XDateOnly.Subtract*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.Subtract
  name: Subtract
  nameWithType: XDateOnly.Subtract
  fullName: Galaxon.Core.Time.XDateOnly.Subtract
- uid: Galaxon.Core.Time.XDateTime.FromTotalDays(System.Double)
  commentId: M:Galaxon.Core.Time.XDateTime.FromTotalDays(System.Double)
  isExternal: true
- uid: Galaxon.Core.Time.XDateOnly.FromTotalDays*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.FromTotalDays
  name: FromTotalDays
  nameWithType: XDateOnly.FromTotalDays
  fullName: Galaxon.Core.Time.XDateOnly.FromTotalDays
- uid: Galaxon.Core.Time.XDateOnly.FromTotalYears*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.FromTotalYears
  name: FromTotalYears
  nameWithType: XDateOnly.FromTotalYears
  fullName: Galaxon.Core.Time.XDateOnly.FromTotalYears
- uid: Galaxon.Core.Time.XDateOnly.FromDayOfYear*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.FromDayOfYear
  name: FromDayOfYear
  nameWithType: XDateOnly.FromDayOfYear
  fullName: Galaxon.Core.Time.XDateOnly.FromDayOfYear
- uid: Galaxon.Core.Time.XDateTime.ToJulianDay(DateTime)
  commentId: M:Galaxon.Core.Time.XDateTime.ToJulianDay(DateTime)
  isExternal: true
- uid: Galaxon.Core.Time.XDateOnly.ToJulianDay*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.ToJulianDay
  name: ToJulianDay
  nameWithType: XDateOnly.ToJulianDay
  fullName: Galaxon.Core.Time.XDateOnly.ToJulianDay
- uid: Galaxon.Core.Time.XDateTime.FromJulianDay(System.Double)
  commentId: M:Galaxon.Core.Time.XDateTime.FromJulianDay(System.Double)
  isExternal: true
- uid: Galaxon.Core.Time.XDateOnly.FromJulianDay*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.FromJulianDay
  name: FromJulianDay
  nameWithType: XDateOnly.FromJulianDay
  fullName: Galaxon.Core.Time.XDateOnly.FromJulianDay
- uid: Galaxon.Core.Time.XDateOnly.GetEaster*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetEaster
  name: GetEaster
  nameWithType: XDateOnly.GetEaster
  fullName: Galaxon.Core.Time.XDateOnly.GetEaster
- uid: Galaxon.Core.Time.XDateOnly.GetChristmas*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetChristmas
  name: GetChristmas
  nameWithType: XDateOnly.GetChristmas
  fullName: Galaxon.Core.Time.XDateOnly.GetChristmas
- uid: Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth
  name: GetNthWeekdayInMonth
  nameWithType: XDateOnly.GetNthWeekdayInMonth
  fullName: Galaxon.Core.Time.XDateOnly.GetNthWeekdayInMonth
- uid: DayOfWeek
  commentId: '!:DayOfWeek'
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: DayOfWeek
- uid: Galaxon.Core.Exceptions.ArgumentInvalidException
  commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
  name: ArgumentInvalidException
  nameWithType: ArgumentInvalidException
  fullName: Galaxon.Core.Exceptions.ArgumentInvalidException
- uid: Galaxon.Core.Time.XDateOnly.GetThanksgiving*
  commentId: Overload:Galaxon.Core.Time.XDateOnly.GetThanksgiving
  name: GetThanksgiving
  nameWithType: XDateOnly.GetThanksgiving
  fullName: Galaxon.Core.Time.XDateOnly.GetThanksgiving
