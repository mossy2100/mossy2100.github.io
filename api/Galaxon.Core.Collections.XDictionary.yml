### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Collections.XDictionary
  commentId: T:Galaxon.Core.Collections.XDictionary
  id: XDictionary
  parent: Galaxon.Core.Collections
  children:
  - Galaxon.Core.Collections.XDictionary.Flip``2(Dictionary{``0,``1})
  langs:
  - csharp
  - vb
  name: XDictionary
  nameWithType: XDictionary
  fullName: Galaxon.Core.Collections.XDictionary
  type: Class
  source:
    remote:
      path: Core/Collections/XDictionary.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XDictionary
    path: ../Core/Core/Collections/XDictionary.cs
    startLine: 7
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Collections
  summary: "\nExtension methods for Dictionary.\n"
  example: []
  syntax:
    content: 'public static class XDictionary : object'
    content.vb: >-
      Public Module XDictionary
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Collections.XDictionary.Flip``2(Dictionary{``0,``1})
  commentId: M:Galaxon.Core.Collections.XDictionary.Flip``2(Dictionary{``0,``1})
  id: Flip``2(Dictionary{``0,``1})
  isExtensionMethod: true
  parent: Galaxon.Core.Collections.XDictionary
  langs:
  - csharp
  - vb
  name: Flip<TKey, TValue>(Dictionary<TKey, TValue>)
  nameWithType: XDictionary.Flip<TKey, TValue>(Dictionary<TKey, TValue>)
  fullName: Galaxon.Core.Collections.XDictionary.Flip<TKey, TValue>(Dictionary<TKey, TValue>)
  type: Method
  source:
    remote:
      path: Core/Collections/XDictionary.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Flip
    path: ../Core/Core/Collections/XDictionary.cs
    startLine: 19
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Collections
  summary: "\nCreate a new dictionary from the instance with keys and values flipped.\n"
  example: []
  syntax:
    content: public static Dictionary<TValue, TKey> Flip<TKey, TValue>(this Dictionary<TKey, TValue> dict)
    parameters:
    - id: dict
      type: Dictionary{{TKey},{TValue}}
      description: The instance.
    typeParameters:
    - id: TKey
      description: The key type.
    - id: TValue
      description: The value type.
    return:
      type: Dictionary{{TValue},{TKey}}
      description: The flipped dictionary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Flip(Of TKey, TValue)(dict As Dictionary(Of TKey, TValue)) As Dictionary(Of TValue, TKey)
  overload: Galaxon.Core.Collections.XDictionary.Flip*
  exceptions:
  - type: Galaxon.Core.Exceptions.ArgumentInvalidException
    commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
    description: "\nIf the instance contains duplicate values.\n"
  nameWithType.vb: XDictionary.Flip(Of TKey, TValue)(Dictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Collections.XDictionary.Flip(Of TKey, TValue)(Dictionary(Of TKey, TValue))
  name.vb: Flip(Of TKey, TValue)(Dictionary(Of TKey, TValue))
references:
- uid: Galaxon.Core.Collections
  commentId: N:Galaxon.Core.Collections
  name: Galaxon.Core.Collections
  nameWithType: Galaxon.Core.Collections
  fullName: Galaxon.Core.Collections
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Exceptions.ArgumentInvalidException
  commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
  name: ArgumentInvalidException
  nameWithType: ArgumentInvalidException
  fullName: Galaxon.Core.Exceptions.ArgumentInvalidException
- uid: Galaxon.Core.Collections.XDictionary.Flip*
  commentId: Overload:Galaxon.Core.Collections.XDictionary.Flip
  name: Flip
  nameWithType: XDictionary.Flip
  fullName: Galaxon.Core.Collections.XDictionary.Flip
- uid: Dictionary{{TKey},{TValue}}
  commentId: '!:Dictionary{``0,``1}'
  definition: Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{{TValue},{TKey}}
  commentId: '!:Dictionary{``1,``0}'
  definition: Dictionary`2
  name: Dictionary<TValue, TKey>
  nameWithType: Dictionary<TValue, TKey>
  fullName: Dictionary<TValue, TKey>
  nameWithType.vb: Dictionary(Of TValue, TKey)
  fullName.vb: Dictionary(Of TValue, TKey)
  name.vb: Dictionary(Of TValue, TKey)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
