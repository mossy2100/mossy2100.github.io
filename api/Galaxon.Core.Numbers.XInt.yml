### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XInt
  commentId: T:Galaxon.Core.Numbers.XInt
  id: XInt
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XInt.Abs(System.Int32)
  - Galaxon.Core.Numbers.XInt.GetRandom
  - Galaxon.Core.Numbers.XInt.Sqrt(System.Int32)
  langs:
  - csharp
  - vb
  name: XInt
  nameWithType: XInt
  fullName: Galaxon.Core.Numbers.XInt
  type: Class
  source:
    remote:
      path: Core/Numbers/XInt.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XInt
    path: ../Core/Core/Numbers/XInt.cs
    startLine: 3
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: Extension methods for int.
  example: []
  syntax:
    content: 'public static class XInt : object'
    content.vb: >-
      Public Module XInt
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XInt.Sqrt(System.Int32)
  commentId: M:Galaxon.Core.Numbers.XInt.Sqrt(System.Int32)
  id: Sqrt(System.Int32)
  parent: Galaxon.Core.Numbers.XInt
  langs:
  - csharp
  - vb
  name: Sqrt(Int32)
  nameWithType: XInt.Sqrt(Int32)
  fullName: Galaxon.Core.Numbers.XInt.Sqrt(System.Int32)
  type: Method
  source:
    remote:
      path: Core/Numbers/XInt.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Sqrt
    path: ../Core/Core/Numbers/XInt.cs
    startLine: 10
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the int closest to the square root of the given int.\n"
  example: []
  syntax:
    content: public static int Sqrt(int n)
    parameters:
    - id: n
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function Sqrt(n As Integer) As Integer
  overload: Galaxon.Core.Numbers.XInt.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XInt.Abs(System.Int32)
  commentId: M:Galaxon.Core.Numbers.XInt.Abs(System.Int32)
  id: Abs(System.Int32)
  parent: Galaxon.Core.Numbers.XInt
  langs:
  - csharp
  - vb
  name: Abs(Int32)
  nameWithType: XInt.Abs(Int32)
  fullName: Galaxon.Core.Numbers.XInt.Abs(System.Int32)
  type: Method
  source:
    remote:
      path: Core/Numbers/XInt.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Abs
    path: ../Core/Core/Numbers/XInt.cs
    startLine: 21
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nReturn the absolute value of an int as a uint.\nThis addresses an issue with int.Abs(), which is that Abs(int.MinValue) can&apos;t be expressed\nas a int, and so wrap-around occurs.\nUnsigned integer types don&apos;t have an Abs() method, so there&apos;s no collision.\n"
  example: []
  syntax:
    content: public static uint Abs(int n)
    parameters:
    - id: n
      type: System.Int32
      description: A int value.
    return:
      type: System.UInt32
      description: The absolute value as a uint.
    content.vb: Public Shared Function Abs(n As Integer) As UInteger
  overload: Galaxon.Core.Numbers.XInt.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XInt.GetRandom
  commentId: M:Galaxon.Core.Numbers.XInt.GetRandom
  id: GetRandom
  parent: Galaxon.Core.Numbers.XInt
  langs:
  - csharp
  - vb
  name: GetRandom()
  nameWithType: XInt.GetRandom()
  fullName: Galaxon.Core.Numbers.XInt.GetRandom()
  type: Method
  source:
    remote:
      path: Core/Numbers/XInt.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetRandom
    path: ../Core/Core/Numbers/XInt.cs
    startLine: 32
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet a random int.\n"
  example: []
  syntax:
    content: public static int GetRandom()
    return:
      type: System.Int32
    content.vb: Public Shared Function GetRandom As Integer
  overload: Galaxon.Core.Numbers.XInt.GetRandom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Numbers.XInt.Sqrt*
  commentId: Overload:Galaxon.Core.Numbers.XInt.Sqrt
  name: Sqrt
  nameWithType: XInt.Sqrt
  fullName: Galaxon.Core.Numbers.XInt.Sqrt
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Galaxon.Core.Numbers.XInt.Abs*
  commentId: Overload:Galaxon.Core.Numbers.XInt.Abs
  name: Abs
  nameWithType: XInt.Abs
  fullName: Galaxon.Core.Numbers.XInt.Abs
- uid: System.UInt32
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Galaxon.Core.Numbers.XInt.GetRandom*
  commentId: Overload:Galaxon.Core.Numbers.XInt.GetRandom
  name: GetRandom
  nameWithType: XInt.GetRandom
  fullName: Galaxon.Core.Numbers.XInt.GetRandom
