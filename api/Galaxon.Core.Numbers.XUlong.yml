### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XUlong
  commentId: T:Galaxon.Core.Numbers.XUlong
  id: XUlong
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XUlong.GetRandom
  - Galaxon.Core.Numbers.XUlong.Sum(IEnumerable{System.UInt64})
  - Galaxon.Core.Numbers.XUlong.Sum(IEnumerable{System.UInt64},Func{System.UInt64,System.UInt64})
  langs:
  - csharp
  - vb
  name: XUlong
  nameWithType: XUlong
  fullName: Galaxon.Core.Numbers.XUlong
  type: Class
  source:
    remote:
      path: Core/Numbers/XUlong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XUlong
    path: ../Core/Core/Numbers/XUlong.cs
    startLine: 3
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: Extension methods for ulong.
  example: []
  syntax:
    content: 'public static class XUlong : object'
    content.vb: >-
      Public Module XUlong
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XUlong.GetRandom
  commentId: M:Galaxon.Core.Numbers.XUlong.GetRandom
  id: GetRandom
  parent: Galaxon.Core.Numbers.XUlong
  langs:
  - csharp
  - vb
  name: GetRandom()
  nameWithType: XUlong.GetRandom()
  fullName: Galaxon.Core.Numbers.XUlong.GetRandom()
  type: Method
  source:
    remote:
      path: Core/Numbers/XUlong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetRandom
    path: ../Core/Core/Numbers/XUlong.cs
    startLine: 8
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet a random ulong.\n"
  example: []
  syntax:
    content: public static ulong GetRandom()
    return:
      type: System.UInt64
    content.vb: Public Shared Function GetRandom As ULong
  overload: Galaxon.Core.Numbers.XUlong.GetRandom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XUlong.Sum(IEnumerable{System.UInt64})
  commentId: M:Galaxon.Core.Numbers.XUlong.Sum(IEnumerable{System.UInt64})
  id: Sum(IEnumerable{System.UInt64})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XUlong
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<UInt64>)
  nameWithType: XUlong.Sum(IEnumerable<UInt64>)
  fullName: Galaxon.Core.Numbers.XUlong.Sum(IEnumerable<System.UInt64>)
  type: Method
  source:
    remote:
      path: Core/Numbers/XUlong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Sum
    path: ../Core/Core/Numbers/XUlong.cs
    startLine: 16
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the sum of all values in the collection.\n"
  example: []
  syntax:
    content: public static ulong Sum(this IEnumerable<ulong> source)
    parameters:
    - id: source
      type: IEnumerable{System.UInt64}
    return:
      type: System.UInt64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of ULong)) As ULong
  overload: Galaxon.Core.Numbers.XUlong.Sum*
  nameWithType.vb: XUlong.Sum(IEnumerable(Of UInt64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XUlong.Sum(IEnumerable(Of System.UInt64))
  name.vb: Sum(IEnumerable(Of UInt64))
- uid: Galaxon.Core.Numbers.XUlong.Sum(IEnumerable{System.UInt64},Func{System.UInt64,System.UInt64})
  commentId: M:Galaxon.Core.Numbers.XUlong.Sum(IEnumerable{System.UInt64},Func{System.UInt64,System.UInt64})
  id: Sum(IEnumerable{System.UInt64},Func{System.UInt64,System.UInt64})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XUlong
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<UInt64>, Func<UInt64, UInt64>)
  nameWithType: XUlong.Sum(IEnumerable<UInt64>, Func<UInt64, UInt64>)
  fullName: Galaxon.Core.Numbers.XUlong.Sum(IEnumerable<System.UInt64>, Func<System.UInt64, System.UInt64>)
  type: Method
  source:
    remote:
      path: Core/Numbers/XUlong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Sum
    path: ../Core/Core/Numbers/XUlong.cs
    startLine: 22
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the sum of all values in the collection, transformed by the supplied function.\n"
  example: []
  syntax:
    content: public static ulong Sum(this IEnumerable<ulong> source, Func<ulong, ulong> func)
    parameters:
    - id: source
      type: IEnumerable{System.UInt64}
    - id: func
      type: Func{System.UInt64,System.UInt64}
    return:
      type: System.UInt64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of ULong), func As Func(Of ULong, ULong)) As ULong
  overload: Galaxon.Core.Numbers.XUlong.Sum*
  nameWithType.vb: XUlong.Sum(IEnumerable(Of UInt64), Func(Of UInt64, UInt64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XUlong.Sum(IEnumerable(Of System.UInt64), Func(Of System.UInt64, System.UInt64))
  name.vb: Sum(IEnumerable(Of UInt64), Func(Of UInt64, UInt64))
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Numbers.XUlong.GetRandom*
  commentId: Overload:Galaxon.Core.Numbers.XUlong.GetRandom
  name: GetRandom
  nameWithType: XUlong.GetRandom
  fullName: Galaxon.Core.Numbers.XUlong.GetRandom
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Galaxon.Core.Numbers.XUlong.Sum*
  commentId: Overload:Galaxon.Core.Numbers.XUlong.Sum
  name: Sum
  nameWithType: XUlong.Sum
  fullName: Galaxon.Core.Numbers.XUlong.Sum
- uid: IEnumerable{System.UInt64}
  commentId: '!:IEnumerable{System.UInt64}'
  definition: IEnumerable`1
  name: IEnumerable<UInt64>
  nameWithType: IEnumerable<UInt64>
  fullName: IEnumerable<System.UInt64>
  nameWithType.vb: IEnumerable(Of UInt64)
  fullName.vb: IEnumerable(Of System.UInt64)
  name.vb: IEnumerable(Of UInt64)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{System.UInt64,System.UInt64}
  commentId: '!:Func{System.UInt64,System.UInt64}'
  definition: Func`2
  name: Func<UInt64, UInt64>
  nameWithType: Func<UInt64, UInt64>
  fullName: Func<System.UInt64, System.UInt64>
  nameWithType.vb: Func(Of UInt64, UInt64)
  fullName.vb: Func(Of System.UInt64, System.UInt64)
  name.vb: Func(Of UInt64, UInt64)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
