### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Testing.XAssert
  commentId: T:Galaxon.Core.Testing.XAssert
  id: XAssert
  parent: Galaxon.Core.Testing
  children:
  - Galaxon.Core.Testing.XAssert.AreEqual(DateTime,DateTime,System.Nullable{TimeSpan})
  - Galaxon.Core.Testing.XAssert.AreEqual(System.Double,System.Decimal)
  - Galaxon.Core.Testing.XAssert.AreEqual(System.Double,System.Double,System.Double)
  - Galaxon.Core.Testing.XAssert.AreEqual(System.ValueTuple{System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double,System.Double},System.Double)
  - Galaxon.Core.Testing.XAssert.AreEqualPercent(System.Double,System.Double,System.Double)
  - Galaxon.Core.Testing.XAssert.IsInRange(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: XAssert
  nameWithType: XAssert
  fullName: Galaxon.Core.Testing.XAssert
  type: Class
  source:
    remote:
      path: Core/Testing/XAssert.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XAssert
    path: ../Core/Core/Testing/XAssert.cs
    startLine: 8
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Testing
  summary: "\nContainer for my own custom Assert methods.\n"
  example: []
  syntax:
    content: 'public static class XAssert : object'
    content.vb: >-
      Public Module XAssert
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Testing.XAssert.AreEqual(System.ValueTuple{System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double,System.Double},System.Double)
  commentId: M:Galaxon.Core.Testing.XAssert.AreEqual(System.ValueTuple{System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double,System.Double},System.Double)
  id: AreEqual(System.ValueTuple{System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double,System.Double},System.Double)
  parent: Galaxon.Core.Testing.XAssert
  langs:
  - csharp
  - vb
  name: AreEqual((Double d, Double m, Double s), (Double d, Double m, Double s), Double)
  nameWithType: XAssert.AreEqual((Double d, Double m, Double s), (Double d, Double m, Double s), Double)
  fullName: Galaxon.Core.Testing.XAssert.AreEqual(System.ValueTuple<System.Double, System.Double, System.Double>, System.ValueTuple<System.Double, System.Double, System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Core/Testing/XAssert.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: AreEqual
    path: ../Core/Core/Testing/XAssert.cs
    startLine: 20
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Testing
  summary: "\nHelper function to compare DMS (degrees, minutes, seconds) tuples for\nequality.\nI may need to rethink the delta parameter (e.g. make it also a tuple so\nI can set different deltas for degrees, minutes, and seconds) but for\nnow it&apos;s fine.\n"
  example: []
  syntax:
    content: public static void AreEqual((double d, double m, double s) A, (double d, double m, double s) B, double delta = null)
    parameters:
    - id: A
      type: System.ValueTuple{System.Double,System.Double,System.Double}
      description: Angle 1
    - id: B
      type: System.ValueTuple{System.Double,System.Double,System.Double}
      description: Angle 2
    - id: delta
      type: System.Double
      description: Maximum acceptable difference between value pairs.
    content.vb: Public Shared Sub AreEqual(A As(d As Double, m As Double, s As Double)(Of Double , Double, Double), B As(d As Double, m As Double, s As Double)(Of Double , Double, Double), delta As Double = Nothing)
  overload: Galaxon.Core.Testing.XAssert.AreEqual*
  nameWithType.vb: XAssert.AreEqual((d As Double, m As Double, s As Double)(Of Double, Double, Double), (d As Double, m As Double, s As Double)(Of Double, Double, Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Testing.XAssert.AreEqual(System.ValueTuple(Of System.Double, System.Double, System.Double), System.ValueTuple(Of System.Double, System.Double, System.Double), System.Double)
  name.vb: AreEqual((d As Double, m As Double, s As Double)(Of Double, Double, Double), (d As Double, m As Double, s As Double)(Of Double, Double, Double), Double)
- uid: Galaxon.Core.Testing.XAssert.AreEqual(DateTime,DateTime,System.Nullable{TimeSpan})
  commentId: M:Galaxon.Core.Testing.XAssert.AreEqual(DateTime,DateTime,System.Nullable{TimeSpan})
  id: AreEqual(DateTime,DateTime,System.Nullable{TimeSpan})
  parent: Galaxon.Core.Testing.XAssert
  langs:
  - csharp
  - vb
  name: AreEqual(DateTime, DateTime, Nullable<TimeSpan>)
  nameWithType: XAssert.AreEqual(DateTime, DateTime, Nullable<TimeSpan>)
  fullName: Galaxon.Core.Testing.XAssert.AreEqual(DateTime, DateTime, System.Nullable<TimeSpan>)
  type: Method
  source:
    remote:
      path: Core/Testing/XAssert.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: AreEqual
    path: ../Core/Core/Testing/XAssert.cs
    startLine: 34
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Testing
  summary: "\nHelper function to compare DateTimes for equality.\n"
  example: []
  syntax:
    content: public static void AreEqual(DateTime dt1, DateTime dt2, TimeSpan? delta = null)
    parameters:
    - id: dt1
      type: DateTime
      description: The first DateTime
    - id: dt2
      type: DateTime
      description: The second DateTime
    - id: delta
      type: System.Nullable{TimeSpan}
      description: Maximum acceptable difference.
    content.vb: Public Shared Sub AreEqual(dt1 As DateTime, dt2 As DateTime, delta As TimeSpan? = Nothing)
  overload: Galaxon.Core.Testing.XAssert.AreEqual*
  nameWithType.vb: XAssert.AreEqual(DateTime, DateTime, Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Testing.XAssert.AreEqual(DateTime, DateTime, System.Nullable(Of TimeSpan))
  name.vb: AreEqual(DateTime, DateTime, Nullable(Of TimeSpan))
- uid: Galaxon.Core.Testing.XAssert.IsInRange(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)
  commentId: M:Galaxon.Core.Testing.XAssert.IsInRange(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)
  id: IsInRange(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)
  parent: Galaxon.Core.Testing.XAssert
  langs:
  - csharp
  - vb
  name: IsInRange(Double, Double, Double, Boolean, Boolean)
  nameWithType: XAssert.IsInRange(Double, Double, Double, Boolean, Boolean)
  fullName: Galaxon.Core.Testing.XAssert.IsInRange(System.Double, System.Double, System.Double, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: Core/Testing/XAssert.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsInRange
    path: ../Core/Core/Testing/XAssert.cs
    startLine: 48
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Testing
  summary: "\nCheck if a value is in a given range.\n"
  example: []
  syntax:
    content: public static void IsInRange(double value, double lower, double upper, bool includeLower = true, bool includeUpper = false)
    parameters:
    - id: value
      type: System.Double
      description: The value to test.
    - id: lower
      type: System.Double
      description: The lower value.
    - id: upper
      type: System.Double
      description: The upper value.
    - id: includeLower
      type: System.Boolean
      description: Include lower value in the range.
    - id: includeUpper
      type: System.Boolean
      description: Include upper value in the range.
    content.vb: Public Shared Sub IsInRange(value As Double, lower As Double, upper As Double, includeLower As Boolean = True, includeUpper As Boolean = False)
  overload: Galaxon.Core.Testing.XAssert.IsInRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Testing.XAssert.AreEqual(System.Double,System.Double,System.Double)
  commentId: M:Galaxon.Core.Testing.XAssert.AreEqual(System.Double,System.Double,System.Double)
  id: AreEqual(System.Double,System.Double,System.Double)
  parent: Galaxon.Core.Testing.XAssert
  langs:
  - csharp
  - vb
  name: AreEqual(Double, Double, Double)
  nameWithType: XAssert.AreEqual(Double, Double, Double)
  fullName: Galaxon.Core.Testing.XAssert.AreEqual(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Core/Testing/XAssert.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: AreEqual
    path: ../Core/Core/Testing/XAssert.cs
    startLine: 61
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Testing
  summary: "\nCompares 2 doubles to see if they are close enough to be considered equal.\n"
  example: []
  syntax:
    content: public static void AreEqual(double expected, double actual, double delta = null)
    parameters:
    - id: expected
      type: System.Double
      description: The expected value.
    - id: actual
      type: System.Double
      description: The actual value.
    - id: delta
      type: System.Double
      description: The max allowable difference.
    content.vb: Public Shared Sub AreEqual(expected As Double, actual As Double, delta As Double = Nothing)
  overload: Galaxon.Core.Testing.XAssert.AreEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Testing.XAssert.AreEqual(System.Double,System.Decimal)
  commentId: M:Galaxon.Core.Testing.XAssert.AreEqual(System.Double,System.Decimal)
  id: AreEqual(System.Double,System.Decimal)
  parent: Galaxon.Core.Testing.XAssert
  langs:
  - csharp
  - vb
  name: AreEqual(Double, Decimal)
  nameWithType: XAssert.AreEqual(Double, Decimal)
  fullName: Galaxon.Core.Testing.XAssert.AreEqual(System.Double, System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Testing/XAssert.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: AreEqual
    path: ../Core/Core/Testing/XAssert.cs
    startLine: 70
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Testing
  summary: "\nHelper function to test if a double equals a decimal.\n"
  example: []
  syntax:
    content: public static void AreEqual(double expected, decimal actual)
    parameters:
    - id: expected
      type: System.Double
      description: Expected double value
    - id: actual
      type: System.Decimal
      description: Actual decimal value
    content.vb: Public Shared Sub AreEqual(expected As Double, actual As Decimal)
  overload: Galaxon.Core.Testing.XAssert.AreEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Testing.XAssert.AreEqualPercent(System.Double,System.Double,System.Double)
  commentId: M:Galaxon.Core.Testing.XAssert.AreEqualPercent(System.Double,System.Double,System.Double)
  id: AreEqualPercent(System.Double,System.Double,System.Double)
  parent: Galaxon.Core.Testing.XAssert
  langs:
  - csharp
  - vb
  name: AreEqualPercent(Double, Double, Double)
  nameWithType: XAssert.AreEqualPercent(Double, Double, Double)
  fullName: Galaxon.Core.Testing.XAssert.AreEqualPercent(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Core/Testing/XAssert.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: AreEqualPercent
    path: ../Core/Core/Testing/XAssert.cs
    startLine: 96
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Testing
  summary: "\nCompare two double values for equality, with the delta expressed as percentage of the\nexpected value rather than an absolute value.\n"
  example: []
  syntax:
    content: public static void AreEqualPercent(double expected, double actual, double percent)
    parameters:
    - id: expected
      type: System.Double
    - id: actual
      type: System.Double
    - id: percent
      type: System.Double
    content.vb: Public Shared Sub AreEqualPercent(expected As Double, actual As Double, percent As Double)
  overload: Galaxon.Core.Testing.XAssert.AreEqualPercent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Testing
  commentId: N:Galaxon.Core.Testing
  name: Galaxon.Core.Testing
  nameWithType: Galaxon.Core.Testing
  fullName: Galaxon.Core.Testing
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Testing.XAssert.AreEqual*
  commentId: Overload:Galaxon.Core.Testing.XAssert.AreEqual
  name: AreEqual
  nameWithType: XAssert.AreEqual
  fullName: Galaxon.Core.Testing.XAssert.AreEqual
- uid: System.ValueTuple{System.Double,System.Double,System.Double}
  commentId: '!:System.ValueTuple{System.Double,System.Double,System.Double}'
  definition: System.ValueTuple`3
  name: (, , )<Double, Double, Double>
  nameWithType: (, , )<Double, Double, Double>
  fullName: System.ValueTuple<System.Double, System.Double, System.Double>
  nameWithType.vb: (, , )(Of Double, Double, Double)
  fullName.vb: System.ValueTuple(Of System.Double, System.Double, System.Double)
  name.vb: (, , )(Of Double, Double, Double)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.ValueTuple`3
  isExternal: true
  name: (, , )<, , >
  nameWithType: (, , )<, , >
  fullName: System.ValueTuple<, , >
  nameWithType.vb: (, , )(Of , , )
  fullName.vb: System.ValueTuple(Of , , )
  name.vb: (, , )(Of , , )
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: System.Nullable{TimeSpan}
  commentId: '!:System.Nullable{TimeSpan}'
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Testing.XAssert.IsInRange*
  commentId: Overload:Galaxon.Core.Testing.XAssert.IsInRange
  name: IsInRange
  nameWithType: XAssert.IsInRange
  fullName: Galaxon.Core.Testing.XAssert.IsInRange
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Decimal
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Galaxon.Core.Testing.XAssert.AreEqualPercent*
  commentId: Overload:Galaxon.Core.Testing.XAssert.AreEqualPercent
  name: AreEqualPercent
  nameWithType: XAssert.AreEqualPercent
  fullName: Galaxon.Core.Testing.XAssert.AreEqualPercent
