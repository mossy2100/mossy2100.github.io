### YamlMime:ManagedReference
items:
- uid: Galaxon.Numerics.BigDecimal
  commentId: T:Galaxon.Numerics.BigDecimal
  id: BigDecimal
  parent: Galaxon.Numerics
  children:
  - Galaxon.Numerics.BigDecimal.#ctor
  - Galaxon.Numerics.BigDecimal.#ctor(BigInteger,System.Int32,System.Boolean)
  - Galaxon.Numerics.BigDecimal.Abs(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Acos(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Acosh(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.AcosPi(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.AdditiveIdentity
  - Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Asin(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Asinh(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.AsinPi(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Atan(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Atanh(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.AtanPi(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Average(Galaxon.Numerics.BigDecimal[])
  - Galaxon.Numerics.BigDecimal.Cbrt(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Ceiling(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Clone
  - Galaxon.Numerics.BigDecimal.CompareTo(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.CompareTo(System.Nullable{System.Object})
  - Galaxon.Numerics.BigDecimal.ComputePhi
  - Galaxon.Numerics.BigDecimal.ComputePi
  - Galaxon.Numerics.BigDecimal.ComputeTau
  - Galaxon.Numerics.BigDecimal.Cos(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Cosh(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.CosPi(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Cube(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.DecimalPrecision
  - Galaxon.Numerics.BigDecimal.DoublePrecision
  - Galaxon.Numerics.BigDecimal.E
  - Galaxon.Numerics.BigDecimal.Equals(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Equals(System.Nullable{System.Object})
  - Galaxon.Numerics.BigDecimal.Exp(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Exp10(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Exp2(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Exponent
  - Galaxon.Numerics.BigDecimal.FloatPrecision
  - Galaxon.Numerics.BigDecimal.Floor(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Frac(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.GeometricMean(Galaxon.Numerics.BigDecimal[])
  - Galaxon.Numerics.BigDecimal.GetExponentByteCount
  - Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength
  - Galaxon.Numerics.BigDecimal.GetHashCode
  - Galaxon.Numerics.BigDecimal.GetSignificandBitLength
  - Galaxon.Numerics.BigDecimal.GetSignificandByteCount
  - Galaxon.Numerics.BigDecimal.GetTypeCode
  - Galaxon.Numerics.BigDecimal.HalfPrecision
  - Galaxon.Numerics.BigDecimal.Hypot(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsCanonical(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsComplexNumber(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsEvenInteger(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsFinite(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsImaginaryNumber(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsInfinity(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsInteger(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsNaN(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsNegative(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsNegativeInfinity(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsNormal(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsOddInteger(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsPositive(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsPositiveInfinity(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsRealNumber(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsSubnormal(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.IsZero(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Ln10
  - Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Log10(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Log2(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.MaxMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.MaxSigFigs
  - Galaxon.Numerics.BigDecimal.MinMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.MinMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.MultiplicativeIdentity
  - Galaxon.Numerics.BigDecimal.NegativeOne
  - Galaxon.Numerics.BigDecimal.NormalizeAngle(Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.NumSigFigs
  - Galaxon.Numerics.BigDecimal.One
  - Galaxon.Numerics.BigDecimal.op_Addition(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Decrement(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Division(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Equality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Explicit(BigRational)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~BigInteger
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~Half
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~Int128
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Byte
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Decimal
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Double
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int16
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int32
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int64
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.SByte
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Single
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt16
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt32
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt64
  - Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~UInt128
  - Galaxon.Numerics.BigDecimal.op_GreaterThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_GreaterThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Implicit(BigInteger)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(Galaxon.Numerics.BigDecimal)~BigRational
  - Galaxon.Numerics.BigDecimal.op_Implicit(Half)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(Int128)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.Byte)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.Decimal)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.Double)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.Int16)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.Int32)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.Int64)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.SByte)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.Single)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt16)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt32)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt64)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Implicit(UInt128)~Galaxon.Numerics.BigDecimal
  - Galaxon.Numerics.BigDecimal.op_Increment(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Inequality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_LessThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_LessThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Modulus(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Multiply(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_Subtraction(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_UnaryNegation(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.op_UnaryPlus(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.Parse(System.String)
  - Galaxon.Numerics.BigDecimal.Parse(System.String,NumberStyles,System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.Parse(System.String,System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.Phi
  - Galaxon.Numerics.BigDecimal.Pi
  - Galaxon.Numerics.BigDecimal.Pow(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Radix
  - Galaxon.Numerics.BigDecimal.RootN(Galaxon.Numerics.BigDecimal,System.Int32)
  - Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal,MidpointRounding)
  - Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal,System.Int32,MidpointRounding)
  - Galaxon.Numerics.BigDecimal.RoundSigFigs(Galaxon.Numerics.BigDecimal,System.Nullable{System.Int32},MidpointRounding)
  - Galaxon.Numerics.BigDecimal.Sign
  - Galaxon.Numerics.BigDecimal.Significand
  - Galaxon.Numerics.BigDecimal.Sin(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.SinCos(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.SinCosPi(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Sinh(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.SinPi(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Sqr(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Sqrt(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Tan(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Tanh(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.TanPi(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.Tau
  - Galaxon.Numerics.BigDecimal.ToBoolean(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToByte(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToChar(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToDateTime(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToDecimal(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToDouble(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToInt16(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToInt32(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToInt64(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToSByte(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToSingle(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToString
  - Galaxon.Numerics.BigDecimal.ToString(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToType(Type,System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToUInt16(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToUInt32(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.ToUInt64(System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.Truncate(Galaxon.Numerics.BigDecimal)
  - Galaxon.Numerics.BigDecimal.TryConvertFromChecked``1(``0,Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryConvertFromSaturating``1(``0,Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryConvertFromTruncating``1(``0,Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryConvertToChecked``1(Galaxon.Numerics.BigDecimal,``0@)
  - Galaxon.Numerics.BigDecimal.TryConvertToSaturating``1(Galaxon.Numerics.BigDecimal,``0@)
  - Galaxon.Numerics.BigDecimal.TryConvertToTruncating``1(Galaxon.Numerics.BigDecimal,``0@)
  - Galaxon.Numerics.BigDecimal.TryFormat(Span{System.Char},System.Int32@,ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  - Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  - Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian(Span{System.Byte},System.Int32@)
  - Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian(Span{System.Byte},System.Int32@)
  - Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian(Span{System.Byte},System.Int32@)
  - Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian(Span{System.Byte},System.Int32@)
  - Galaxon.Numerics.BigDecimal.Zero
  langs:
  - csharp
  - vb
  name: BigDecimal
  nameWithType: BigDecimal
  fullName: Galaxon.Numerics.BigDecimal
  type: Struct
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: BigDecimal
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 9
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nOperators and methods for comparing BigDecimals.\n"
  example: []
  syntax:
    content: public struct BigDecimal
    content.vb: Public Structure BigDecimal
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Taylor_series#Trigonometric_functions
    altText: https://en.wikipedia.org/wiki/Taylor_series#Trigonometric_functions
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Sine_and_cosine#Series_definitions
    altText: https://en.wikipedia.org/wiki/Sine_and_cosine#Series_definitions
  implements:
  - IConvertible
  - IFloatingPoint{Galaxon.Numerics.BigDecimal}
  - IPowerFunctions{Galaxon.Numerics.BigDecimal}
  - IRootFunctions{Galaxon.Numerics.BigDecimal}
  - IExponentialFunctions{Galaxon.Numerics.BigDecimal}
  - ILogarithmicFunctions{Galaxon.Numerics.BigDecimal}
  - ICloneable
  - ITrigonometricFunctions{Galaxon.Numerics.BigDecimal}
  - IHyperbolicFunctions{Galaxon.Numerics.BigDecimal}
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Galaxon.Numerics.BigDecimal.CompareTo(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.CompareTo(Galaxon.Numerics.BigDecimal)
  id: CompareTo(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: CompareTo(BigDecimal)
  nameWithType: BigDecimal.CompareTo(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.CompareTo(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: CompareTo
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 12
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public int CompareTo(BigDecimal other)
    parameters:
    - id: other
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As BigDecimal) As Integer
  overload: Galaxon.Numerics.BigDecimal.CompareTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.CompareTo(System.Nullable{System.Object})
  commentId: M:Galaxon.Numerics.BigDecimal.CompareTo(System.Nullable{System.Object})
  id: CompareTo(System.Nullable{System.Object})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: CompareTo(Nullable<Object>)
  nameWithType: BigDecimal.CompareTo(Nullable<Object>)
  fullName: Galaxon.Numerics.BigDecimal.CompareTo(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: CompareTo
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 35
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public int CompareTo(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(obj As Object?) As Integer
  overload: Galaxon.Numerics.BigDecimal.CompareTo*
  nameWithType.vb: BigDecimal.CompareTo(Nullable(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.CompareTo(System.Nullable(Of System.Object))
  name.vb: CompareTo(Nullable(Of Object))
- uid: Galaxon.Numerics.BigDecimal.Equals(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Equals(Galaxon.Numerics.BigDecimal)
  id: Equals(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Equals(BigDecimal)
  nameWithType: BigDecimal.Equals(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Equals(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Equals
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 45
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public bool Equals(BigDecimal other)
    parameters:
    - id: other
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.Equals(System.Nullable{System.Object})
  commentId: M:Galaxon.Numerics.BigDecimal.Equals(System.Nullable{System.Object})
  id: Equals(System.Nullable{System.Object})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Equals(Nullable<Object>)
  nameWithType: BigDecimal.Equals(Nullable<Object>)
  fullName: Galaxon.Numerics.BigDecimal.Equals(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Equals
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 49
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object?) As Boolean
  overload: Galaxon.Numerics.BigDecimal.Equals*
  nameWithType.vb: BigDecimal.Equals(Nullable(Of Object))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Galaxon.Numerics.BigDecimal.Equals(System.Nullable(Of System.Object))
  name.vb: Equals(Nullable(Of Object))
- uid: Galaxon.Numerics.BigDecimal.GetHashCode
  commentId: M:Galaxon.Numerics.BigDecimal.GetHashCode
  id: GetHashCode
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: BigDecimal.GetHashCode()
  fullName: Galaxon.Numerics.BigDecimal.GetHashCode()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: GetHashCode
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 59
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: Galaxon.Numerics.BigDecimal.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Galaxon.Numerics.BigDecimal.MaxMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.MaxMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: MaxMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: MaxMagnitude(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.MaxMagnitude(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.MaxMagnitude(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: MaxMagnitude
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 63
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal MaxMagnitude(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function MaxMagnitude(x As BigDecimal, y As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.MaxMagnitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: MaxMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: MaxMagnitudeNumber(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.MaxMagnitudeNumber(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: MaxMagnitudeNumber
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 67
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal MaxMagnitudeNumber(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function MaxMagnitudeNumber(x As BigDecimal, y As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.MinMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.MinMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: MinMagnitude(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: MinMagnitude(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.MinMagnitude(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.MinMagnitude(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: MinMagnitude
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 71
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal MinMagnitude(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function MinMagnitude(x As BigDecimal, y As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.MinMagnitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.MinMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.MinMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: MinMagnitudeNumber(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: MinMagnitudeNumber(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.MinMagnitudeNumber(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.MinMagnitudeNumber(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: MinMagnitudeNumber
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 75
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal MinMagnitudeNumber(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function MinMagnitudeNumber(x As BigDecimal, y As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.MinMagnitudeNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Equality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Equality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_Equality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Equality(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Equality(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Equality(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Equality
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 83
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool operator ==(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x As BigDecimal, y As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Inequality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Inequality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_Inequality(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Inequality(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Inequality(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Inequality(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Inequality
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 87
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool operator !=(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x As BigDecimal, y As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_LessThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_LessThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_LessThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: LessThan(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.LessThan(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.LessThan(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_LessThan
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 91
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool operator <(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x As BigDecimal, y As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_LessThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_LessThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_LessThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.LessThanOrEqual(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.LessThanOrEqual(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_LessThanOrEqual
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 95
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool operator <=(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x As BigDecimal, y As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_GreaterThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_GreaterThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_GreaterThan(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GreaterThan(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.GreaterThan(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.GreaterThan(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_GreaterThan
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 99
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool operator>(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x As BigDecimal, y As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_GreaterThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_GreaterThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_GreaterThanOrEqual(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.GreaterThanOrEqual(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.GreaterThanOrEqual(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalCompare.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_GreaterThanOrEqual
    path: ../BigDecimal/BigDecimal/BigDecimalCompare.cs
    startLine: 103
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool operator >=(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x As BigDecimal, y As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.E
  commentId: P:Galaxon.Numerics.BigDecimal.E
  id: E
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: E
  nameWithType: BigDecimal.E
  fullName: Galaxon.Numerics.BigDecimal.E
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: E
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 15
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal E { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property E As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.E*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.Pi
  commentId: P:Galaxon.Numerics.BigDecimal.Pi
  id: Pi
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Pi
  nameWithType: BigDecimal.Pi
  fullName: Galaxon.Numerics.BigDecimal.Pi
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Pi
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 35
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal Pi { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property Pi As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Pi*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.ComputePi
  commentId: M:Galaxon.Numerics.BigDecimal.ComputePi
  id: ComputePi
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ComputePi()
  nameWithType: BigDecimal.ComputePi()
  fullName: Galaxon.Numerics.BigDecimal.ComputePi()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ComputePi
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 56
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCompute π.\n\nThe Chudnovsky algorithm used here was the one used to generate π to 6.2 trillion decimal\nplaces, the current world record.\nSee: <a href=\"https://en.wikipedia.org/wiki/Chudnovsky_algorithm\">https://en.wikipedia.org/wiki/Chudnovsky_algorithm</a>\n"
  example: []
  syntax:
    content: public static BigDecimal ComputePi()
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function ComputePi As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.ComputePi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Tau
  commentId: P:Galaxon.Numerics.BigDecimal.Tau
  id: Tau
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Tau
  nameWithType: BigDecimal.Tau
  fullName: Galaxon.Numerics.BigDecimal.Tau
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Tau
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 108
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal Tau { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property Tau As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Tau*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.ComputeTau
  commentId: M:Galaxon.Numerics.BigDecimal.ComputeTau
  id: ComputeTau
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ComputeTau()
  nameWithType: BigDecimal.ComputeTau()
  fullName: Galaxon.Numerics.BigDecimal.ComputeTau()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ComputeTau
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 126
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCompute the value of tau (τ), equal to 2 * pi (2π).\n"
  example: []
  syntax:
    content: public static BigDecimal ComputeTau()
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The value of τ to the current number of significant figures.
    content.vb: Public Shared Function ComputeTau As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.ComputeTau*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Phi
  commentId: P:Galaxon.Numerics.BigDecimal.Phi
  id: Phi
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Phi
  nameWithType: BigDecimal.Phi
  fullName: Galaxon.Numerics.BigDecimal.Phi
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Phi
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 149
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nThe golden ratio (φ).\n"
  example: []
  syntax:
    content: public static readonly BigDecimal Phi { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property Phi As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Phi*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.ComputePhi
  commentId: M:Galaxon.Numerics.BigDecimal.ComputePhi
  id: ComputePhi
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ComputePhi()
  nameWithType: BigDecimal.ComputePhi()
  fullName: Galaxon.Numerics.BigDecimal.ComputePhi()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ComputePhi
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 167
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCompute the value of phi (φ), the golden ration.\n"
  example: []
  syntax:
    content: public static BigDecimal ComputePhi()
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The value of φ to the current number of significant figures.
    content.vb: Public Shared Function ComputePhi As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.ComputePhi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Ln10
  commentId: P:Galaxon.Numerics.BigDecimal.Ln10
  id: Ln10
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Ln10
  nameWithType: BigDecimal.Ln10
  fullName: Galaxon.Numerics.BigDecimal.Ln10
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalConstants.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Ln10
    path: ../BigDecimal/BigDecimal/BigDecimalConstants.cs
    startLine: 193
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nThe natural logarithm of 10.\n"
  example: []
  syntax:
    content: public static readonly BigDecimal Ln10 { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property Ln10 As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Ln10*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.SByte)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.SByte)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.SByte)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(SByte to BigDecimal)
  nameWithType: BigDecimal.Implicit(SByte to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.SByte to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 14
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from sbyte to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(sbyte n)
    parameters:
    - id: n
      type: System.SByte
      description: The sbyte value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As SByte) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(SByte to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.SByte to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(SByte to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.Byte)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.Byte)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.Byte)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Byte to BigDecimal)
  nameWithType: BigDecimal.Implicit(Byte to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.Byte to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 22
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from byte to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(byte n)
    parameters:
    - id: n
      type: System.Byte
      description: The byte value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As Byte) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Byte to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.Byte to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Byte to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.Int16)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.Int16)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.Int16)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Int16 to BigDecimal)
  nameWithType: BigDecimal.Implicit(Int16 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.Int16 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 30
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from short to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(short n)
    parameters:
    - id: n
      type: System.Int16
      description: The short value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As Short) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Int16 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.Int16 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Int16 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt16)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt16)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.UInt16)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(UInt16 to BigDecimal)
  nameWithType: BigDecimal.Implicit(UInt16 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.UInt16 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 38
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from ushort to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(ushort n)
    parameters:
    - id: n
      type: System.UInt16
      description: The ushort value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As UShort) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(UInt16 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.UInt16 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(UInt16 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.Int32)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.Int32)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.Int32)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to BigDecimal)
  nameWithType: BigDecimal.Implicit(Int32 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.Int32 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 46
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from int to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(int n)
    parameters:
    - id: n
      type: System.Int32
      description: The int value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As Integer) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Int32 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.Int32 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Int32 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt32)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt32)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.UInt32)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(UInt32 to BigDecimal)
  nameWithType: BigDecimal.Implicit(UInt32 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.UInt32 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 54
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from uint to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(uint n)
    parameters:
    - id: n
      type: System.UInt32
      description: The uint value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As UInteger) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(UInt32 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.UInt32 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(UInt32 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.Int64)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.Int64)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.Int64)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to BigDecimal)
  nameWithType: BigDecimal.Implicit(Int64 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.Int64 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 62
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from long to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(long n)
    parameters:
    - id: n
      type: System.Int64
      description: The long value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As Long) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Int64 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.Int64 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Int64 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt64)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.UInt64)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.UInt64)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(UInt64 to BigDecimal)
  nameWithType: BigDecimal.Implicit(UInt64 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.UInt64 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 70
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from ulong to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(ulong n)
    parameters:
    - id: n
      type: System.UInt64
      description: The ulong value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As ULong) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(UInt64 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.UInt64 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(UInt64 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(Int128)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(Int128)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(Int128)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Int128 to BigDecimal)
  nameWithType: BigDecimal.Implicit(Int128 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(Int128 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 78
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from Int128 to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(Int128 n)
    parameters:
    - id: n
      type: Int128
      description: The Int128 value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As Int128) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Int128 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(Int128 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Int128 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(UInt128)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(UInt128)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(UInt128)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(UInt128 to BigDecimal)
  nameWithType: BigDecimal.Implicit(UInt128 to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(UInt128 to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 86
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from UInt128 to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(UInt128 n)
    parameters:
    - id: n
      type: UInt128
      description: The UInt128 value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As UInt128) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(UInt128 to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(UInt128 to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(UInt128 to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(BigInteger)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(BigInteger)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(BigInteger)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(BigInteger to BigDecimal)
  nameWithType: BigDecimal.Implicit(BigInteger to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(BigInteger to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 94
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from BigInteger to BigDecimal.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(BigInteger n)
    parameters:
    - id: n
      type: BigInteger
      description: The BigInteger value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The equivalent BigDecimal value.
    content.vb: Public Shared Widening Operator CType(n As BigInteger) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(BigInteger to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(BigInteger to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(BigInteger to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.Decimal)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.Decimal)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.Decimal)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Decimal to BigDecimal)
  nameWithType: BigDecimal.Implicit(Decimal to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.Decimal to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 108
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from decimal to BigDecimal.\n\nThe cast is implicit because any decimal value can be cast to a BigDecimal exactly, without\nloss of information. However, rounding off using Round() or RoundSigFigs() can cause\ninformation loss.\n\nWe don&apos;t need to use Parse() or division operations here, because the base is decimal.\nWe can just extract the parts of the decimal from the bits and construct a BigDecimal from\nthose. This method should be faster than using ToString() and Parse().\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(decimal n)
    parameters:
    - id: n
      type: System.Decimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Widening Operator CType(n As Decimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Decimal to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.Decimal to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Decimal to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(Half)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(Half)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(Half)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Half to BigDecimal)
  nameWithType: BigDecimal.Implicit(Half to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(Half to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 195
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from Half to BigDecimal.\n\nNB: The resulting BigDecimal value is exactly the value encoded by the Half.\nHowever, since Halfs only approximate decimal values, it&apos;s possible that only the first few\ndigits are valid in terms of the intended value.\nTherefore, you may need to use RoundSigFigs() to get the value you really want.\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(Half n)
    parameters:
    - id: n
      type: Half
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Widening Operator CType(n As Half) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Half to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(Half to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Half to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.Single)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.Single)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.Single)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Single to BigDecimal)
  nameWithType: BigDecimal.Implicit(Single to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.Single to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 209
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from float to BigDecimal.\n\nNB: The resulting BigDecimal value is exactly the value encoded by the float.\nHowever, since floats only approximate decimal values, it&apos;s possible that only the first 6-9\ndigits are valid in terms of the intended value.\nTherefore, you may need to use RoundSigFigs() to get the value you really want, e.g.\n<pre><code>BigDecimal bd = BigDecimal.RoundSigFigs(1.2345f, FloatMaxSigFigs);</code></pre>\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(float n)
    parameters:
    - id: n
      type: System.Single
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Widening Operator CType(n As Single) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Single to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.Single to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Single to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(System.Double)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(System.Double)~Galaxon.Numerics.BigDecimal
  id: op_Implicit(System.Double)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(Double to BigDecimal)
  nameWithType: BigDecimal.Implicit(Double to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(System.Double to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 223
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from double to BigDecimal.\n\nNB: The resulting BigDecimal value is exactly the value encoded by the double.\nHowever, since doubles only approximate decimal values, it&apos;s possible that only the first\n15-17 digits are valid in terms of the intended value.\nTherefore, you may need to use RoundSigFigs() to get the value you really want, e.g.\n<pre><code>BigDecimal bd = BigDecimal.RoundSigFigs(1.2345, DoubleMaxSigFigs);</code></pre>\n"
  example: []
  syntax:
    content: public static implicit operator BigDecimal(double n)
    parameters:
    - id: n
      type: System.Double
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Widening Operator CType(n As Double) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(Double to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(System.Double to Galaxon.Numerics.BigDecimal)
  name.vb: Widening(Double to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(BigRational)~Galaxon.Numerics.BigDecimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(BigRational)~Galaxon.Numerics.BigDecimal
  id: op_Explicit(BigRational)~Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigRational to BigDecimal)
  nameWithType: BigDecimal.Explicit(BigRational to BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(BigRational to Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 232
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigRational to BigDecimal.\n\nThis cast operation has to be explicit as there could be loss of information due to the\nlimit on the number of significant figures in the result of the division.\n"
  example: []
  syntax:
    content: public static explicit operator BigDecimal(BigRational n)
    parameters:
    - id: n
      type: BigRational
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Narrowing Operator CType(n As BigRational) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigRational to BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(BigRational to Galaxon.Numerics.BigDecimal)
  name.vb: Narrowing(BigRational to BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.SByte
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.SByte
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.SByte
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to SByte)
  nameWithType: BigDecimal.Explicit(BigDecimal to SByte)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.SByte)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 245
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to sbyte.\n"
  example: []
  syntax:
    content: public static explicit operator sbyte (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.SByte
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As SByte
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to SByte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.SByte)
  name.vb: Narrowing(BigDecimal to SByte)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Byte
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Byte
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.Byte
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Byte)
  nameWithType: BigDecimal.Explicit(BigDecimal to Byte)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.Byte)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 254
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to byte.\n"
  example: []
  syntax:
    content: public static explicit operator byte (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Byte
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Byte
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.Byte)
  name.vb: Narrowing(BigDecimal to Byte)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int16
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int16
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int16
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Int16)
  nameWithType: BigDecimal.Explicit(BigDecimal to Int16)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.Int16)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 263
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to short.\n"
  example: []
  syntax:
    content: public static explicit operator short (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Int16
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Short
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Int16)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.Int16)
  name.vb: Narrowing(BigDecimal to Int16)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt16
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt16
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt16
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to UInt16)
  nameWithType: BigDecimal.Explicit(BigDecimal to UInt16)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.UInt16)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 272
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to ushort.\n"
  example: []
  syntax:
    content: public static explicit operator ushort (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.UInt16
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As UShort
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to UInt16)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.UInt16)
  name.vb: Narrowing(BigDecimal to UInt16)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int32
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int32
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int32
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Int32)
  nameWithType: BigDecimal.Explicit(BigDecimal to Int32)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.Int32)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 281
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to int.\n"
  example: []
  syntax:
    content: public static explicit operator int (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Int32
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Integer
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.Int32)
  name.vb: Narrowing(BigDecimal to Int32)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt32
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt32
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt32
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to UInt32)
  nameWithType: BigDecimal.Explicit(BigDecimal to UInt32)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.UInt32)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 290
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to uint.\n"
  example: []
  syntax:
    content: public static explicit operator uint (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.UInt32
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As UInteger
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.UInt32)
  name.vb: Narrowing(BigDecimal to UInt32)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int64
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int64
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.Int64
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Int64)
  nameWithType: BigDecimal.Explicit(BigDecimal to Int64)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.Int64)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 299
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to long.\n"
  example: []
  syntax:
    content: public static explicit operator long (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Int64
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Long
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.Int64)
  name.vb: Narrowing(BigDecimal to Int64)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt64
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt64
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.UInt64
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to UInt64)
  nameWithType: BigDecimal.Explicit(BigDecimal to UInt64)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.UInt64)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 308
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to ulong.\n"
  example: []
  syntax:
    content: public static explicit operator ulong (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.UInt64
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As ULong
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to UInt64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.UInt64)
  name.vb: Narrowing(BigDecimal to UInt64)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~Int128
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~Int128
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~Int128
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Int128)
  nameWithType: BigDecimal.Explicit(BigDecimal to Int128)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to Int128)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 317
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to Int128.\n"
  example: []
  syntax:
    content: public static explicit operator Int128(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Int128
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Int128
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Int128)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to Int128)
  name.vb: Narrowing(BigDecimal to Int128)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~UInt128
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~UInt128
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~UInt128
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to UInt128)
  nameWithType: BigDecimal.Explicit(BigDecimal to UInt128)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to UInt128)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 326
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to UInt128.\n"
  example: []
  syntax:
    content: public static explicit operator UInt128(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: UInt128
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As UInt128
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to UInt128)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to UInt128)
  name.vb: Narrowing(BigDecimal to UInt128)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~BigInteger
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~BigInteger
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~BigInteger
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to BigInteger)
  nameWithType: BigDecimal.Explicit(BigDecimal to BigInteger)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to BigInteger)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 332
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to BigInteger.\n"
  example: []
  syntax:
    content: public static explicit operator BigInteger(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: BigInteger
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As BigInteger
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to BigInteger)
  name.vb: Narrowing(BigDecimal to BigInteger)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Decimal
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Decimal
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.Decimal
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Decimal)
  nameWithType: BigDecimal.Explicit(BigDecimal to Decimal)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.Decimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 345
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to decimal.\n"
  example: []
  syntax:
    content: public static explicit operator decimal (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Decimal
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Decimal
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.Decimal)
  name.vb: Narrowing(BigDecimal to Decimal)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~Half
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~Half
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~Half
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Half)
  nameWithType: BigDecimal.Explicit(BigDecimal to Half)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to Half)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 395
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to Half.\n\nBigDecimal doesn&apos;t use a default precision for the &quot;E&quot; format specifier, so all digits will\nbe rendered in the call to ToString(). This will produce the closest matching Half possible.\n\nThis method will not throw an OverflowException, but will return ±∞ for a value outside the\nvalid range for Half.\n"
  example: []
  syntax:
    content: public static explicit operator Half(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Half
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Half
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Half)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to Half)
  name.vb: Narrowing(BigDecimal to Half)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Single
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Single
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.Single
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Single)
  nameWithType: BigDecimal.Explicit(BigDecimal to Single)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.Single)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 410
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to float.\n\n(I implemented a method to do this using maths and bits, but it takes much longer.)\n\nBigDecimal doesn&apos;t use a default precision for the &quot;E&quot; format specifier, so all digits will\nbe rendered in the call to ToString(). This will produce the closest matching float\npossible.\n\nThis method will not throw an OverflowException, but will return ±∞ for a value outside the\nvalid range for float.\n"
  example: []
  syntax:
    content: public static explicit operator float (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Single
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Single
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.Single)
  name.vb: Narrowing(BigDecimal to Single)
- uid: Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Double
  commentId: M:Galaxon.Numerics.BigDecimal.op_Explicit(Galaxon.Numerics.BigDecimal)~System.Double
  id: op_Explicit(Galaxon.Numerics.BigDecimal)~System.Double
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Explicit(BigDecimal to Double)
  nameWithType: BigDecimal.Explicit(BigDecimal to Double)
  fullName: Galaxon.Numerics.BigDecimal.Explicit(Galaxon.Numerics.BigDecimal to System.Double)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Explicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 423
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nExplicit cast from BigDecimal to double.\n\nBigDecimal doesn&apos;t use a default precision for the &quot;E&quot; format specifier, so all digits will\nbe rendered in the call to ToString(). This will produce the closest matching double\npossible.\n\nThis method will not throw an OverflowException, but will return ±∞ for a value outside the\nvalid range for double.\n"
  example: []
  syntax:
    content: public static explicit operator double (BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Double
    content.vb: Public Shared Narrowing Operator CType(bd As BigDecimal) As Double
  overload: Galaxon.Numerics.BigDecimal.op_Explicit*
  nameWithType.vb: BigDecimal.Narrowing(BigDecimal to Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing(Galaxon.Numerics.BigDecimal to System.Double)
  name.vb: Narrowing(BigDecimal to Double)
- uid: Galaxon.Numerics.BigDecimal.op_Implicit(Galaxon.Numerics.BigDecimal)~BigRational
  commentId: M:Galaxon.Numerics.BigDecimal.op_Implicit(Galaxon.Numerics.BigDecimal)~BigRational
  id: op_Implicit(Galaxon.Numerics.BigDecimal)~BigRational
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Implicit(BigDecimal to BigRational)
  nameWithType: BigDecimal.Implicit(BigDecimal to BigRational)
  fullName: Galaxon.Numerics.BigDecimal.Implicit(Galaxon.Numerics.BigDecimal to BigRational)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Implicit
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 432
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nImplicit cast from BigDecimal to BigRational.\n\nThis cast operation can be implicit because it can be done exactly, without loss of\ninformation, due to the use of BigIntegers inside BigRational.\n"
  example: []
  syntax:
    content: public static implicit operator BigRational(BigDecimal n)
    parameters:
    - id: n
      type: Galaxon.Numerics.BigDecimal
    return:
      type: BigRational
    content.vb: Public Shared Widening Operator CType(n As BigDecimal) As BigRational
  overload: Galaxon.Numerics.BigDecimal.op_Implicit*
  nameWithType.vb: BigDecimal.Widening(BigDecimal to BigRational)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening(Galaxon.Numerics.BigDecimal to BigRational)
  name.vb: Widening(BigDecimal to BigRational)
- uid: Galaxon.Numerics.BigDecimal.TryConvertFromChecked``1(``0,Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryConvertFromChecked``1(``0,Galaxon.Numerics.BigDecimal@)
  id: TryConvertFromChecked``1(``0,Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryConvertFromChecked<TOther>(TOther, out BigDecimal)
  nameWithType: BigDecimal.TryConvertFromChecked<TOther>(TOther, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryConvertFromChecked<TOther>(TOther, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryConvertFromChecked
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 450
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: >-
      public static bool TryConvertFromChecked<TOther>(TOther value, out BigDecimal result)
          where TOther : INumberBase<TOther>
    parameters:
    - id: value
      type: '{TOther}'
    - id: result
      type: Galaxon.Numerics.BigDecimal
    typeParameters:
    - id: TOther
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryConvertFromChecked(Of TOther As INumberBase(Of TOther))(value As TOther, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryConvertFromChecked*
  nameWithType.vb: BigDecimal.TryConvertFromChecked(Of TOther)(TOther, ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryConvertFromChecked(Of TOther)(TOther, ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryConvertFromChecked(Of TOther)(TOther, ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.TryConvertFromSaturating``1(``0,Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryConvertFromSaturating``1(``0,Galaxon.Numerics.BigDecimal@)
  id: TryConvertFromSaturating``1(``0,Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryConvertFromSaturating<TOther>(TOther, out BigDecimal)
  nameWithType: BigDecimal.TryConvertFromSaturating<TOther>(TOther, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryConvertFromSaturating<TOther>(TOther, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryConvertFromSaturating
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 484
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: >-
      public static bool TryConvertFromSaturating<TOther>(TOther value, out BigDecimal result)
          where TOther : INumberBase<TOther>
    parameters:
    - id: value
      type: '{TOther}'
    - id: result
      type: Galaxon.Numerics.BigDecimal
    typeParameters:
    - id: TOther
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryConvertFromSaturating(Of TOther As INumberBase(Of TOther))(value As TOther, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryConvertFromSaturating*
  nameWithType.vb: BigDecimal.TryConvertFromSaturating(Of TOther)(TOther, ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryConvertFromSaturating(Of TOther)(TOther, ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryConvertFromSaturating(Of TOther)(TOther, ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.TryConvertFromTruncating``1(``0,Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryConvertFromTruncating``1(``0,Galaxon.Numerics.BigDecimal@)
  id: TryConvertFromTruncating``1(``0,Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryConvertFromTruncating<TOther>(TOther, out BigDecimal)
  nameWithType: BigDecimal.TryConvertFromTruncating<TOther>(TOther, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryConvertFromTruncating<TOther>(TOther, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryConvertFromTruncating
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 489
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: >-
      public static bool TryConvertFromTruncating<TOther>(TOther value, out BigDecimal result)
          where TOther : INumberBase<TOther>
    parameters:
    - id: value
      type: '{TOther}'
    - id: result
      type: Galaxon.Numerics.BigDecimal
    typeParameters:
    - id: TOther
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryConvertFromTruncating(Of TOther As INumberBase(Of TOther))(value As TOther, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryConvertFromTruncating*
  nameWithType.vb: BigDecimal.TryConvertFromTruncating(Of TOther)(TOther, ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryConvertFromTruncating(Of TOther)(TOther, ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryConvertFromTruncating(Of TOther)(TOther, ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.TryConvertToChecked``1(Galaxon.Numerics.BigDecimal,``0@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryConvertToChecked``1(Galaxon.Numerics.BigDecimal,``0@)
  id: TryConvertToChecked``1(Galaxon.Numerics.BigDecimal,``0@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryConvertToChecked<TOther>(BigDecimal, out TOther)
  nameWithType: BigDecimal.TryConvertToChecked<TOther>(BigDecimal, out TOther)
  fullName: Galaxon.Numerics.BigDecimal.TryConvertToChecked<TOther>(Galaxon.Numerics.BigDecimal, out TOther)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryConvertToChecked
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 531
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: >-
      public static bool TryConvertToChecked<TOther>(BigDecimal value, out TOther result)
          where TOther : INumberBase<TOther>
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    - id: result
      type: '{TOther}'
    typeParameters:
    - id: TOther
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryConvertToChecked(Of TOther As INumberBase(Of TOther))(value As BigDecimal, ByRef result As TOther) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryConvertToChecked*
  nameWithType.vb: BigDecimal.TryConvertToChecked(Of TOther)(BigDecimal, ByRef TOther)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryConvertToChecked(Of TOther)(Galaxon.Numerics.BigDecimal, ByRef TOther)
  name.vb: TryConvertToChecked(Of TOther)(BigDecimal, ByRef TOther)
- uid: Galaxon.Numerics.BigDecimal.TryConvertToSaturating``1(Galaxon.Numerics.BigDecimal,``0@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryConvertToSaturating``1(Galaxon.Numerics.BigDecimal,``0@)
  id: TryConvertToSaturating``1(Galaxon.Numerics.BigDecimal,``0@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryConvertToSaturating<TOther>(BigDecimal, out TOther)
  nameWithType: BigDecimal.TryConvertToSaturating<TOther>(BigDecimal, out TOther)
  fullName: Galaxon.Numerics.BigDecimal.TryConvertToSaturating<TOther>(Galaxon.Numerics.BigDecimal, out TOther)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryConvertToSaturating
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 597
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: >-
      public static bool TryConvertToSaturating<TOther>(BigDecimal value, out TOther result)
          where TOther : INumberBase<TOther>
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    - id: result
      type: '{TOther}'
    typeParameters:
    - id: TOther
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryConvertToSaturating(Of TOther As INumberBase(Of TOther))(value As BigDecimal, ByRef result As TOther) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryConvertToSaturating*
  nameWithType.vb: BigDecimal.TryConvertToSaturating(Of TOther)(BigDecimal, ByRef TOther)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryConvertToSaturating(Of TOther)(Galaxon.Numerics.BigDecimal, ByRef TOther)
  name.vb: TryConvertToSaturating(Of TOther)(BigDecimal, ByRef TOther)
- uid: Galaxon.Numerics.BigDecimal.TryConvertToTruncating``1(Galaxon.Numerics.BigDecimal,``0@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryConvertToTruncating``1(Galaxon.Numerics.BigDecimal,``0@)
  id: TryConvertToTruncating``1(Galaxon.Numerics.BigDecimal,``0@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryConvertToTruncating<TOther>(BigDecimal, out TOther)
  nameWithType: BigDecimal.TryConvertToTruncating<TOther>(BigDecimal, out TOther)
  fullName: Galaxon.Numerics.BigDecimal.TryConvertToTruncating<TOther>(Galaxon.Numerics.BigDecimal, out TOther)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryConvertToTruncating
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 639
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: >-
      public static bool TryConvertToTruncating<TOther>(BigDecimal value, out TOther result)
          where TOther : INumberBase<TOther>
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    - id: result
      type: '{TOther}'
    typeParameters:
    - id: TOther
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryConvertToTruncating(Of TOther As INumberBase(Of TOther))(value As BigDecimal, ByRef result As TOther) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryConvertToTruncating*
  nameWithType.vb: BigDecimal.TryConvertToTruncating(Of TOther)(BigDecimal, ByRef TOther)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryConvertToTruncating(Of TOther)(Galaxon.Numerics.BigDecimal, ByRef TOther)
  name.vb: TryConvertToTruncating(Of TOther)(BigDecimal, ByRef TOther)
- uid: Galaxon.Numerics.BigDecimal.GetTypeCode
  commentId: M:Galaxon.Numerics.BigDecimal.GetTypeCode
  id: GetTypeCode
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GetTypeCode()
  nameWithType: BigDecimal.GetTypeCode()
  fullName: Galaxon.Numerics.BigDecimal.GetTypeCode()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: GetTypeCode
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 676
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public TypeCode GetTypeCode()
    return:
      type: TypeCode
    content.vb: Public Function GetTypeCode As TypeCode
  overload: Galaxon.Numerics.BigDecimal.GetTypeCode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.ToBoolean(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToBoolean(System.Nullable{IFormatProvider})
  id: ToBoolean(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToBoolean(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToBoolean(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToBoolean(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToBoolean
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 680
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public bool ToBoolean(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Boolean
    content.vb: Public Function ToBoolean(provider As IFormatProvider?) As Boolean
  overload: Galaxon.Numerics.BigDecimal.ToBoolean*
  nameWithType.vb: BigDecimal.ToBoolean(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToBoolean(System.Nullable(Of IFormatProvider))
  name.vb: ToBoolean(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToSByte(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToSByte(System.Nullable{IFormatProvider})
  id: ToSByte(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToSByte(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToSByte(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToSByte(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToSByte
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 684
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public sbyte ToSByte(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.SByte
    content.vb: Public Function ToSByte(provider As IFormatProvider?) As SByte
  overload: Galaxon.Numerics.BigDecimal.ToSByte*
  nameWithType.vb: BigDecimal.ToSByte(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToSByte(System.Nullable(Of IFormatProvider))
  name.vb: ToSByte(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToByte(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToByte(System.Nullable{IFormatProvider})
  id: ToByte(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToByte(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToByte(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToByte(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToByte
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 688
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public byte ToByte(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Byte
    content.vb: Public Function ToByte(provider As IFormatProvider?) As Byte
  overload: Galaxon.Numerics.BigDecimal.ToByte*
  nameWithType.vb: BigDecimal.ToByte(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToByte(System.Nullable(Of IFormatProvider))
  name.vb: ToByte(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToInt16(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToInt16(System.Nullable{IFormatProvider})
  id: ToInt16(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToInt16(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToInt16(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToInt16(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToInt16
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 692
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public short ToInt16(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Int16
    content.vb: Public Function ToInt16(provider As IFormatProvider?) As Short
  overload: Galaxon.Numerics.BigDecimal.ToInt16*
  nameWithType.vb: BigDecimal.ToInt16(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToInt16(System.Nullable(Of IFormatProvider))
  name.vb: ToInt16(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToUInt16(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToUInt16(System.Nullable{IFormatProvider})
  id: ToUInt16(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToUInt16(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToUInt16(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToUInt16(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToUInt16
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 696
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public ushort ToUInt16(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.UInt16
    content.vb: Public Function ToUInt16(provider As IFormatProvider?) As UShort
  overload: Galaxon.Numerics.BigDecimal.ToUInt16*
  nameWithType.vb: BigDecimal.ToUInt16(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToUInt16(System.Nullable(Of IFormatProvider))
  name.vb: ToUInt16(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToInt32(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToInt32(System.Nullable{IFormatProvider})
  id: ToInt32(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToInt32(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToInt32(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToInt32(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToInt32
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 700
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public int ToInt32(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Int32
    content.vb: Public Function ToInt32(provider As IFormatProvider?) As Integer
  overload: Galaxon.Numerics.BigDecimal.ToInt32*
  nameWithType.vb: BigDecimal.ToInt32(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToInt32(System.Nullable(Of IFormatProvider))
  name.vb: ToInt32(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToUInt32(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToUInt32(System.Nullable{IFormatProvider})
  id: ToUInt32(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToUInt32(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToUInt32(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToUInt32(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToUInt32
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 704
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public uint ToUInt32(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.UInt32
    content.vb: Public Function ToUInt32(provider As IFormatProvider?) As UInteger
  overload: Galaxon.Numerics.BigDecimal.ToUInt32*
  nameWithType.vb: BigDecimal.ToUInt32(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToUInt32(System.Nullable(Of IFormatProvider))
  name.vb: ToUInt32(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToInt64(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToInt64(System.Nullable{IFormatProvider})
  id: ToInt64(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToInt64(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToInt64(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToInt64(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToInt64
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 708
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public long ToInt64(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Int64
    content.vb: Public Function ToInt64(provider As IFormatProvider?) As Long
  overload: Galaxon.Numerics.BigDecimal.ToInt64*
  nameWithType.vb: BigDecimal.ToInt64(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToInt64(System.Nullable(Of IFormatProvider))
  name.vb: ToInt64(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToUInt64(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToUInt64(System.Nullable{IFormatProvider})
  id: ToUInt64(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToUInt64(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToUInt64(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToUInt64(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToUInt64
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 712
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public ulong ToUInt64(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.UInt64
    content.vb: Public Function ToUInt64(provider As IFormatProvider?) As ULong
  overload: Galaxon.Numerics.BigDecimal.ToUInt64*
  nameWithType.vb: BigDecimal.ToUInt64(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToUInt64(System.Nullable(Of IFormatProvider))
  name.vb: ToUInt64(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToSingle(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToSingle(System.Nullable{IFormatProvider})
  id: ToSingle(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToSingle(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToSingle(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToSingle(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToSingle
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 716
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public float ToSingle(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Single
    content.vb: Public Function ToSingle(provider As IFormatProvider?) As Single
  overload: Galaxon.Numerics.BigDecimal.ToSingle*
  nameWithType.vb: BigDecimal.ToSingle(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToSingle(System.Nullable(Of IFormatProvider))
  name.vb: ToSingle(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToDouble(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToDouble(System.Nullable{IFormatProvider})
  id: ToDouble(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToDouble(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToDouble(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToDouble(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToDouble
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 720
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public double ToDouble(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Double
    content.vb: Public Function ToDouble(provider As IFormatProvider?) As Double
  overload: Galaxon.Numerics.BigDecimal.ToDouble*
  nameWithType.vb: BigDecimal.ToDouble(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToDouble(System.Nullable(Of IFormatProvider))
  name.vb: ToDouble(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToDecimal(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToDecimal(System.Nullable{IFormatProvider})
  id: ToDecimal(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToDecimal(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToDecimal(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToDecimal(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToDecimal
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 724
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public decimal ToDecimal(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Decimal
    content.vb: Public Function ToDecimal(provider As IFormatProvider?) As Decimal
  overload: Galaxon.Numerics.BigDecimal.ToDecimal*
  nameWithType.vb: BigDecimal.ToDecimal(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToDecimal(System.Nullable(Of IFormatProvider))
  name.vb: ToDecimal(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToChar(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToChar(System.Nullable{IFormatProvider})
  id: ToChar(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToChar(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToChar(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToChar(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToChar
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 728
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public char ToChar(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Char
    content.vb: Public Function ToChar(provider As IFormatProvider?) As Char
  overload: Galaxon.Numerics.BigDecimal.ToChar*
  nameWithType.vb: BigDecimal.ToChar(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToChar(System.Nullable(Of IFormatProvider))
  name.vb: ToChar(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToString(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToString(System.Nullable{IFormatProvider})
  id: ToString(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToString(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToString(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToString(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToString
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 732
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public string ToString(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.String
    content.vb: Public Function ToString(provider As IFormatProvider?) As String
  overload: Galaxon.Numerics.BigDecimal.ToString*
  nameWithType.vb: BigDecimal.ToString(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToString(System.Nullable(Of IFormatProvider))
  name.vb: ToString(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToDateTime(System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToDateTime(System.Nullable{IFormatProvider})
  id: ToDateTime(System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToDateTime(Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToDateTime(Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToDateTime(System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToDateTime
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 736
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public DateTime ToDateTime(IFormatProvider? provider)
    parameters:
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: DateTime
    content.vb: Public Function ToDateTime(provider As IFormatProvider?) As DateTime
  overload: Galaxon.Numerics.BigDecimal.ToDateTime*
  nameWithType.vb: BigDecimal.ToDateTime(Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToDateTime(System.Nullable(Of IFormatProvider))
  name.vb: ToDateTime(Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToType(Type,System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToType(Type,System.Nullable{IFormatProvider})
  id: ToType(Type,System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToType(Type, Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToType(Type, Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToType(Type, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalConvert.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToType
    path: ../BigDecimal/BigDecimal/BigDecimalConvert.cs
    startLine: 740
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public object ToType(Type conversionType, IFormatProvider? provider)
    parameters:
    - id: conversionType
      type: Type
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Object
    content.vb: Public Function ToType(conversionType As Type, provider As IFormatProvider?) As Object
  overload: Galaxon.Numerics.BigDecimal.ToType*
  nameWithType.vb: BigDecimal.ToType(Type, Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToType(Type, System.Nullable(Of IFormatProvider))
  name.vb: ToType(Type, Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.#ctor(BigInteger,System.Int32,System.Boolean)
  commentId: M:Galaxon.Numerics.BigDecimal.#ctor(BigInteger,System.Int32,System.Boolean)
  id: '#ctor(BigInteger,System.Int32,System.Boolean)'
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: BigDecimal(BigInteger, Int32, Boolean)
  nameWithType: BigDecimal.BigDecimal(BigInteger, Int32, Boolean)
  fullName: Galaxon.Numerics.BigDecimal.BigDecimal(BigInteger, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: .ctor
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 16
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nMain constructor.\n"
  example: []
  syntax:
    content: public BigDecimal(BigInteger significand, int exponent = 0, bool roundSigFigs = false)
    parameters:
    - id: significand
      type: BigInteger
      description: The significand or mantissa.
    - id: exponent
      type: System.Int32
      description: The exponent.
    - id: roundSigFigs
      type: System.Boolean
      description: >-
        If the value should be rounded off to the current value of

        MaxSigFigs.
    content.vb: Public Sub New(significand As BigInteger, exponent As Integer = 0, roundSigFigs As Boolean = False)
  overload: Galaxon.Numerics.BigDecimal.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.#ctor
  commentId: M:Galaxon.Numerics.BigDecimal.#ctor
  id: '#ctor'
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: BigDecimal()
  nameWithType: BigDecimal.BigDecimal()
  fullName: Galaxon.Numerics.BigDecimal.BigDecimal()
  type: Constructor
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: .ctor
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 35
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nDefault constructor.\n"
  example: []
  syntax:
    content: public BigDecimal()
    content.vb: Public Sub New
  overload: Galaxon.Numerics.BigDecimal.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.Significand
  commentId: P:Galaxon.Numerics.BigDecimal.Significand
  id: Significand
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Significand
  nameWithType: BigDecimal.Significand
  fullName: Galaxon.Numerics.BigDecimal.Significand
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Significand
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 48
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nThe part of a number in scientific notation or in floating-point representation, consisting\nof its significant digits.\n"
  example: []
  syntax:
    content: public BigInteger Significand { get; set; }
    parameters: []
    return:
      type: BigInteger
    content.vb: Public Property Significand As BigInteger
  overload: Galaxon.Numerics.BigDecimal.Significand*
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Significand
    altText: 'Wikipedia: Significand'
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.Exponent
  commentId: P:Galaxon.Numerics.BigDecimal.Exponent
  id: Exponent
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Exponent
  nameWithType: BigDecimal.Exponent
  fullName: Galaxon.Numerics.BigDecimal.Exponent
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Exponent
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 51
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: The power of 10.
  example: []
  syntax:
    content: public int Exponent { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Exponent As Integer
  overload: Galaxon.Numerics.BigDecimal.Exponent*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.Sign
  commentId: P:Galaxon.Numerics.BigDecimal.Sign
  id: Sign
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Sign
  nameWithType: BigDecimal.Sign
  fullName: Galaxon.Numerics.BigDecimal.Sign
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Sign
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 62
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nThe sign of the value. The same convention is used as for BigInteger except sbyte is used\ninstead of an int.\n-1 for negative\n0 for zero\n1 for positive\n"
  example: []
  syntax:
    content: public readonly sbyte Sign { get; }
    parameters: []
    return:
      type: System.SByte
    content.vb: Public ReadOnly Property Sign As SByte
  overload: Galaxon.Numerics.BigDecimal.Sign*
  see:
  - linkType: HRef
    linkId: https://learn.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.sign?view=net-7.0
    altText: https://learn.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.sign?view=net-7.0
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.NumSigFigs
  commentId: P:Galaxon.Numerics.BigDecimal.NumSigFigs
  id: NumSigFigs
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: NumSigFigs
  nameWithType: BigDecimal.NumSigFigs
  fullName: Galaxon.Numerics.BigDecimal.NumSigFigs
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: NumSigFigs
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 67
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nGet the number of significant figures.\n"
  example: []
  syntax:
    content: public readonly int NumSigFigs { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumSigFigs As Integer
  overload: Galaxon.Numerics.BigDecimal.NumSigFigs*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.MaxSigFigs
  commentId: P:Galaxon.Numerics.BigDecimal.MaxSigFigs
  id: MaxSigFigs
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: MaxSigFigs
  nameWithType: BigDecimal.MaxSigFigs
  fullName: Galaxon.Numerics.BigDecimal.MaxSigFigs
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: MaxSigFigs
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 86
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nThis property determines the maximum number of significant figures to keep in a BigDecimal\nvalue.\n\nAfter any calculation, the result will be rounded to this many significant figures.\nThis not only helps control memory usage by controlling the size of the significand, but\nalso determines when to halt numerical methods, e.g. for calculating a square root or\nlogarithm.\n\nIf this property is modified, only new objects and calculations are affected by it.\nIf you want to reduce the number of significant figures in an existing value, use\nRoundSigFigs().\n"
  example: []
  syntax:
    content: public static int MaxSigFigs { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared Property MaxSigFigs As Integer
  overload: Galaxon.Numerics.BigDecimal.MaxSigFigs*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Zero
  commentId: P:Galaxon.Numerics.BigDecimal.Zero
  id: Zero
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: BigDecimal.Zero
  fullName: Galaxon.Numerics.BigDecimal.Zero
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Zero
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 106
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal Zero { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property Zero As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Zero*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.One
  commentId: P:Galaxon.Numerics.BigDecimal.One
  id: One
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: One
  nameWithType: BigDecimal.One
  fullName: Galaxon.Numerics.BigDecimal.One
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: One
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 109
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal One { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property One As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.One*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.NegativeOne
  commentId: P:Galaxon.Numerics.BigDecimal.NegativeOne
  id: NegativeOne
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: NegativeOne
  nameWithType: BigDecimal.NegativeOne
  fullName: Galaxon.Numerics.BigDecimal.NegativeOne
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: NegativeOne
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 112
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal NegativeOne { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property NegativeOne As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.NegativeOne*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.Radix
  commentId: P:Galaxon.Numerics.BigDecimal.Radix
  id: Radix
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Radix
  nameWithType: BigDecimal.Radix
  fullName: Galaxon.Numerics.BigDecimal.Radix
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Radix
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 115
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly int Radix { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Radix As Integer
  overload: Galaxon.Numerics.BigDecimal.Radix*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.AdditiveIdentity
  commentId: P:Galaxon.Numerics.BigDecimal.AdditiveIdentity
  id: AdditiveIdentity
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: AdditiveIdentity
  nameWithType: BigDecimal.AdditiveIdentity
  fullName: Galaxon.Numerics.BigDecimal.AdditiveIdentity
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: AdditiveIdentity
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 118
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal AdditiveIdentity { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property AdditiveIdentity As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.AdditiveIdentity*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.MultiplicativeIdentity
  commentId: P:Galaxon.Numerics.BigDecimal.MultiplicativeIdentity
  id: MultiplicativeIdentity
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: MultiplicativeIdentity
  nameWithType: BigDecimal.MultiplicativeIdentity
  fullName: Galaxon.Numerics.BigDecimal.MultiplicativeIdentity
  type: Property
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: MultiplicativeIdentity
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 121
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static readonly BigDecimal MultiplicativeIdentity { get; }
    parameters: []
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared ReadOnly Property MultiplicativeIdentity As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.MultiplicativeIdentity*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Numerics.BigDecimal.HalfPrecision
  commentId: F:Galaxon.Numerics.BigDecimal.HalfPrecision
  id: HalfPrecision
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: HalfPrecision
  nameWithType: BigDecimal.HalfPrecision
  fullName: Galaxon.Numerics.BigDecimal.HalfPrecision
  type: Field
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: HalfPrecision
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 125
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: Precision supported by the Half type.
  example: []
  syntax:
    content: public const int HalfPrecision = null
    return:
      type: System.Int32
    content.vb: Public Const HalfPrecision As Integer = Nothing
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/IEEE_754#Character_representation
    altText: https://en.wikipedia.org/wiki/IEEE_754#Character_representation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Numerics.BigDecimal.FloatPrecision
  commentId: F:Galaxon.Numerics.BigDecimal.FloatPrecision
  id: FloatPrecision
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: FloatPrecision
  nameWithType: BigDecimal.FloatPrecision
  fullName: Galaxon.Numerics.BigDecimal.FloatPrecision
  type: Field
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: FloatPrecision
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 129
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: Precision supported by the float type.
  example: []
  syntax:
    content: public const int FloatPrecision = null
    return:
      type: System.Int32
    content.vb: Public Const FloatPrecision As Integer = Nothing
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/IEEE_754#Character_representation
    altText: https://en.wikipedia.org/wiki/IEEE_754#Character_representation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Numerics.BigDecimal.DoublePrecision
  commentId: F:Galaxon.Numerics.BigDecimal.DoublePrecision
  id: DoublePrecision
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: DoublePrecision
  nameWithType: BigDecimal.DoublePrecision
  fullName: Galaxon.Numerics.BigDecimal.DoublePrecision
  type: Field
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: DoublePrecision
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 133
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: Precision supported by the double type.
  example: []
  syntax:
    content: public const int DoublePrecision = null
    return:
      type: System.Int32
    content.vb: Public Const DoublePrecision As Integer = Nothing
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/IEEE_754#Character_representation
    altText: https://en.wikipedia.org/wiki/IEEE_754#Character_representation
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Numerics.BigDecimal.DecimalPrecision
  commentId: F:Galaxon.Numerics.BigDecimal.DecimalPrecision
  id: DecimalPrecision
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: DecimalPrecision
  nameWithType: BigDecimal.DecimalPrecision
  fullName: Galaxon.Numerics.BigDecimal.DecimalPrecision
  type: Field
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: DecimalPrecision
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 136
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: Precision supported by the decimal type.
  example: []
  syntax:
    content: public const int DecimalPrecision = null
    return:
      type: System.Int32
    content.vb: Public Const DecimalPrecision As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Numerics.BigDecimal.IsCanonical(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsCanonical(Galaxon.Numerics.BigDecimal)
  id: IsCanonical(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsCanonical(BigDecimal)
  nameWithType: BigDecimal.IsCanonical(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsCanonical(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsCanonical
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 147
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nChecks if the value is in its canonical state.\nIn this case, the value should not be evenly divisible by 10. In canonical form, a\nmultiple of 10 should be shortened and the exponent increased.\n"
  example: []
  syntax:
    content: public static bool IsCanonical(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsCanonical(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsCanonical*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsComplexNumber(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsComplexNumber(Galaxon.Numerics.BigDecimal)
  id: IsComplexNumber(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsComplexNumber(BigDecimal)
  nameWithType: BigDecimal.IsComplexNumber(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsComplexNumber(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsComplexNumber
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 153
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCheck if the value is a complex number.\n"
  example: []
  syntax:
    content: public static bool IsComplexNumber(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsComplexNumber(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsComplexNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsInteger(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsInteger(Galaxon.Numerics.BigDecimal)
  id: IsInteger(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsInteger(BigDecimal)
  nameWithType: BigDecimal.IsInteger(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsInteger(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsInteger
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 161
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nThe value will be an integer if in canonical form and the exponent is >= 0.\n"
  example: []
  syntax:
    content: public static bool IsInteger(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsInteger(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsOddInteger(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsOddInteger(Galaxon.Numerics.BigDecimal)
  id: IsOddInteger(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsOddInteger(BigDecimal)
  nameWithType: BigDecimal.IsOddInteger(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsOddInteger(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsOddInteger
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 165
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsOddInteger(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsOddInteger(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsOddInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsEvenInteger(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsEvenInteger(Galaxon.Numerics.BigDecimal)
  id: IsEvenInteger(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsEvenInteger(BigDecimal)
  nameWithType: BigDecimal.IsEvenInteger(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsEvenInteger(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsEvenInteger
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 169
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsEvenInteger(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsEvenInteger(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsEvenInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsZero(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsZero(Galaxon.Numerics.BigDecimal)
  id: IsZero(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsZero(BigDecimal)
  nameWithType: BigDecimal.IsZero(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsZero(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsZero
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 173
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsZero(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsZero(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsZero*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsNegative(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsNegative(Galaxon.Numerics.BigDecimal)
  id: IsNegative(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsNegative(BigDecimal)
  nameWithType: BigDecimal.IsNegative(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsNegative(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsNegative
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 177
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsNegative(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNegative(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsNegative*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsPositive(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsPositive(Galaxon.Numerics.BigDecimal)
  id: IsPositive(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsPositive(BigDecimal)
  nameWithType: BigDecimal.IsPositive(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsPositive(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsPositive
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 181
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsPositive(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsPositive(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsPositive*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsFinite(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsFinite(Galaxon.Numerics.BigDecimal)
  id: IsFinite(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsFinite(BigDecimal)
  nameWithType: BigDecimal.IsFinite(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsFinite(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsFinite
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 185
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsFinite(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFinite(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsFinite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsInfinity(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsInfinity(Galaxon.Numerics.BigDecimal)
  id: IsInfinity(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsInfinity(BigDecimal)
  nameWithType: BigDecimal.IsInfinity(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsInfinity(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsInfinity
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 189
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsInfinity(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsInfinity(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsInfinity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsNegativeInfinity(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsNegativeInfinity(Galaxon.Numerics.BigDecimal)
  id: IsNegativeInfinity(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsNegativeInfinity(BigDecimal)
  nameWithType: BigDecimal.IsNegativeInfinity(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsNegativeInfinity(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsNegativeInfinity
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 193
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsNegativeInfinity(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNegativeInfinity(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsNegativeInfinity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsPositiveInfinity(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsPositiveInfinity(Galaxon.Numerics.BigDecimal)
  id: IsPositiveInfinity(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsPositiveInfinity(BigDecimal)
  nameWithType: BigDecimal.IsPositiveInfinity(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsPositiveInfinity(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsPositiveInfinity
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 197
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsPositiveInfinity(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsPositiveInfinity(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsPositiveInfinity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsRealNumber(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsRealNumber(Galaxon.Numerics.BigDecimal)
  id: IsRealNumber(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsRealNumber(BigDecimal)
  nameWithType: BigDecimal.IsRealNumber(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsRealNumber(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsRealNumber
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 201
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsRealNumber(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsRealNumber(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsRealNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsImaginaryNumber(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsImaginaryNumber(Galaxon.Numerics.BigDecimal)
  id: IsImaginaryNumber(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsImaginaryNumber(BigDecimal)
  nameWithType: BigDecimal.IsImaginaryNumber(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsImaginaryNumber(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsImaginaryNumber
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 205
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsImaginaryNumber(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsImaginaryNumber(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsImaginaryNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsNormal(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsNormal(Galaxon.Numerics.BigDecimal)
  id: IsNormal(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsNormal(BigDecimal)
  nameWithType: BigDecimal.IsNormal(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsNormal(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsNormal
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 209
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsNormal(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNormal(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsSubnormal(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsSubnormal(Galaxon.Numerics.BigDecimal)
  id: IsSubnormal(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsSubnormal(BigDecimal)
  nameWithType: BigDecimal.IsSubnormal(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsSubnormal(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsSubnormal
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 213
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsSubnormal(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsSubnormal(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsSubnormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.IsNaN(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.IsNaN(Galaxon.Numerics.BigDecimal)
  id: IsNaN(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: IsNaN(BigDecimal)
  nameWithType: BigDecimal.IsNaN(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.IsNaN(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: IsNaN
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 217
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool IsNaN(BigDecimal value)
    parameters:
    - id: value
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNaN(value As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.IsNaN*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.GetSignificandByteCount
  commentId: M:Galaxon.Numerics.BigDecimal.GetSignificandByteCount
  id: GetSignificandByteCount
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GetSignificandByteCount()
  nameWithType: BigDecimal.GetSignificandByteCount()
  fullName: Galaxon.Numerics.BigDecimal.GetSignificandByteCount()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: GetSignificandByteCount
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 225
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public int GetSignificandByteCount()
    return:
      type: System.Int32
    content.vb: Public Function GetSignificandByteCount As Integer
  overload: Galaxon.Numerics.BigDecimal.GetSignificandByteCount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.GetSignificandBitLength
  commentId: M:Galaxon.Numerics.BigDecimal.GetSignificandBitLength
  id: GetSignificandBitLength
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GetSignificandBitLength()
  nameWithType: BigDecimal.GetSignificandBitLength()
  fullName: Galaxon.Numerics.BigDecimal.GetSignificandBitLength()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: GetSignificandBitLength
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 229
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public int GetSignificandBitLength()
    return:
      type: System.Int32
    content.vb: Public Function GetSignificandBitLength As Integer
  overload: Galaxon.Numerics.BigDecimal.GetSignificandBitLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.GetExponentByteCount
  commentId: M:Galaxon.Numerics.BigDecimal.GetExponentByteCount
  id: GetExponentByteCount
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GetExponentByteCount()
  nameWithType: BigDecimal.GetExponentByteCount()
  fullName: Galaxon.Numerics.BigDecimal.GetExponentByteCount()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: GetExponentByteCount
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 233
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public int GetExponentByteCount()
    return:
      type: System.Int32
    content.vb: Public Function GetExponentByteCount As Integer
  overload: Galaxon.Numerics.BigDecimal.GetExponentByteCount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength
  commentId: M:Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength
  id: GetExponentShortestBitLength
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GetExponentShortestBitLength()
  nameWithType: BigDecimal.GetExponentShortestBitLength()
  fullName: Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: GetExponentShortestBitLength
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 237
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public int GetExponentShortestBitLength()
    return:
      type: System.Int32
    content.vb: Public Function GetExponentShortestBitLength As Integer
  overload: Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian(Span{System.Byte},System.Int32@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian(Span{System.Byte},System.Int32@)
  id: TryWriteSignificandBigEndian(Span{System.Byte},System.Int32@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryWriteSignificandBigEndian(Span<Byte>, out Int32)
  nameWithType: BigDecimal.TryWriteSignificandBigEndian(Span<Byte>, out Int32)
  fullName: Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian(Span<System.Byte>, out System.Int32)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryWriteSignificandBigEndian
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 241
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public bool TryWriteSignificandBigEndian(Span<byte> destination, out int bytesWritten)
    parameters:
    - id: destination
      type: Span{System.Byte}
    - id: bytesWritten
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function TryWriteSignificandBigEndian(destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian*
  nameWithType.vb: BigDecimal.TryWriteSignificandBigEndian(Span(Of Byte), ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian(Span(Of System.Byte), ByRef System.Int32)
  name.vb: TryWriteSignificandBigEndian(Span(Of Byte), ByRef Int32)
- uid: Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian(Span{System.Byte},System.Int32@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian(Span{System.Byte},System.Int32@)
  id: TryWriteSignificandLittleEndian(Span{System.Byte},System.Int32@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryWriteSignificandLittleEndian(Span<Byte>, out Int32)
  nameWithType: BigDecimal.TryWriteSignificandLittleEndian(Span<Byte>, out Int32)
  fullName: Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian(Span<System.Byte>, out System.Int32)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryWriteSignificandLittleEndian
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 245
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public bool TryWriteSignificandLittleEndian(Span<byte> destination, out int bytesWritten)
    parameters:
    - id: destination
      type: Span{System.Byte}
    - id: bytesWritten
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function TryWriteSignificandLittleEndian(destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian*
  nameWithType.vb: BigDecimal.TryWriteSignificandLittleEndian(Span(Of Byte), ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian(Span(Of System.Byte), ByRef System.Int32)
  name.vb: TryWriteSignificandLittleEndian(Span(Of Byte), ByRef Int32)
- uid: Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian(Span{System.Byte},System.Int32@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian(Span{System.Byte},System.Int32@)
  id: TryWriteExponentBigEndian(Span{System.Byte},System.Int32@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryWriteExponentBigEndian(Span<Byte>, out Int32)
  nameWithType: BigDecimal.TryWriteExponentBigEndian(Span<Byte>, out Int32)
  fullName: Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian(Span<System.Byte>, out System.Int32)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryWriteExponentBigEndian
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 249
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public bool TryWriteExponentBigEndian(Span<byte> destination, out int bytesWritten)
    parameters:
    - id: destination
      type: Span{System.Byte}
    - id: bytesWritten
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function TryWriteExponentBigEndian(destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian*
  nameWithType.vb: BigDecimal.TryWriteExponentBigEndian(Span(Of Byte), ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian(Span(Of System.Byte), ByRef System.Int32)
  name.vb: TryWriteExponentBigEndian(Span(Of Byte), ByRef Int32)
- uid: Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian(Span{System.Byte},System.Int32@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian(Span{System.Byte},System.Int32@)
  id: TryWriteExponentLittleEndian(Span{System.Byte},System.Int32@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryWriteExponentLittleEndian(Span<Byte>, out Int32)
  nameWithType: BigDecimal.TryWriteExponentLittleEndian(Span<Byte>, out Int32)
  fullName: Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian(Span<System.Byte>, out System.Int32)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalCore.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryWriteExponentLittleEndian
    path: ../BigDecimal/BigDecimal/BigDecimalCore.cs
    startLine: 253
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public bool TryWriteExponentLittleEndian(Span<byte> destination, out int bytesWritten)
    parameters:
    - id: destination
      type: Span{System.Byte}
    - id: bytesWritten
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function TryWriteExponentLittleEndian(destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian*
  nameWithType.vb: BigDecimal.TryWriteExponentLittleEndian(Span(Of Byte), ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian(Span(Of System.Byte), ByRef System.Int32)
  name.vb: TryWriteExponentLittleEndian(Span(Of Byte), ByRef Int32)
- uid: Galaxon.Numerics.BigDecimal.Pow(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Pow(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: Pow(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Pow(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Pow(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Pow(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Pow
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 23
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCalculate the value of x^y where x and y are both BigDecimal values.\n"
  example: []
  syntax:
    content: public static BigDecimal Pow(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
      description: The base.
    - id: y
      type: Galaxon.Numerics.BigDecimal
      description: The exponent.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: >-
        The result of the calculation, rounded off to the current value of

        MaxSigFigs.
    content.vb: Public Shared Function Pow(x As BigDecimal, y As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Pow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Sqr(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Sqr(Galaxon.Numerics.BigDecimal)
  id: Sqr(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Sqr(BigDecimal)
  nameWithType: BigDecimal.Sqr(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Sqr(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Sqr
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 99
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCalculate the square of a number.\n"
  example: []
  syntax:
    content: public static BigDecimal Sqr(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
      description: A real value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The square of the argument.
    content.vb: Public Shared Function Sqr(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Cube(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Cube(Galaxon.Numerics.BigDecimal)
  id: Cube(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Cube(BigDecimal)
  nameWithType: BigDecimal.Cube(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Cube(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Cube
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 107
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCalculate the cube of a number.\n"
  example: []
  syntax:
    content: public static BigDecimal Cube(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
      description: A real value.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The cube of the argument.
    content.vb: Public Shared Function Cube(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.RootN(Galaxon.Numerics.BigDecimal,System.Int32)
  commentId: M:Galaxon.Numerics.BigDecimal.RootN(Galaxon.Numerics.BigDecimal,System.Int32)
  id: RootN(Galaxon.Numerics.BigDecimal,System.Int32)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: RootN(BigDecimal, Int32)
  nameWithType: BigDecimal.RootN(BigDecimal, Int32)
  fullName: Galaxon.Numerics.BigDecimal.RootN(Galaxon.Numerics.BigDecimal, System.Int32)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: RootN
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 115
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal RootN(BigDecimal x, int n)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: n
      type: System.Int32
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function RootN(x As BigDecimal, n As Integer) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.RootN*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Sqrt(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Sqrt(Galaxon.Numerics.BigDecimal)
  id: Sqrt(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Sqrt(BigDecimal)
  nameWithType: BigDecimal.Sqrt(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Sqrt(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Sqrt
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 235
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCalculate the square root of a real number.\n"
  example: []
  syntax:
    content: public static BigDecimal Sqrt(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
      description: The number.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The square root of the number.
    content.vb: Public Shared Function Sqrt(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Cbrt(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Cbrt(Galaxon.Numerics.BigDecimal)
  id: Cbrt(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Cbrt(BigDecimal)
  nameWithType: BigDecimal.Cbrt(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Cbrt(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Cbrt
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 243
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCalculate the cube root of a real number.\n"
  example: []
  syntax:
    content: public static BigDecimal Cbrt(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
      description: The number.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The cube root of the number.
    content.vb: Public Shared Function Cbrt(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Cbrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Hypot(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Hypot(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: Hypot(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Hypot(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Hypot(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Hypot(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Hypot
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 252
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCalculate the length of the hypotenuse of a right triangle.\n"
  example: []
  syntax:
    content: public static BigDecimal Hypot(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
      description: The length of one of the short sides of the triangle.
    - id: y
      type: Galaxon.Numerics.BigDecimal
      description: The length of the other short side of the triangle.
    return:
      type: Galaxon.Numerics.BigDecimal
      description: The length of the hypotenuse.
    content.vb: Public Shared Function Hypot(x As BigDecimal, y As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Hypot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Exp(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Exp(Galaxon.Numerics.BigDecimal)
  id: Exp(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Exp(BigDecimal)
  nameWithType: BigDecimal.Exp(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Exp(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Exp
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 260
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Exp(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Exp(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Exp2(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Exp2(Galaxon.Numerics.BigDecimal)
  id: Exp2(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Exp2(BigDecimal)
  nameWithType: BigDecimal.Exp2(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Exp2(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Exp2
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 312
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Exp2(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Exp2(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Exp2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Exp10(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Exp10(Galaxon.Numerics.BigDecimal)
  id: Exp10(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Exp10(BigDecimal)
  nameWithType: BigDecimal.Exp10(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Exp10(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Exp10
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 316
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Exp10(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Exp10(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Exp10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal)
  id: Log(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Log(BigDecimal)
  nameWithType: BigDecimal.Log(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Log
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 324
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Log(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Log(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: Log(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Log(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Log(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Log(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Log
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 411
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Log(BigDecimal x, BigDecimal b)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: b
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Log(x As BigDecimal, b As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Log2(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Log2(Galaxon.Numerics.BigDecimal)
  id: Log2(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Log2(BigDecimal)
  nameWithType: BigDecimal.Log2(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Log2(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Log2
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 430
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Log2(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Log2(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Log2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Log10(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Log10(Galaxon.Numerics.BigDecimal)
  id: Log10(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Log10(BigDecimal)
  nameWithType: BigDecimal.Log10(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Log10(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalExpLog.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Log10
    path: ../BigDecimal/BigDecimal/BigDecimalExpLog.cs
    startLine: 434
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Log10(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Log10(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Clone
  commentId: M:Galaxon.Numerics.BigDecimal.Clone
  id: Clone
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: BigDecimal.Clone()
  fullName: Galaxon.Numerics.BigDecimal.Clone()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Clone
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 10
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public object Clone()
    return:
      type: System.Object
    content.vb: Public Function Clone As Object
  overload: Galaxon.Numerics.BigDecimal.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Galaxon.Numerics.BigDecimal.Abs(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Abs(Galaxon.Numerics.BigDecimal)
  id: Abs(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Abs(BigDecimal)
  nameWithType: BigDecimal.Abs(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Abs(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Abs
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 14
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Abs(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Abs(bd As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal,System.Int32,MidpointRounding)
  commentId: M:Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal,System.Int32,MidpointRounding)
  id: Round(Galaxon.Numerics.BigDecimal,System.Int32,MidpointRounding)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Round(BigDecimal, Int32, MidpointRounding)
  nameWithType: BigDecimal.Round(BigDecimal, Int32, MidpointRounding)
  fullName: Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal, System.Int32, MidpointRounding)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Round
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 18
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Round(BigDecimal x, int digits = 0, MidpointRounding mode = null)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: digits
      type: System.Int32
    - id: mode
      type: MidpointRounding
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Round(x As BigDecimal, digits As Integer = 0, mode As MidpointRounding = Nothing) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal,MidpointRounding)
  commentId: M:Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal,MidpointRounding)
  id: Round(Galaxon.Numerics.BigDecimal,MidpointRounding)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Round(BigDecimal, MidpointRounding)
  nameWithType: BigDecimal.Round(BigDecimal, MidpointRounding)
  fullName: Galaxon.Numerics.BigDecimal.Round(Galaxon.Numerics.BigDecimal, MidpointRounding)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Round
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 48
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: "\nThis method should not need to be implemented because it&apos;s a static virtual method and the\ndefault implementation is what we want. However, static virtual methods are not yet\nsupported by Rider so we need this here for now.\n"
  example: []
  syntax:
    content: public static BigDecimal Round(BigDecimal x, MidpointRounding mode)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: mode
      type: MidpointRounding
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Round(x As BigDecimal, mode As MidpointRounding) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.RoundSigFigs(Galaxon.Numerics.BigDecimal,System.Nullable{System.Int32},MidpointRounding)
  commentId: M:Galaxon.Numerics.BigDecimal.RoundSigFigs(Galaxon.Numerics.BigDecimal,System.Nullable{System.Int32},MidpointRounding)
  id: RoundSigFigs(Galaxon.Numerics.BigDecimal,System.Nullable{System.Int32},MidpointRounding)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: RoundSigFigs(BigDecimal, Nullable<Int32>, MidpointRounding)
  nameWithType: BigDecimal.RoundSigFigs(BigDecimal, Nullable<Int32>, MidpointRounding)
  fullName: Galaxon.Numerics.BigDecimal.RoundSigFigs(Galaxon.Numerics.BigDecimal, System.Nullable<System.Int32>, MidpointRounding)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: RoundSigFigs
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 54
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nRound off a value to a certain number of significant figures.\n"
  example: []
  syntax:
    content: public static BigDecimal RoundSigFigs(BigDecimal x, int? maxSigFigs = null, MidpointRounding mode = null)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: maxSigFigs
      type: System.Nullable{System.Int32}
    - id: mode
      type: MidpointRounding
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function RoundSigFigs(x As BigDecimal, maxSigFigs As Integer? = Nothing, mode As MidpointRounding = Nothing) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.RoundSigFigs*
  nameWithType.vb: BigDecimal.RoundSigFigs(BigDecimal, Nullable(Of Int32), MidpointRounding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.RoundSigFigs(Galaxon.Numerics.BigDecimal, System.Nullable(Of System.Int32), MidpointRounding)
  name.vb: RoundSigFigs(BigDecimal, Nullable(Of Int32), MidpointRounding)
- uid: Galaxon.Numerics.BigDecimal.Truncate(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Truncate(Galaxon.Numerics.BigDecimal)
  id: Truncate(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Truncate(BigDecimal)
  nameWithType: BigDecimal.Truncate(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Truncate(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Truncate
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 69
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: "\nThis method should not need to be implemented because it&apos;s a static virtual method and the\ndefault implementation is what we want. However, static virtual methods are not yet\nsupported by Rider so we need this here for now.\n"
  example: []
  syntax:
    content: public static BigDecimal Truncate(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Truncate(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Frac(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Frac(Galaxon.Numerics.BigDecimal)
  id: Frac(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Frac(BigDecimal)
  nameWithType: BigDecimal.Frac(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Frac(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Frac
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 88
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nReturn the fractional part of the value.\n\nThere are multiple ways to define the frac() function for negative numbers.\n(Refer to the Wikipedia link below.)\nThe definition used in this implementation simply takes the digits to the right of the\ndecimal point, with the sign matching the argument.\n\ne.g.\nFrac(12.345) => 0.345\nFrac(-12.345) => -0.345\n\nThe following expression will be true for both positive and negative numbers:\nx == Truncate(x) + Frac(x)\n"
  example: []
  syntax:
    content: public static BigDecimal Frac(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Frac(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Frac*
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Fractional_part
    altText: https://en.wikipedia.org/wiki/Fractional_part
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Floor(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Floor(Galaxon.Numerics.BigDecimal)
  id: Floor(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Floor(BigDecimal)
  nameWithType: BigDecimal.Floor(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Floor(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Floor
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 97
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: "\nThis method should not need to be implemented because it&apos;s a static virtual method and the\ndefault implementation is what we want. However, static virtual methods are not yet\nsupported by Rider so we need this here for now.\n"
  example: []
  syntax:
    content: public static BigDecimal Floor(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Floor(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Ceiling(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Ceiling(Galaxon.Numerics.BigDecimal)
  id: Ceiling(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Ceiling(BigDecimal)
  nameWithType: BigDecimal.Ceiling(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Ceiling(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Ceiling
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 106
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: "\nThis method should not need to be implemented because it&apos;s a static virtual method and the\ndefault implementation is what we want. However, static virtual methods are not yet\nsupported by Rider so we need this here for now.\n"
  example: []
  syntax:
    content: public static BigDecimal Ceiling(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Ceiling(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_UnaryPlus(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_UnaryPlus(Galaxon.Numerics.BigDecimal)
  id: op_UnaryPlus(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: UnaryPlus(BigDecimal)
  nameWithType: BigDecimal.UnaryPlus(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.UnaryPlus(Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_UnaryPlus
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 283
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator +(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Operator +(bd As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_UnaryPlus*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Addition(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Addition(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_Addition(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Addition(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Addition(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Addition(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Addition
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 287
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator +(BigDecimal a, BigDecimal b)
    parameters:
    - id: a
      type: Galaxon.Numerics.BigDecimal
    - id: b
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Operator +(a As BigDecimal, b As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Increment(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Increment(Galaxon.Numerics.BigDecimal)
  id: op_Increment(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Increment(BigDecimal)
  nameWithType: BigDecimal.Increment(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Increment(Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Increment
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 294
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator ++(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: VB cannot support this operator.
  overload: Galaxon.Numerics.BigDecimal.op_Increment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_UnaryNegation(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_UnaryNegation(Galaxon.Numerics.BigDecimal)
  id: op_UnaryNegation(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: UnaryNegation(BigDecimal)
  nameWithType: BigDecimal.UnaryNegation(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.UnaryNegation(Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_UnaryNegation
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 298
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator -(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Operator -(bd As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Subtraction(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Subtraction(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_Subtraction(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Subtraction(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Subtraction(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Subtraction(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Subtraction
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 302
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator -(BigDecimal a, BigDecimal b)
    parameters:
    - id: a
      type: Galaxon.Numerics.BigDecimal
    - id: b
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Operator -(a As BigDecimal, b As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Decrement(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Decrement(Galaxon.Numerics.BigDecimal)
  id: op_Decrement(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Decrement(BigDecimal)
  nameWithType: BigDecimal.Decrement(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Decrement(Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Decrement
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 309
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator --(BigDecimal bd)
    parameters:
    - id: bd
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: VB cannot support this operator.
  overload: Galaxon.Numerics.BigDecimal.op_Decrement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Multiply(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Multiply(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_Multiply(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Multiply(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Multiply(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Multiply(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Multiply
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 313
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator *(BigDecimal a, BigDecimal b)
    parameters:
    - id: a
      type: Galaxon.Numerics.BigDecimal
    - id: b
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Operator *(a As BigDecimal, b As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Division(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Division(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_Division(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Division(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Division(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Division(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Division
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 321
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: "\nComputes division using the Goldschmidt algorithm.\n<a href=\"https://en.wikipedia.org/wiki/Division_algorithm#Goldschmidt_division\">https://en.wikipedia.org/wiki/Division_algorithm#Goldschmidt_division</a>\n"
  example: []
  syntax:
    content: public static BigDecimal operator /(BigDecimal a, BigDecimal b)
    parameters:
    - id: a
      type: Galaxon.Numerics.BigDecimal
    - id: b
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Operator /(a As BigDecimal, b As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.op_Modulus(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.op_Modulus(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: op_Modulus(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Modulus(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.Modulus(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Modulus(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Operator
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: op_Modulus
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 384
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal operator %(BigDecimal a, BigDecimal b)
    parameters:
    - id: a
      type: Galaxon.Numerics.BigDecimal
    - id: b
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Operator Mod(a As BigDecimal, b As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.op_Modulus*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Average(Galaxon.Numerics.BigDecimal[])
  commentId: M:Galaxon.Numerics.BigDecimal.Average(Galaxon.Numerics.BigDecimal[])
  id: Average(Galaxon.Numerics.BigDecimal[])
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Average(BigDecimal[])
  nameWithType: BigDecimal.Average(BigDecimal[])
  fullName: Galaxon.Numerics.BigDecimal.Average(Galaxon.Numerics.BigDecimal[])
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Average
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 395
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCompute the arithmetic mean (average) of the given values.\nIf you have a collection, you can use the extension method directly instead.\n"
  example: []
  syntax:
    content: public static BigDecimal Average(params BigDecimal[] nums)
    parameters:
    - id: nums
      type: Galaxon.Numerics.BigDecimal[]
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Average(ParamArray nums As BigDecimal()) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Average*
  nameWithType.vb: BigDecimal.Average(BigDecimal())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Average(Galaxon.Numerics.BigDecimal())
  name.vb: Average(BigDecimal())
- uid: Galaxon.Numerics.BigDecimal.GeometricMean(Galaxon.Numerics.BigDecimal[])
  commentId: M:Galaxon.Numerics.BigDecimal.GeometricMean(Galaxon.Numerics.BigDecimal[])
  id: GeometricMean(Galaxon.Numerics.BigDecimal[])
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: GeometricMean(BigDecimal[])
  nameWithType: BigDecimal.GeometricMean(BigDecimal[])
  fullName: Galaxon.Numerics.BigDecimal.GeometricMean(Galaxon.Numerics.BigDecimal[])
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: GeometricMean
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 402
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCompute the geometric mean of the given values.\nIf you have a collection, you can use the extension method directly instead.\n"
  example: []
  syntax:
    content: public static BigDecimal GeometricMean(params BigDecimal[] nums)
    parameters:
    - id: nums
      type: Galaxon.Numerics.BigDecimal[]
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function GeometricMean(ParamArray nums As BigDecimal()) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.GeometricMean*
  nameWithType.vb: BigDecimal.GeometricMean(BigDecimal())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.GeometricMean(Galaxon.Numerics.BigDecimal())
  name.vb: GeometricMean(BigDecimal())
- uid: Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  id: ArithmeticGeometricMean(Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ArithmeticGeometricMean(BigDecimal, BigDecimal)
  nameWithType: BigDecimal.ArithmeticGeometricMean(BigDecimal, BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean(Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalMath.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ArithmeticGeometricMean
    path: ../BigDecimal/BigDecimal/BigDecimalMath.cs
    startLine: 408
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nCompute the arithmetic-geometric mean of two values.\n"
  example: []
  syntax:
    content: public static BigDecimal ArithmeticGeometricMean(BigDecimal x, BigDecimal y)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    - id: y
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function ArithmeticGeometricMean(x As BigDecimal, y As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  id: ToString(System.Nullable{System.String},System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToString(Nullable<String>, Nullable<IFormatProvider>)
  nameWithType: BigDecimal.ToString(Nullable<String>, Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.ToString(System.Nullable<System.String>, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToString
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 36
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nFormat the BigDecimal as a string.\n\nSupported formats are the usual: D, E, F, G, N, P, and R.\n<a href=\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings\">https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</a>\n\nAlthough &quot;D&quot; is normally only used by integral types, in this case both the significand and\nexponent will be formatted as integers.\n\nAn secondary code &quot;U&quot; is provided, which follows the precision (if given).\n  - If omitted, the exponent (if present) will be formatted with the usual E[-+]999 format.\n  - If present, the exponent is formatted with &quot;×10&quot; instead of &quot;E&quot; and the exponent digits\n    will be rendered as superscript. Also, a &quot;+&quot; sign is not used for positive exponents,\n    and the exponent digits are not zero-padded.\n\nExample: &quot;E7U&quot; will format as per usual (E with 7 decimal digits), except using Unicode\ncharacters for the exponent part.\n\nCodes &quot;R&quot; and &quot;D&quot; will produce the same output. However, the Unicode flag is undefined with\n&quot;R&quot;, because Parse() doesn&apos;t support superscript exponents.\n"
  example: []
  syntax:
    content: public string ToString(string? specifier, IFormatProvider? provider = null)
    parameters:
    - id: specifier
      type: System.Nullable{System.String}
      description: The format specifier (default &quot;G&quot;).
    - id: provider
      type: System.Nullable{IFormatProvider}
      description: The format provider (default null).
    return:
      type: System.String
      description: The formatted string.
    content.vb: Public Function ToString(specifier As String?, provider As IFormatProvider? = Nothing) As String
  overload: Galaxon.Numerics.BigDecimal.ToString*
  nameWithType.vb: BigDecimal.ToString(Nullable(Of String), Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.ToString(System.Nullable(Of System.String), System.Nullable(Of IFormatProvider))
  name.vb: ToString(Nullable(Of String), Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.ToString
  commentId: M:Galaxon.Numerics.BigDecimal.ToString
  id: ToString
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BigDecimal.ToString()
  fullName: Galaxon.Numerics.BigDecimal.ToString()
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: ToString
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 120
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: "\nOverride of ValueType.ToString(). Needed for debugging and string interpolation.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: Galaxon.Numerics.BigDecimal.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Galaxon.Numerics.BigDecimal.TryFormat(Span{System.Char},System.Int32@,ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.TryFormat(Span{System.Char},System.Int32@,ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  id: TryFormat(Span{System.Char},System.Int32@,ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryFormat(Span<Char>, out Int32, ReadOnlySpan<Char>, Nullable<IFormatProvider>)
  nameWithType: BigDecimal.TryFormat(Span<Char>, out Int32, ReadOnlySpan<Char>, Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.TryFormat(Span<System.Char>, out System.Int32, ReadOnlySpan<System.Char>, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryFormat
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 124
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    parameters:
    - id: destination
      type: Span{System.Char}
    - id: charsWritten
      type: System.Int32
    - id: format
      type: ReadOnlySpan{System.Char}
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: System.Boolean
    content.vb: Public Function TryFormat(destination As Span(Of Char), ByRef charsWritten As Integer, format As ReadOnlySpan(Of Char), provider As IFormatProvider?) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryFormat*
  nameWithType.vb: BigDecimal.TryFormat(Span(Of Char), ByRef Int32, ReadOnlySpan(Of Char), Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Galaxon.Numerics.BigDecimal.TryFormat(Span(Of System.Char), ByRef System.Int32, ReadOnlySpan(Of System.Char), System.Nullable(Of IFormatProvider))
  name.vb: TryFormat(Span(Of Char), ByRef Int32, ReadOnlySpan(Of Char), Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.Parse(System.String,System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.Parse(System.String,System.Nullable{IFormatProvider})
  id: Parse(System.String,System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Parse(String, Nullable<IFormatProvider>)
  nameWithType: BigDecimal.Parse(String, Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.Parse(System.String, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Parse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 142
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Parse(string strBigDecimal, IFormatProvider? provider)
    parameters:
    - id: strBigDecimal
      type: System.String
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Parse(strBigDecimal As String, provider As IFormatProvider?) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Parse*
  nameWithType.vb: BigDecimal.Parse(String, Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Parse(System.String, System.Nullable(Of IFormatProvider))
  name.vb: Parse(String, Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.Parse(System.String)
  commentId: M:Galaxon.Numerics.BigDecimal.Parse(System.String)
  id: Parse(System.String)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: BigDecimal.Parse(String)
  fullName: Galaxon.Numerics.BigDecimal.Parse(System.String)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Parse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 181
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nMore convenient version of Parse().\n"
  example: []
  syntax:
    content: public static BigDecimal Parse(string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Parse(str As String) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Parse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Parse(System.String,NumberStyles,System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.Parse(System.String,NumberStyles,System.Nullable{IFormatProvider})
  id: Parse(System.String,NumberStyles,System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Parse(String, NumberStyles, Nullable<IFormatProvider>)
  nameWithType: BigDecimal.Parse(String, NumberStyles, Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.Parse(System.String, NumberStyles, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Parse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 186
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: Ignoring style parameter for now.
  example: []
  syntax:
    content: public static BigDecimal Parse(string str, NumberStyles style, IFormatProvider? provider)
    parameters:
    - id: str
      type: System.String
    - id: style
      type: NumberStyles
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Parse(str As String, style As NumberStyles, provider As IFormatProvider?) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Parse*
  nameWithType.vb: BigDecimal.Parse(String, NumberStyles, Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Parse(System.String, NumberStyles, System.Nullable(Of IFormatProvider))
  name.vb: Parse(String, NumberStyles, Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  id: Parse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Parse(ReadOnlySpan<Char>, Nullable<IFormatProvider>)
  nameWithType: BigDecimal.Parse(ReadOnlySpan<Char>, Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan<System.Char>, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Parse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 190
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Parse(ReadOnlySpan<char> span, IFormatProvider? provider)
    parameters:
    - id: span
      type: ReadOnlySpan{System.Char}
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Parse(span As ReadOnlySpan(Of Char), provider As IFormatProvider?) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Parse*
  nameWithType.vb: BigDecimal.Parse(ReadOnlySpan(Of Char), Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan(Of System.Char), System.Nullable(Of IFormatProvider))
  name.vb: Parse(ReadOnlySpan(Of Char), Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider})
  commentId: M:Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider})
  id: Parse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider})
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Parse(ReadOnlySpan<Char>, NumberStyles, Nullable<IFormatProvider>)
  nameWithType: BigDecimal.Parse(ReadOnlySpan<Char>, NumberStyles, Nullable<IFormatProvider>)
  fullName: Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan<System.Char>, NumberStyles, System.Nullable<IFormatProvider>)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Parse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 195
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: Ignoring style parameter for now.
  example: []
  syntax:
    content: public static BigDecimal Parse(ReadOnlySpan<char> span, NumberStyles style, IFormatProvider? provider)
    parameters:
    - id: span
      type: ReadOnlySpan{System.Char}
    - id: style
      type: NumberStyles
    - id: provider
      type: System.Nullable{IFormatProvider}
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Parse(span As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider?) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Parse*
  nameWithType.vb: BigDecimal.Parse(ReadOnlySpan(Of Char), NumberStyles, Nullable(Of IFormatProvider))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.Parse(ReadOnlySpan(Of System.Char), NumberStyles, System.Nullable(Of IFormatProvider))
  name.vb: Parse(ReadOnlySpan(Of Char), NumberStyles, Nullable(Of IFormatProvider))
- uid: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  id: TryParse(System.Nullable{System.String},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryParse(Nullable<String>, Nullable<IFormatProvider>, out BigDecimal)
  nameWithType: BigDecimal.TryParse(Nullable<String>, Nullable<IFormatProvider>, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable<System.String>, System.Nullable<IFormatProvider>, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryParse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 200
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool TryParse(string? str, IFormatProvider? provider, out BigDecimal result)
    parameters:
    - id: str
      type: System.Nullable{System.String}
    - id: provider
      type: System.Nullable{IFormatProvider}
    - id: result
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(str As String?, provider As IFormatProvider?, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryParse*
  nameWithType.vb: BigDecimal.TryParse(Nullable(Of String), Nullable(Of IFormatProvider), ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable(Of System.String), System.Nullable(Of IFormatProvider), ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryParse(Nullable(Of String), Nullable(Of IFormatProvider), ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},Galaxon.Numerics.BigDecimal@)
  id: TryParse(System.Nullable{System.String},Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryParse(Nullable<String>, out BigDecimal)
  nameWithType: BigDecimal.TryParse(Nullable<String>, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable<System.String>, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryParse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 223
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nMore convenient version of TryParse().\n"
  example: []
  syntax:
    content: public static bool TryParse(string? str, out BigDecimal result)
    parameters:
    - id: str
      type: System.Nullable{System.String}
    - id: result
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(str As String?, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryParse*
  nameWithType.vb: BigDecimal.TryParse(Nullable(Of String), ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable(Of System.String), ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryParse(Nullable(Of String), ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryParse(System.Nullable{System.String},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  id: TryParse(System.Nullable{System.String},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryParse(Nullable<String>, NumberStyles, Nullable<IFormatProvider>, out BigDecimal)
  nameWithType: BigDecimal.TryParse(Nullable<String>, NumberStyles, Nullable<IFormatProvider>, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable<System.String>, NumberStyles, System.Nullable<IFormatProvider>, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryParse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 228
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: Ignoring style parameter for now.
  example: []
  syntax:
    content: public static bool TryParse(string? str, NumberStyles style, IFormatProvider? provider, out BigDecimal result)
    parameters:
    - id: str
      type: System.Nullable{System.String}
    - id: style
      type: NumberStyles
    - id: provider
      type: System.Nullable{IFormatProvider}
    - id: result
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(str As String?, style As NumberStyles, provider As IFormatProvider?, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryParse*
  nameWithType.vb: BigDecimal.TryParse(Nullable(Of String), NumberStyles, Nullable(Of IFormatProvider), ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryParse(System.Nullable(Of System.String), NumberStyles, System.Nullable(Of IFormatProvider), ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryParse(Nullable(Of String), NumberStyles, Nullable(Of IFormatProvider), ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  id: TryParse(ReadOnlySpan{System.Char},System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<Char>, Nullable<IFormatProvider>, out BigDecimal)
  nameWithType: BigDecimal.TryParse(ReadOnlySpan<Char>, Nullable<IFormatProvider>, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan<System.Char>, System.Nullable<IFormatProvider>, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryParse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 233
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static bool TryParse(ReadOnlySpan<char> span, IFormatProvider? provider, out BigDecimal result)
    parameters:
    - id: span
      type: ReadOnlySpan{System.Char}
    - id: provider
      type: System.Nullable{IFormatProvider}
    - id: result
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(span As ReadOnlySpan(Of Char), provider As IFormatProvider?, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryParse*
  nameWithType.vb: BigDecimal.TryParse(ReadOnlySpan(Of Char), Nullable(Of IFormatProvider), ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan(Of System.Char), System.Nullable(Of IFormatProvider), ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryParse(ReadOnlySpan(Of Char), Nullable(Of IFormatProvider), ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  id: TryParse(ReadOnlySpan{System.Char},NumberStyles,System.Nullable{IFormatProvider},Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TryParse(ReadOnlySpan<Char>, NumberStyles, Nullable<IFormatProvider>, out BigDecimal)
  nameWithType: BigDecimal.TryParse(ReadOnlySpan<Char>, NumberStyles, Nullable<IFormatProvider>, out BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan<System.Char>, NumberStyles, System.Nullable<IFormatProvider>, out Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalString.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TryParse
    path: ../BigDecimal/BigDecimal/BigDecimalString.cs
    startLine: 239
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  remarks: Ignoring style parameter for now.
  example: []
  syntax:
    content: public static bool TryParse(ReadOnlySpan<char> span, NumberStyles style, IFormatProvider? provider, out BigDecimal result)
    parameters:
    - id: span
      type: ReadOnlySpan{System.Char}
    - id: style
      type: NumberStyles
    - id: provider
      type: System.Nullable{IFormatProvider}
    - id: result
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(span As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider?, ByRef result As BigDecimal) As Boolean
  overload: Galaxon.Numerics.BigDecimal.TryParse*
  nameWithType.vb: BigDecimal.TryParse(ReadOnlySpan(Of Char), NumberStyles, Nullable(Of IFormatProvider), ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.TryParse(ReadOnlySpan(Of System.Char), NumberStyles, System.Nullable(Of IFormatProvider), ByRef Galaxon.Numerics.BigDecimal)
  name.vb: TryParse(ReadOnlySpan(Of Char), NumberStyles, Nullable(Of IFormatProvider), ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.NormalizeAngle(Galaxon.Numerics.BigDecimal@)
  commentId: M:Galaxon.Numerics.BigDecimal.NormalizeAngle(Galaxon.Numerics.BigDecimal@)
  id: NormalizeAngle(Galaxon.Numerics.BigDecimal@)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: NormalizeAngle(in BigDecimal)
  nameWithType: BigDecimal.NormalizeAngle(in BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.NormalizeAngle(in Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: NormalizeAngle
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 15
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  summary: "\nShift given angle to the equivalent angle in the interval [-π, π).\n"
  example: []
  syntax:
    content: public static BigDecimal NormalizeAngle(in BigDecimal radians)
    parameters:
    - id: radians
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function NormalizeAngle(ByRef radians As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.NormalizeAngle*
  nameWithType.vb: BigDecimal.NormalizeAngle(ByRef BigDecimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Numerics.BigDecimal.NormalizeAngle(ByRef Galaxon.Numerics.BigDecimal)
  name.vb: NormalizeAngle(ByRef BigDecimal)
- uid: Galaxon.Numerics.BigDecimal.Sin(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Sin(Galaxon.Numerics.BigDecimal)
  id: Sin(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Sin(BigDecimal)
  nameWithType: BigDecimal.Sin(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Sin(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Sin
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 36
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Sin(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Sin(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.SinPi(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.SinPi(Galaxon.Numerics.BigDecimal)
  id: SinPi(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: SinPi(BigDecimal)
  nameWithType: BigDecimal.SinPi(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.SinPi(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: SinPi
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 96
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal SinPi(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function SinPi(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.SinPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Cos(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Cos(Galaxon.Numerics.BigDecimal)
  id: Cos(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Cos(BigDecimal)
  nameWithType: BigDecimal.Cos(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Cos(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Cos
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 102
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Cos(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Cos(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Cos*
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Taylor_series#Trigonometric_functions
    altText: https://en.wikipedia.org/wiki/Taylor_series#Trigonometric_functions
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Sine_and_cosine#Series_definitions
    altText: https://en.wikipedia.org/wiki/Sine_and_cosine#Series_definitions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.CosPi(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.CosPi(Galaxon.Numerics.BigDecimal)
  id: CosPi(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: CosPi(BigDecimal)
  nameWithType: BigDecimal.CosPi(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.CosPi(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: CosPi
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 165
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal CosPi(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function CosPi(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.CosPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.SinCos(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.SinCos(Galaxon.Numerics.BigDecimal)
  id: SinCos(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: SinCos(BigDecimal)
  nameWithType: BigDecimal.SinCos(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.SinCos(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: SinCos
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 169
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static (BigDecimal Sin, BigDecimal Cos) SinCos(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.ValueTuple{Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal}
    content.vb: Public Shared Function SinCos(x As BigDecimal) As(Sin As BigDecimal, Cos As BigDecimal)(Of BigDecimal , BigDecimal)
  overload: Galaxon.Numerics.BigDecimal.SinCos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.SinCosPi(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.SinCosPi(Galaxon.Numerics.BigDecimal)
  id: SinCosPi(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: SinCosPi(BigDecimal)
  nameWithType: BigDecimal.SinCosPi(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.SinCosPi(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: SinCosPi
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 173
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static (BigDecimal SinPi, BigDecimal CosPi) SinCosPi(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: System.ValueTuple{Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal}
    content.vb: Public Shared Function SinCosPi(x As BigDecimal) As(SinPi As BigDecimal, CosPi As BigDecimal)(Of BigDecimal , BigDecimal)
  overload: Galaxon.Numerics.BigDecimal.SinCosPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Tan(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Tan(Galaxon.Numerics.BigDecimal)
  id: Tan(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Tan(BigDecimal)
  nameWithType: BigDecimal.Tan(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Tan(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Tan
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 177
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Tan(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Tan(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.TanPi(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.TanPi(Galaxon.Numerics.BigDecimal)
  id: TanPi(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: TanPi(BigDecimal)
  nameWithType: BigDecimal.TanPi(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.TanPi(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: TanPi
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 192
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal TanPi(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function TanPi(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.TanPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Asin(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Asin(Galaxon.Numerics.BigDecimal)
  id: Asin(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Asin(BigDecimal)
  nameWithType: BigDecimal.Asin(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Asin(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Asin
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 200
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Asin(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Asin(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.AsinPi(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.AsinPi(Galaxon.Numerics.BigDecimal)
  id: AsinPi(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: AsinPi(BigDecimal)
  nameWithType: BigDecimal.AsinPi(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.AsinPi(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: AsinPi
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 277
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal AsinPi(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function AsinPi(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.AsinPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Acos(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Acos(Galaxon.Numerics.BigDecimal)
  id: Acos(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Acos(BigDecimal)
  nameWithType: BigDecimal.Acos(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Acos(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Acos
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 281
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Acos(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Acos(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.AcosPi(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.AcosPi(Galaxon.Numerics.BigDecimal)
  id: AcosPi(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: AcosPi(BigDecimal)
  nameWithType: BigDecimal.AcosPi(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.AcosPi(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: AcosPi
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 285
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal AcosPi(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function AcosPi(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.AcosPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Atan(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Atan(Galaxon.Numerics.BigDecimal)
  id: Atan(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Atan(BigDecimal)
  nameWithType: BigDecimal.Atan(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Atan(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Atan
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 289
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Atan(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Atan(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.AtanPi(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.AtanPi(Galaxon.Numerics.BigDecimal)
  id: AtanPi(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: AtanPi(BigDecimal)
  nameWithType: BigDecimal.AtanPi(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.AtanPi(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: AtanPi
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 348
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal AtanPi(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function AtanPi(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.AtanPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Sinh(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Sinh(Galaxon.Numerics.BigDecimal)
  id: Sinh(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Sinh(BigDecimal)
  nameWithType: BigDecimal.Sinh(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Sinh(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Sinh
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 356
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Sinh(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Sinh(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Cosh(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Cosh(Galaxon.Numerics.BigDecimal)
  id: Cosh(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Cosh(BigDecimal)
  nameWithType: BigDecimal.Cosh(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Cosh(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Cosh
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 401
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Cosh(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Cosh(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Tanh(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Tanh(Galaxon.Numerics.BigDecimal)
  id: Tanh(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Tanh(BigDecimal)
  nameWithType: BigDecimal.Tanh(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Tanh(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Tanh
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 447
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Tanh(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Tanh(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Asinh(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Asinh(Galaxon.Numerics.BigDecimal)
  id: Asinh(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Asinh(BigDecimal)
  nameWithType: BigDecimal.Asinh(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Asinh(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Asinh
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 455
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Asinh(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Asinh(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Asinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Acosh(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Acosh(Galaxon.Numerics.BigDecimal)
  id: Acosh(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Acosh(BigDecimal)
  nameWithType: BigDecimal.Acosh(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Acosh(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Acosh
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 459
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Acosh(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Acosh(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Acosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Numerics.BigDecimal.Atanh(Galaxon.Numerics.BigDecimal)
  commentId: M:Galaxon.Numerics.BigDecimal.Atanh(Galaxon.Numerics.BigDecimal)
  id: Atanh(Galaxon.Numerics.BigDecimal)
  parent: Galaxon.Numerics.BigDecimal
  langs:
  - csharp
  - vb
  name: Atanh(BigDecimal)
  nameWithType: BigDecimal.Atanh(BigDecimal)
  fullName: Galaxon.Numerics.BigDecimal.Atanh(Galaxon.Numerics.BigDecimal)
  type: Method
  source:
    remote:
      path: BigDecimal/BigDecimalTrig.cs
      branch: main
      repo: git@github.com:mossy2100/BigDecimal.git
    id: Atanh
    path: ../BigDecimal/BigDecimal/BigDecimalTrig.cs
    startLine: 463
  assemblies:
  - Galaxon.Numerics.BigDecimal
  namespace: Galaxon.Numerics
  example: []
  syntax:
    content: public static BigDecimal Atanh(BigDecimal x)
    parameters:
    - id: x
      type: Galaxon.Numerics.BigDecimal
    return:
      type: Galaxon.Numerics.BigDecimal
    content.vb: Public Shared Function Atanh(x As BigDecimal) As BigDecimal
  overload: Galaxon.Numerics.BigDecimal.Atanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Numerics
  commentId: N:Galaxon.Numerics
  name: Galaxon.Numerics
  nameWithType: Galaxon.Numerics
  fullName: Galaxon.Numerics
- uid: IConvertible
  commentId: '!:IConvertible'
  isExternal: true
  name: IConvertible
  nameWithType: IConvertible
  fullName: IConvertible
- uid: IFloatingPoint{Galaxon.Numerics.BigDecimal}
  commentId: '!:IFloatingPoint{Galaxon.Numerics.BigDecimal}'
  definition: IFloatingPoint`1
  name: IFloatingPoint<BigDecimal>
  nameWithType: IFloatingPoint<BigDecimal>
  fullName: IFloatingPoint<Galaxon.Numerics.BigDecimal>
  nameWithType.vb: IFloatingPoint(Of BigDecimal)
  fullName.vb: IFloatingPoint(Of Galaxon.Numerics.BigDecimal)
  name.vb: IFloatingPoint(Of BigDecimal)
  spec.csharp:
  - uid: IFloatingPoint`1
    name: IFloatingPoint
    nameWithType: IFloatingPoint
    fullName: IFloatingPoint
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IFloatingPoint`1
    name: IFloatingPoint
    nameWithType: IFloatingPoint
    fullName: IFloatingPoint
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: IPowerFunctions{Galaxon.Numerics.BigDecimal}
  commentId: '!:IPowerFunctions{Galaxon.Numerics.BigDecimal}'
  definition: IPowerFunctions`1
  name: IPowerFunctions<BigDecimal>
  nameWithType: IPowerFunctions<BigDecimal>
  fullName: IPowerFunctions<Galaxon.Numerics.BigDecimal>
  nameWithType.vb: IPowerFunctions(Of BigDecimal)
  fullName.vb: IPowerFunctions(Of Galaxon.Numerics.BigDecimal)
  name.vb: IPowerFunctions(Of BigDecimal)
  spec.csharp:
  - uid: IPowerFunctions`1
    name: IPowerFunctions
    nameWithType: IPowerFunctions
    fullName: IPowerFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IPowerFunctions`1
    name: IPowerFunctions
    nameWithType: IPowerFunctions
    fullName: IPowerFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: IRootFunctions{Galaxon.Numerics.BigDecimal}
  commentId: '!:IRootFunctions{Galaxon.Numerics.BigDecimal}'
  definition: IRootFunctions`1
  name: IRootFunctions<BigDecimal>
  nameWithType: IRootFunctions<BigDecimal>
  fullName: IRootFunctions<Galaxon.Numerics.BigDecimal>
  nameWithType.vb: IRootFunctions(Of BigDecimal)
  fullName.vb: IRootFunctions(Of Galaxon.Numerics.BigDecimal)
  name.vb: IRootFunctions(Of BigDecimal)
  spec.csharp:
  - uid: IRootFunctions`1
    name: IRootFunctions
    nameWithType: IRootFunctions
    fullName: IRootFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRootFunctions`1
    name: IRootFunctions
    nameWithType: IRootFunctions
    fullName: IRootFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: IExponentialFunctions{Galaxon.Numerics.BigDecimal}
  commentId: '!:IExponentialFunctions{Galaxon.Numerics.BigDecimal}'
  definition: IExponentialFunctions`1
  name: IExponentialFunctions<BigDecimal>
  nameWithType: IExponentialFunctions<BigDecimal>
  fullName: IExponentialFunctions<Galaxon.Numerics.BigDecimal>
  nameWithType.vb: IExponentialFunctions(Of BigDecimal)
  fullName.vb: IExponentialFunctions(Of Galaxon.Numerics.BigDecimal)
  name.vb: IExponentialFunctions(Of BigDecimal)
  spec.csharp:
  - uid: IExponentialFunctions`1
    name: IExponentialFunctions
    nameWithType: IExponentialFunctions
    fullName: IExponentialFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IExponentialFunctions`1
    name: IExponentialFunctions
    nameWithType: IExponentialFunctions
    fullName: IExponentialFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogarithmicFunctions{Galaxon.Numerics.BigDecimal}
  commentId: '!:ILogarithmicFunctions{Galaxon.Numerics.BigDecimal}'
  definition: ILogarithmicFunctions`1
  name: ILogarithmicFunctions<BigDecimal>
  nameWithType: ILogarithmicFunctions<BigDecimal>
  fullName: ILogarithmicFunctions<Galaxon.Numerics.BigDecimal>
  nameWithType.vb: ILogarithmicFunctions(Of BigDecimal)
  fullName.vb: ILogarithmicFunctions(Of Galaxon.Numerics.BigDecimal)
  name.vb: ILogarithmicFunctions(Of BigDecimal)
  spec.csharp:
  - uid: ILogarithmicFunctions`1
    name: ILogarithmicFunctions
    nameWithType: ILogarithmicFunctions
    fullName: ILogarithmicFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogarithmicFunctions`1
    name: ILogarithmicFunctions
    nameWithType: ILogarithmicFunctions
    fullName: ILogarithmicFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: ICloneable
  commentId: '!:ICloneable'
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: ICloneable
- uid: ITrigonometricFunctions{Galaxon.Numerics.BigDecimal}
  commentId: '!:ITrigonometricFunctions{Galaxon.Numerics.BigDecimal}'
  definition: ITrigonometricFunctions`1
  name: ITrigonometricFunctions<BigDecimal>
  nameWithType: ITrigonometricFunctions<BigDecimal>
  fullName: ITrigonometricFunctions<Galaxon.Numerics.BigDecimal>
  nameWithType.vb: ITrigonometricFunctions(Of BigDecimal)
  fullName.vb: ITrigonometricFunctions(Of Galaxon.Numerics.BigDecimal)
  name.vb: ITrigonometricFunctions(Of BigDecimal)
  spec.csharp:
  - uid: ITrigonometricFunctions`1
    name: ITrigonometricFunctions
    nameWithType: ITrigonometricFunctions
    fullName: ITrigonometricFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ITrigonometricFunctions`1
    name: ITrigonometricFunctions
    nameWithType: ITrigonometricFunctions
    fullName: ITrigonometricFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: IHyperbolicFunctions{Galaxon.Numerics.BigDecimal}
  commentId: '!:IHyperbolicFunctions{Galaxon.Numerics.BigDecimal}'
  definition: IHyperbolicFunctions`1
  name: IHyperbolicFunctions<BigDecimal>
  nameWithType: IHyperbolicFunctions<BigDecimal>
  fullName: IHyperbolicFunctions<Galaxon.Numerics.BigDecimal>
  nameWithType.vb: IHyperbolicFunctions(Of BigDecimal)
  fullName.vb: IHyperbolicFunctions(Of Galaxon.Numerics.BigDecimal)
  name.vb: IHyperbolicFunctions(Of BigDecimal)
  spec.csharp:
  - uid: IHyperbolicFunctions`1
    name: IHyperbolicFunctions
    nameWithType: IHyperbolicFunctions
    fullName: IHyperbolicFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IHyperbolicFunctions`1
    name: IHyperbolicFunctions
    nameWithType: IHyperbolicFunctions
    fullName: IHyperbolicFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: IFloatingPoint`1
  commentId: '!:IFloatingPoint`1'
  isExternal: true
  name: IFloatingPoint<>
  nameWithType: IFloatingPoint<>
  fullName: IFloatingPoint<>
  nameWithType.vb: IFloatingPoint(Of )
  fullName.vb: IFloatingPoint(Of )
  name.vb: IFloatingPoint(Of )
  spec.csharp:
  - uid: IFloatingPoint`1
    name: IFloatingPoint
    nameWithType: IFloatingPoint
    fullName: IFloatingPoint
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IFloatingPoint`1
    name: IFloatingPoint
    nameWithType: IFloatingPoint
    fullName: IFloatingPoint
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IPowerFunctions`1
  commentId: '!:IPowerFunctions`1'
  isExternal: true
  name: IPowerFunctions<>
  nameWithType: IPowerFunctions<>
  fullName: IPowerFunctions<>
  nameWithType.vb: IPowerFunctions(Of )
  fullName.vb: IPowerFunctions(Of )
  name.vb: IPowerFunctions(Of )
  spec.csharp:
  - uid: IPowerFunctions`1
    name: IPowerFunctions
    nameWithType: IPowerFunctions
    fullName: IPowerFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IPowerFunctions`1
    name: IPowerFunctions
    nameWithType: IPowerFunctions
    fullName: IPowerFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IRootFunctions`1
  commentId: '!:IRootFunctions`1'
  isExternal: true
  name: IRootFunctions<>
  nameWithType: IRootFunctions<>
  fullName: IRootFunctions<>
  nameWithType.vb: IRootFunctions(Of )
  fullName.vb: IRootFunctions(Of )
  name.vb: IRootFunctions(Of )
  spec.csharp:
  - uid: IRootFunctions`1
    name: IRootFunctions
    nameWithType: IRootFunctions
    fullName: IRootFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRootFunctions`1
    name: IRootFunctions
    nameWithType: IRootFunctions
    fullName: IRootFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IExponentialFunctions`1
  commentId: '!:IExponentialFunctions`1'
  isExternal: true
  name: IExponentialFunctions<>
  nameWithType: IExponentialFunctions<>
  fullName: IExponentialFunctions<>
  nameWithType.vb: IExponentialFunctions(Of )
  fullName.vb: IExponentialFunctions(Of )
  name.vb: IExponentialFunctions(Of )
  spec.csharp:
  - uid: IExponentialFunctions`1
    name: IExponentialFunctions
    nameWithType: IExponentialFunctions
    fullName: IExponentialFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IExponentialFunctions`1
    name: IExponentialFunctions
    nameWithType: IExponentialFunctions
    fullName: IExponentialFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogarithmicFunctions`1
  commentId: '!:ILogarithmicFunctions`1'
  isExternal: true
  name: ILogarithmicFunctions<>
  nameWithType: ILogarithmicFunctions<>
  fullName: ILogarithmicFunctions<>
  nameWithType.vb: ILogarithmicFunctions(Of )
  fullName.vb: ILogarithmicFunctions(Of )
  name.vb: ILogarithmicFunctions(Of )
  spec.csharp:
  - uid: ILogarithmicFunctions`1
    name: ILogarithmicFunctions
    nameWithType: ILogarithmicFunctions
    fullName: ILogarithmicFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogarithmicFunctions`1
    name: ILogarithmicFunctions
    nameWithType: ILogarithmicFunctions
    fullName: ILogarithmicFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ITrigonometricFunctions`1
  commentId: '!:ITrigonometricFunctions`1'
  isExternal: true
  name: ITrigonometricFunctions<>
  nameWithType: ITrigonometricFunctions<>
  fullName: ITrigonometricFunctions<>
  nameWithType.vb: ITrigonometricFunctions(Of )
  fullName.vb: ITrigonometricFunctions(Of )
  name.vb: ITrigonometricFunctions(Of )
  spec.csharp:
  - uid: ITrigonometricFunctions`1
    name: ITrigonometricFunctions
    nameWithType: ITrigonometricFunctions
    fullName: ITrigonometricFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ITrigonometricFunctions`1
    name: ITrigonometricFunctions
    nameWithType: ITrigonometricFunctions
    fullName: ITrigonometricFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IHyperbolicFunctions`1
  commentId: '!:IHyperbolicFunctions`1'
  isExternal: true
  name: IHyperbolicFunctions<>
  nameWithType: IHyperbolicFunctions<>
  fullName: IHyperbolicFunctions<>
  nameWithType.vb: IHyperbolicFunctions(Of )
  fullName.vb: IHyperbolicFunctions(Of )
  name.vb: IHyperbolicFunctions(Of )
  spec.csharp:
  - uid: IHyperbolicFunctions`1
    name: IHyperbolicFunctions
    nameWithType: IHyperbolicFunctions
    fullName: IHyperbolicFunctions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IHyperbolicFunctions`1
    name: IHyperbolicFunctions
    nameWithType: IHyperbolicFunctions
    fullName: IHyperbolicFunctions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.CompareTo*
  commentId: Overload:Galaxon.Numerics.BigDecimal.CompareTo
  name: CompareTo
  nameWithType: BigDecimal.CompareTo
  fullName: Galaxon.Numerics.BigDecimal.CompareTo
- uid: Galaxon.Numerics.BigDecimal
  commentId: T:Galaxon.Numerics.BigDecimal
  parent: Galaxon.Numerics
  name: BigDecimal
  nameWithType: BigDecimal
  fullName: Galaxon.Numerics.BigDecimal
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Object}
  commentId: '!:System.Nullable{System.Object}'
  definition: System.Nullable`1
  name: Nullable<Object>
  nameWithType: Nullable<Object>
  fullName: System.Nullable<System.Object>
  nameWithType.vb: Nullable(Of Object)
  fullName.vb: System.Nullable(Of System.Object)
  name.vb: Nullable(Of Object)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.Equals*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Equals
  name: Equals
  nameWithType: BigDecimal.Equals
  fullName: Galaxon.Numerics.BigDecimal.Equals
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Galaxon.Numerics.BigDecimal.GetHashCode*
  commentId: Overload:Galaxon.Numerics.BigDecimal.GetHashCode
  name: GetHashCode
  nameWithType: BigDecimal.GetHashCode
  fullName: Galaxon.Numerics.BigDecimal.GetHashCode
- uid: Galaxon.Numerics.BigDecimal.MaxMagnitude*
  commentId: Overload:Galaxon.Numerics.BigDecimal.MaxMagnitude
  name: MaxMagnitude
  nameWithType: BigDecimal.MaxMagnitude
  fullName: Galaxon.Numerics.BigDecimal.MaxMagnitude
- uid: Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber*
  commentId: Overload:Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber
  name: MaxMagnitudeNumber
  nameWithType: BigDecimal.MaxMagnitudeNumber
  fullName: Galaxon.Numerics.BigDecimal.MaxMagnitudeNumber
- uid: Galaxon.Numerics.BigDecimal.MinMagnitude*
  commentId: Overload:Galaxon.Numerics.BigDecimal.MinMagnitude
  name: MinMagnitude
  nameWithType: BigDecimal.MinMagnitude
  fullName: Galaxon.Numerics.BigDecimal.MinMagnitude
- uid: Galaxon.Numerics.BigDecimal.MinMagnitudeNumber*
  commentId: Overload:Galaxon.Numerics.BigDecimal.MinMagnitudeNumber
  name: MinMagnitudeNumber
  nameWithType: BigDecimal.MinMagnitudeNumber
  fullName: Galaxon.Numerics.BigDecimal.MinMagnitudeNumber
- uid: Galaxon.Numerics.BigDecimal.op_Equality*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Equality
  name: Equality
  nameWithType: BigDecimal.Equality
  fullName: Galaxon.Numerics.BigDecimal.Equality
- uid: Galaxon.Numerics.BigDecimal.op_Inequality*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Inequality
  name: Inequality
  nameWithType: BigDecimal.Inequality
  fullName: Galaxon.Numerics.BigDecimal.Inequality
- uid: Galaxon.Numerics.BigDecimal.op_LessThan*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_LessThan
  name: LessThan
  nameWithType: BigDecimal.LessThan
  fullName: Galaxon.Numerics.BigDecimal.LessThan
- uid: Galaxon.Numerics.BigDecimal.op_LessThanOrEqual*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: BigDecimal.LessThanOrEqual
  fullName: Galaxon.Numerics.BigDecimal.LessThanOrEqual
- uid: Galaxon.Numerics.BigDecimal.op_GreaterThan*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_GreaterThan
  name: GreaterThan
  nameWithType: BigDecimal.GreaterThan
  fullName: Galaxon.Numerics.BigDecimal.GreaterThan
- uid: Galaxon.Numerics.BigDecimal.op_GreaterThanOrEqual*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: BigDecimal.GreaterThanOrEqual
  fullName: Galaxon.Numerics.BigDecimal.GreaterThanOrEqual
- uid: Galaxon.Numerics.BigDecimal.E*
  commentId: Overload:Galaxon.Numerics.BigDecimal.E
  name: E
  nameWithType: BigDecimal.E
  fullName: Galaxon.Numerics.BigDecimal.E
- uid: Galaxon.Numerics.BigDecimal.Pi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Pi
  name: Pi
  nameWithType: BigDecimal.Pi
  fullName: Galaxon.Numerics.BigDecimal.Pi
- uid: Galaxon.Numerics.BigDecimal.ComputePi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ComputePi
  name: ComputePi
  nameWithType: BigDecimal.ComputePi
  fullName: Galaxon.Numerics.BigDecimal.ComputePi
- uid: Galaxon.Numerics.BigDecimal.Tau*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Tau
  name: Tau
  nameWithType: BigDecimal.Tau
  fullName: Galaxon.Numerics.BigDecimal.Tau
- uid: Galaxon.Numerics.BigDecimal.ComputeTau*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ComputeTau
  name: ComputeTau
  nameWithType: BigDecimal.ComputeTau
  fullName: Galaxon.Numerics.BigDecimal.ComputeTau
- uid: Galaxon.Numerics.BigDecimal.Phi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Phi
  name: Phi
  nameWithType: BigDecimal.Phi
  fullName: Galaxon.Numerics.BigDecimal.Phi
- uid: Galaxon.Numerics.BigDecimal.ComputePhi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ComputePhi
  name: ComputePhi
  nameWithType: BigDecimal.ComputePhi
  fullName: Galaxon.Numerics.BigDecimal.ComputePhi
- uid: Galaxon.Numerics.BigDecimal.Ln10*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Ln10
  name: Ln10
  nameWithType: BigDecimal.Ln10
  fullName: Galaxon.Numerics.BigDecimal.Ln10
- uid: Galaxon.Numerics.BigDecimal.op_Implicit*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Implicit
  name: Implicit
  nameWithType: BigDecimal.Implicit
  fullName: Galaxon.Numerics.BigDecimal.Implicit
  nameWithType.vb: BigDecimal.Widening
  fullName.vb: Galaxon.Numerics.BigDecimal.Widening
  name.vb: Widening
- uid: System.SByte
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int16
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Int128
  isExternal: true
  name: Int128
  nameWithType: Int128
  fullName: Int128
- uid: UInt128
  isExternal: true
  name: UInt128
  nameWithType: UInt128
  fullName: UInt128
- uid: BigInteger
  isExternal: true
  name: BigInteger
  nameWithType: BigInteger
  fullName: BigInteger
- uid: System.Decimal
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Half
  isExternal: true
  name: Half
  nameWithType: Half
  fullName: Half
- uid: System.Single
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Galaxon.Numerics.BigDecimal.op_Explicit*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Explicit
  name: Explicit
  nameWithType: BigDecimal.Explicit
  fullName: Galaxon.Numerics.BigDecimal.Explicit
  nameWithType.vb: BigDecimal.Narrowing
  fullName.vb: Galaxon.Numerics.BigDecimal.Narrowing
  name.vb: Narrowing
- uid: BigRational
  isExternal: true
  name: BigRational
  nameWithType: BigRational
  fullName: BigRational
- uid: Galaxon.Numerics.BigDecimal.TryConvertFromChecked*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryConvertFromChecked
  name: TryConvertFromChecked
  nameWithType: BigDecimal.TryConvertFromChecked
  fullName: Galaxon.Numerics.BigDecimal.TryConvertFromChecked
- uid: '{TOther}'
  commentId: '!:TOther'
  definition: TOther
  name: TOther
  nameWithType: TOther
  fullName: TOther
- uid: TOther
  name: TOther
  nameWithType: TOther
  fullName: TOther
- uid: Galaxon.Numerics.BigDecimal.TryConvertFromSaturating*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryConvertFromSaturating
  name: TryConvertFromSaturating
  nameWithType: BigDecimal.TryConvertFromSaturating
  fullName: Galaxon.Numerics.BigDecimal.TryConvertFromSaturating
- uid: Galaxon.Numerics.BigDecimal.TryConvertFromTruncating*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryConvertFromTruncating
  name: TryConvertFromTruncating
  nameWithType: BigDecimal.TryConvertFromTruncating
  fullName: Galaxon.Numerics.BigDecimal.TryConvertFromTruncating
- uid: Galaxon.Numerics.BigDecimal.TryConvertToChecked*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryConvertToChecked
  name: TryConvertToChecked
  nameWithType: BigDecimal.TryConvertToChecked
  fullName: Galaxon.Numerics.BigDecimal.TryConvertToChecked
- uid: Galaxon.Numerics.BigDecimal.TryConvertToSaturating*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryConvertToSaturating
  name: TryConvertToSaturating
  nameWithType: BigDecimal.TryConvertToSaturating
  fullName: Galaxon.Numerics.BigDecimal.TryConvertToSaturating
- uid: Galaxon.Numerics.BigDecimal.TryConvertToTruncating*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryConvertToTruncating
  name: TryConvertToTruncating
  nameWithType: BigDecimal.TryConvertToTruncating
  fullName: Galaxon.Numerics.BigDecimal.TryConvertToTruncating
- uid: Galaxon.Numerics.BigDecimal.GetTypeCode*
  commentId: Overload:Galaxon.Numerics.BigDecimal.GetTypeCode
  name: GetTypeCode
  nameWithType: BigDecimal.GetTypeCode
  fullName: Galaxon.Numerics.BigDecimal.GetTypeCode
- uid: TypeCode
  commentId: '!:TypeCode'
  isExternal: true
  name: TypeCode
  nameWithType: TypeCode
  fullName: TypeCode
- uid: Galaxon.Numerics.BigDecimal.ToBoolean*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToBoolean
  name: ToBoolean
  nameWithType: BigDecimal.ToBoolean
  fullName: Galaxon.Numerics.BigDecimal.ToBoolean
- uid: System.Nullable{IFormatProvider}
  commentId: '!:System.Nullable{IFormatProvider}'
  definition: System.Nullable`1
  name: Nullable<IFormatProvider>
  nameWithType: Nullable<IFormatProvider>
  fullName: System.Nullable<IFormatProvider>
  nameWithType.vb: Nullable(Of IFormatProvider)
  fullName.vb: System.Nullable(Of IFormatProvider)
  name.vb: Nullable(Of IFormatProvider)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: IFormatProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.ToSByte*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToSByte
  name: ToSByte
  nameWithType: BigDecimal.ToSByte
  fullName: Galaxon.Numerics.BigDecimal.ToSByte
- uid: Galaxon.Numerics.BigDecimal.ToByte*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToByte
  name: ToByte
  nameWithType: BigDecimal.ToByte
  fullName: Galaxon.Numerics.BigDecimal.ToByte
- uid: Galaxon.Numerics.BigDecimal.ToInt16*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToInt16
  name: ToInt16
  nameWithType: BigDecimal.ToInt16
  fullName: Galaxon.Numerics.BigDecimal.ToInt16
- uid: Galaxon.Numerics.BigDecimal.ToUInt16*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToUInt16
  name: ToUInt16
  nameWithType: BigDecimal.ToUInt16
  fullName: Galaxon.Numerics.BigDecimal.ToUInt16
- uid: Galaxon.Numerics.BigDecimal.ToInt32*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToInt32
  name: ToInt32
  nameWithType: BigDecimal.ToInt32
  fullName: Galaxon.Numerics.BigDecimal.ToInt32
- uid: Galaxon.Numerics.BigDecimal.ToUInt32*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToUInt32
  name: ToUInt32
  nameWithType: BigDecimal.ToUInt32
  fullName: Galaxon.Numerics.BigDecimal.ToUInt32
- uid: Galaxon.Numerics.BigDecimal.ToInt64*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToInt64
  name: ToInt64
  nameWithType: BigDecimal.ToInt64
  fullName: Galaxon.Numerics.BigDecimal.ToInt64
- uid: Galaxon.Numerics.BigDecimal.ToUInt64*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToUInt64
  name: ToUInt64
  nameWithType: BigDecimal.ToUInt64
  fullName: Galaxon.Numerics.BigDecimal.ToUInt64
- uid: Galaxon.Numerics.BigDecimal.ToSingle*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToSingle
  name: ToSingle
  nameWithType: BigDecimal.ToSingle
  fullName: Galaxon.Numerics.BigDecimal.ToSingle
- uid: Galaxon.Numerics.BigDecimal.ToDouble*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToDouble
  name: ToDouble
  nameWithType: BigDecimal.ToDouble
  fullName: Galaxon.Numerics.BigDecimal.ToDouble
- uid: Galaxon.Numerics.BigDecimal.ToDecimal*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToDecimal
  name: ToDecimal
  nameWithType: BigDecimal.ToDecimal
  fullName: Galaxon.Numerics.BigDecimal.ToDecimal
- uid: Galaxon.Numerics.BigDecimal.ToChar*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToChar
  name: ToChar
  nameWithType: BigDecimal.ToChar
  fullName: Galaxon.Numerics.BigDecimal.ToChar
- uid: System.Char
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Galaxon.Numerics.BigDecimal.ToString*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToString
  name: ToString
  nameWithType: BigDecimal.ToString
  fullName: Galaxon.Numerics.BigDecimal.ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Galaxon.Numerics.BigDecimal.ToDateTime*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToDateTime
  name: ToDateTime
  nameWithType: BigDecimal.ToDateTime
  fullName: Galaxon.Numerics.BigDecimal.ToDateTime
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: Galaxon.Numerics.BigDecimal.ToType*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ToType
  name: ToType
  nameWithType: BigDecimal.ToType
  fullName: Galaxon.Numerics.BigDecimal.ToType
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Numerics.BigDecimal.#ctor*
  commentId: Overload:Galaxon.Numerics.BigDecimal.#ctor
  name: BigDecimal
  nameWithType: BigDecimal.BigDecimal
  fullName: Galaxon.Numerics.BigDecimal.BigDecimal
- uid: Galaxon.Numerics.BigDecimal.Significand*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Significand
  name: Significand
  nameWithType: BigDecimal.Significand
  fullName: Galaxon.Numerics.BigDecimal.Significand
- uid: Galaxon.Numerics.BigDecimal.Exponent*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Exponent
  name: Exponent
  nameWithType: BigDecimal.Exponent
  fullName: Galaxon.Numerics.BigDecimal.Exponent
- uid: Galaxon.Numerics.BigDecimal.Sign*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Sign
  name: Sign
  nameWithType: BigDecimal.Sign
  fullName: Galaxon.Numerics.BigDecimal.Sign
- uid: Galaxon.Numerics.BigDecimal.NumSigFigs*
  commentId: Overload:Galaxon.Numerics.BigDecimal.NumSigFigs
  name: NumSigFigs
  nameWithType: BigDecimal.NumSigFigs
  fullName: Galaxon.Numerics.BigDecimal.NumSigFigs
- uid: Galaxon.Numerics.BigDecimal.MaxSigFigs*
  commentId: Overload:Galaxon.Numerics.BigDecimal.MaxSigFigs
  name: MaxSigFigs
  nameWithType: BigDecimal.MaxSigFigs
  fullName: Galaxon.Numerics.BigDecimal.MaxSigFigs
- uid: Galaxon.Numerics.BigDecimal.Zero*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Zero
  name: Zero
  nameWithType: BigDecimal.Zero
  fullName: Galaxon.Numerics.BigDecimal.Zero
- uid: Galaxon.Numerics.BigDecimal.One*
  commentId: Overload:Galaxon.Numerics.BigDecimal.One
  name: One
  nameWithType: BigDecimal.One
  fullName: Galaxon.Numerics.BigDecimal.One
- uid: Galaxon.Numerics.BigDecimal.NegativeOne*
  commentId: Overload:Galaxon.Numerics.BigDecimal.NegativeOne
  name: NegativeOne
  nameWithType: BigDecimal.NegativeOne
  fullName: Galaxon.Numerics.BigDecimal.NegativeOne
- uid: Galaxon.Numerics.BigDecimal.Radix*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Radix
  name: Radix
  nameWithType: BigDecimal.Radix
  fullName: Galaxon.Numerics.BigDecimal.Radix
- uid: Galaxon.Numerics.BigDecimal.AdditiveIdentity*
  commentId: Overload:Galaxon.Numerics.BigDecimal.AdditiveIdentity
  name: AdditiveIdentity
  nameWithType: BigDecimal.AdditiveIdentity
  fullName: Galaxon.Numerics.BigDecimal.AdditiveIdentity
- uid: Galaxon.Numerics.BigDecimal.MultiplicativeIdentity*
  commentId: Overload:Galaxon.Numerics.BigDecimal.MultiplicativeIdentity
  name: MultiplicativeIdentity
  nameWithType: BigDecimal.MultiplicativeIdentity
  fullName: Galaxon.Numerics.BigDecimal.MultiplicativeIdentity
- uid: Galaxon.Numerics.BigDecimal.IsCanonical*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsCanonical
  name: IsCanonical
  nameWithType: BigDecimal.IsCanonical
  fullName: Galaxon.Numerics.BigDecimal.IsCanonical
- uid: Galaxon.Numerics.BigDecimal.IsComplexNumber*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsComplexNumber
  name: IsComplexNumber
  nameWithType: BigDecimal.IsComplexNumber
  fullName: Galaxon.Numerics.BigDecimal.IsComplexNumber
- uid: Galaxon.Numerics.BigDecimal.IsInteger*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsInteger
  name: IsInteger
  nameWithType: BigDecimal.IsInteger
  fullName: Galaxon.Numerics.BigDecimal.IsInteger
- uid: Galaxon.Numerics.BigDecimal.IsOddInteger*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsOddInteger
  name: IsOddInteger
  nameWithType: BigDecimal.IsOddInteger
  fullName: Galaxon.Numerics.BigDecimal.IsOddInteger
- uid: Galaxon.Numerics.BigDecimal.IsEvenInteger*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsEvenInteger
  name: IsEvenInteger
  nameWithType: BigDecimal.IsEvenInteger
  fullName: Galaxon.Numerics.BigDecimal.IsEvenInteger
- uid: Galaxon.Numerics.BigDecimal.IsZero*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsZero
  name: IsZero
  nameWithType: BigDecimal.IsZero
  fullName: Galaxon.Numerics.BigDecimal.IsZero
- uid: Galaxon.Numerics.BigDecimal.IsNegative*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsNegative
  name: IsNegative
  nameWithType: BigDecimal.IsNegative
  fullName: Galaxon.Numerics.BigDecimal.IsNegative
- uid: Galaxon.Numerics.BigDecimal.IsPositive*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsPositive
  name: IsPositive
  nameWithType: BigDecimal.IsPositive
  fullName: Galaxon.Numerics.BigDecimal.IsPositive
- uid: Galaxon.Numerics.BigDecimal.IsFinite*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsFinite
  name: IsFinite
  nameWithType: BigDecimal.IsFinite
  fullName: Galaxon.Numerics.BigDecimal.IsFinite
- uid: Galaxon.Numerics.BigDecimal.IsInfinity*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsInfinity
  name: IsInfinity
  nameWithType: BigDecimal.IsInfinity
  fullName: Galaxon.Numerics.BigDecimal.IsInfinity
- uid: Galaxon.Numerics.BigDecimal.IsNegativeInfinity*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsNegativeInfinity
  name: IsNegativeInfinity
  nameWithType: BigDecimal.IsNegativeInfinity
  fullName: Galaxon.Numerics.BigDecimal.IsNegativeInfinity
- uid: Galaxon.Numerics.BigDecimal.IsPositiveInfinity*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsPositiveInfinity
  name: IsPositiveInfinity
  nameWithType: BigDecimal.IsPositiveInfinity
  fullName: Galaxon.Numerics.BigDecimal.IsPositiveInfinity
- uid: Galaxon.Numerics.BigDecimal.IsRealNumber*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsRealNumber
  name: IsRealNumber
  nameWithType: BigDecimal.IsRealNumber
  fullName: Galaxon.Numerics.BigDecimal.IsRealNumber
- uid: Galaxon.Numerics.BigDecimal.IsImaginaryNumber*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsImaginaryNumber
  name: IsImaginaryNumber
  nameWithType: BigDecimal.IsImaginaryNumber
  fullName: Galaxon.Numerics.BigDecimal.IsImaginaryNumber
- uid: Galaxon.Numerics.BigDecimal.IsNormal*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsNormal
  name: IsNormal
  nameWithType: BigDecimal.IsNormal
  fullName: Galaxon.Numerics.BigDecimal.IsNormal
- uid: Galaxon.Numerics.BigDecimal.IsSubnormal*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsSubnormal
  name: IsSubnormal
  nameWithType: BigDecimal.IsSubnormal
  fullName: Galaxon.Numerics.BigDecimal.IsSubnormal
- uid: Galaxon.Numerics.BigDecimal.IsNaN*
  commentId: Overload:Galaxon.Numerics.BigDecimal.IsNaN
  name: IsNaN
  nameWithType: BigDecimal.IsNaN
  fullName: Galaxon.Numerics.BigDecimal.IsNaN
- uid: Galaxon.Numerics.BigDecimal.GetSignificandByteCount*
  commentId: Overload:Galaxon.Numerics.BigDecimal.GetSignificandByteCount
  name: GetSignificandByteCount
  nameWithType: BigDecimal.GetSignificandByteCount
  fullName: Galaxon.Numerics.BigDecimal.GetSignificandByteCount
- uid: Galaxon.Numerics.BigDecimal.GetSignificandBitLength*
  commentId: Overload:Galaxon.Numerics.BigDecimal.GetSignificandBitLength
  name: GetSignificandBitLength
  nameWithType: BigDecimal.GetSignificandBitLength
  fullName: Galaxon.Numerics.BigDecimal.GetSignificandBitLength
- uid: Galaxon.Numerics.BigDecimal.GetExponentByteCount*
  commentId: Overload:Galaxon.Numerics.BigDecimal.GetExponentByteCount
  name: GetExponentByteCount
  nameWithType: BigDecimal.GetExponentByteCount
  fullName: Galaxon.Numerics.BigDecimal.GetExponentByteCount
- uid: Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength*
  commentId: Overload:Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength
  name: GetExponentShortestBitLength
  nameWithType: BigDecimal.GetExponentShortestBitLength
  fullName: Galaxon.Numerics.BigDecimal.GetExponentShortestBitLength
- uid: Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian
  name: TryWriteSignificandBigEndian
  nameWithType: BigDecimal.TryWriteSignificandBigEndian
  fullName: Galaxon.Numerics.BigDecimal.TryWriteSignificandBigEndian
- uid: Span{System.Byte}
  commentId: '!:Span{System.Byte}'
  definition: Span`1
  name: Span<Byte>
  nameWithType: Span<Byte>
  fullName: Span<System.Byte>
  nameWithType.vb: Span(Of Byte)
  fullName.vb: Span(Of System.Byte)
  name.vb: Span(Of Byte)
  spec.csharp:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Span`1
  isExternal: true
  name: Span<>
  nameWithType: Span<>
  fullName: Span<>
  nameWithType.vb: Span(Of )
  fullName.vb: Span(Of )
  name.vb: Span(Of )
  spec.csharp:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian
  name: TryWriteSignificandLittleEndian
  nameWithType: BigDecimal.TryWriteSignificandLittleEndian
  fullName: Galaxon.Numerics.BigDecimal.TryWriteSignificandLittleEndian
- uid: Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian
  name: TryWriteExponentBigEndian
  nameWithType: BigDecimal.TryWriteExponentBigEndian
  fullName: Galaxon.Numerics.BigDecimal.TryWriteExponentBigEndian
- uid: Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian
  name: TryWriteExponentLittleEndian
  nameWithType: BigDecimal.TryWriteExponentLittleEndian
  fullName: Galaxon.Numerics.BigDecimal.TryWriteExponentLittleEndian
- uid: Galaxon.Numerics.BigDecimal.Pow*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Pow
  name: Pow
  nameWithType: BigDecimal.Pow
  fullName: Galaxon.Numerics.BigDecimal.Pow
- uid: Galaxon.Numerics.BigDecimal.Sqr*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Sqr
  name: Sqr
  nameWithType: BigDecimal.Sqr
  fullName: Galaxon.Numerics.BigDecimal.Sqr
- uid: Galaxon.Numerics.BigDecimal.Cube*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Cube
  name: Cube
  nameWithType: BigDecimal.Cube
  fullName: Galaxon.Numerics.BigDecimal.Cube
- uid: Galaxon.Numerics.BigDecimal.RootN*
  commentId: Overload:Galaxon.Numerics.BigDecimal.RootN
  name: RootN
  nameWithType: BigDecimal.RootN
  fullName: Galaxon.Numerics.BigDecimal.RootN
- uid: Galaxon.Numerics.BigDecimal.Sqrt*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Sqrt
  name: Sqrt
  nameWithType: BigDecimal.Sqrt
  fullName: Galaxon.Numerics.BigDecimal.Sqrt
- uid: Galaxon.Numerics.BigDecimal.Cbrt*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Cbrt
  name: Cbrt
  nameWithType: BigDecimal.Cbrt
  fullName: Galaxon.Numerics.BigDecimal.Cbrt
- uid: Galaxon.Numerics.BigDecimal.Hypot*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Hypot
  name: Hypot
  nameWithType: BigDecimal.Hypot
  fullName: Galaxon.Numerics.BigDecimal.Hypot
- uid: Galaxon.Numerics.BigDecimal.Exp*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Exp
  name: Exp
  nameWithType: BigDecimal.Exp
  fullName: Galaxon.Numerics.BigDecimal.Exp
- uid: Galaxon.Numerics.BigDecimal.Exp2*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Exp2
  name: Exp2
  nameWithType: BigDecimal.Exp2
  fullName: Galaxon.Numerics.BigDecimal.Exp2
- uid: Galaxon.Numerics.BigDecimal.Exp10*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Exp10
  name: Exp10
  nameWithType: BigDecimal.Exp10
  fullName: Galaxon.Numerics.BigDecimal.Exp10
- uid: Galaxon.Numerics.BigDecimal.Log*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Log
  name: Log
  nameWithType: BigDecimal.Log
  fullName: Galaxon.Numerics.BigDecimal.Log
- uid: Galaxon.Numerics.BigDecimal.Log2*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Log2
  name: Log2
  nameWithType: BigDecimal.Log2
  fullName: Galaxon.Numerics.BigDecimal.Log2
- uid: Galaxon.Numerics.BigDecimal.Log10*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Log10
  name: Log10
  nameWithType: BigDecimal.Log10
  fullName: Galaxon.Numerics.BigDecimal.Log10
- uid: Galaxon.Numerics.BigDecimal.Clone*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Clone
  name: Clone
  nameWithType: BigDecimal.Clone
  fullName: Galaxon.Numerics.BigDecimal.Clone
- uid: Galaxon.Numerics.BigDecimal.Abs*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Abs
  name: Abs
  nameWithType: BigDecimal.Abs
  fullName: Galaxon.Numerics.BigDecimal.Abs
- uid: Galaxon.Numerics.BigDecimal.Round*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Round
  name: Round
  nameWithType: BigDecimal.Round
  fullName: Galaxon.Numerics.BigDecimal.Round
- uid: MidpointRounding
  isExternal: true
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: MidpointRounding
- uid: Galaxon.Numerics.BigDecimal.RoundSigFigs*
  commentId: Overload:Galaxon.Numerics.BigDecimal.RoundSigFigs
  name: RoundSigFigs
  nameWithType: BigDecimal.RoundSigFigs
  fullName: Galaxon.Numerics.BigDecimal.RoundSigFigs
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.Truncate*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Truncate
  name: Truncate
  nameWithType: BigDecimal.Truncate
  fullName: Galaxon.Numerics.BigDecimal.Truncate
- uid: Galaxon.Numerics.BigDecimal.Frac*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Frac
  name: Frac
  nameWithType: BigDecimal.Frac
  fullName: Galaxon.Numerics.BigDecimal.Frac
- uid: Galaxon.Numerics.BigDecimal.Floor*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Floor
  name: Floor
  nameWithType: BigDecimal.Floor
  fullName: Galaxon.Numerics.BigDecimal.Floor
- uid: Galaxon.Numerics.BigDecimal.Ceiling*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Ceiling
  name: Ceiling
  nameWithType: BigDecimal.Ceiling
  fullName: Galaxon.Numerics.BigDecimal.Ceiling
- uid: Galaxon.Numerics.BigDecimal.op_UnaryPlus*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_UnaryPlus
  name: UnaryPlus
  nameWithType: BigDecimal.UnaryPlus
  fullName: Galaxon.Numerics.BigDecimal.UnaryPlus
- uid: Galaxon.Numerics.BigDecimal.op_Addition*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Addition
  name: Addition
  nameWithType: BigDecimal.Addition
  fullName: Galaxon.Numerics.BigDecimal.Addition
- uid: Galaxon.Numerics.BigDecimal.op_Increment*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Increment
  name: Increment
  nameWithType: BigDecimal.Increment
  fullName: Galaxon.Numerics.BigDecimal.Increment
- uid: Galaxon.Numerics.BigDecimal.op_UnaryNegation*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_UnaryNegation
  name: UnaryNegation
  nameWithType: BigDecimal.UnaryNegation
  fullName: Galaxon.Numerics.BigDecimal.UnaryNegation
- uid: Galaxon.Numerics.BigDecimal.op_Subtraction*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Subtraction
  name: Subtraction
  nameWithType: BigDecimal.Subtraction
  fullName: Galaxon.Numerics.BigDecimal.Subtraction
- uid: Galaxon.Numerics.BigDecimal.op_Decrement*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Decrement
  name: Decrement
  nameWithType: BigDecimal.Decrement
  fullName: Galaxon.Numerics.BigDecimal.Decrement
- uid: Galaxon.Numerics.BigDecimal.op_Multiply*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Multiply
  name: Multiply
  nameWithType: BigDecimal.Multiply
  fullName: Galaxon.Numerics.BigDecimal.Multiply
- uid: Galaxon.Numerics.BigDecimal.op_Division*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Division
  name: Division
  nameWithType: BigDecimal.Division
  fullName: Galaxon.Numerics.BigDecimal.Division
- uid: Galaxon.Numerics.BigDecimal.op_Modulus*
  commentId: Overload:Galaxon.Numerics.BigDecimal.op_Modulus
  name: Modulus
  nameWithType: BigDecimal.Modulus
  fullName: Galaxon.Numerics.BigDecimal.Modulus
- uid: Galaxon.Numerics.BigDecimal.Average*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Average
  name: Average
  nameWithType: BigDecimal.Average
  fullName: Galaxon.Numerics.BigDecimal.Average
- uid: Galaxon.Numerics.BigDecimal[]
  isExternal: true
  name: BigDecimal[]
  nameWithType: BigDecimal[]
  fullName: Galaxon.Numerics.BigDecimal[]
  nameWithType.vb: BigDecimal()
  fullName.vb: Galaxon.Numerics.BigDecimal()
  name.vb: BigDecimal()
  spec.csharp:
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Galaxon.Numerics.BigDecimal.GeometricMean*
  commentId: Overload:Galaxon.Numerics.BigDecimal.GeometricMean
  name: GeometricMean
  nameWithType: BigDecimal.GeometricMean
  fullName: Galaxon.Numerics.BigDecimal.GeometricMean
- uid: Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean*
  commentId: Overload:Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean
  name: ArithmeticGeometricMean
  nameWithType: BigDecimal.ArithmeticGeometricMean
  fullName: Galaxon.Numerics.BigDecimal.ArithmeticGeometricMean
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.TryFormat*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryFormat
  name: TryFormat
  nameWithType: BigDecimal.TryFormat
  fullName: Galaxon.Numerics.BigDecimal.TryFormat
- uid: Span{System.Char}
  commentId: '!:Span{System.Char}'
  definition: Span`1
  name: Span<Char>
  nameWithType: Span<Char>
  fullName: Span<System.Char>
  nameWithType.vb: Span(Of Char)
  fullName.vb: Span(Of System.Char)
  name.vb: Span(Of Char)
  spec.csharp:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlySpan{System.Char}
  commentId: '!:ReadOnlySpan{System.Char}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<Char>
  nameWithType: ReadOnlySpan<Char>
  fullName: ReadOnlySpan<System.Char>
  nameWithType.vb: ReadOnlySpan(Of Char)
  fullName.vb: ReadOnlySpan(Of System.Char)
  name.vb: ReadOnlySpan(Of Char)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.Parse*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Parse
  name: Parse
  nameWithType: BigDecimal.Parse
  fullName: Galaxon.Numerics.BigDecimal.Parse
- uid: NumberStyles
  isExternal: true
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: NumberStyles
- uid: Galaxon.Numerics.BigDecimal.TryParse*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TryParse
  name: TryParse
  nameWithType: BigDecimal.TryParse
  fullName: Galaxon.Numerics.BigDecimal.TryParse
- uid: Galaxon.Numerics.BigDecimal.NormalizeAngle*
  commentId: Overload:Galaxon.Numerics.BigDecimal.NormalizeAngle
  name: NormalizeAngle
  nameWithType: BigDecimal.NormalizeAngle
  fullName: Galaxon.Numerics.BigDecimal.NormalizeAngle
- uid: Galaxon.Numerics.BigDecimal.Sin*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Sin
  name: Sin
  nameWithType: BigDecimal.Sin
  fullName: Galaxon.Numerics.BigDecimal.Sin
- uid: Galaxon.Numerics.BigDecimal.SinPi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.SinPi
  name: SinPi
  nameWithType: BigDecimal.SinPi
  fullName: Galaxon.Numerics.BigDecimal.SinPi
- uid: Galaxon.Numerics.BigDecimal.Cos*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Cos
  name: Cos
  nameWithType: BigDecimal.Cos
  fullName: Galaxon.Numerics.BigDecimal.Cos
- uid: Galaxon.Numerics.BigDecimal.CosPi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.CosPi
  name: CosPi
  nameWithType: BigDecimal.CosPi
  fullName: Galaxon.Numerics.BigDecimal.CosPi
- uid: Galaxon.Numerics.BigDecimal.SinCos*
  commentId: Overload:Galaxon.Numerics.BigDecimal.SinCos
  name: SinCos
  nameWithType: BigDecimal.SinCos
  fullName: Galaxon.Numerics.BigDecimal.SinCos
- uid: System.ValueTuple{Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal}
  commentId: '!:System.ValueTuple{Galaxon.Numerics.BigDecimal,Galaxon.Numerics.BigDecimal}'
  definition: System.ValueTuple`2
  name: (, )<BigDecimal, BigDecimal>
  nameWithType: (, )<BigDecimal, BigDecimal>
  fullName: System.ValueTuple<Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal>
  nameWithType.vb: (, )(Of BigDecimal, BigDecimal)
  fullName.vb: System.ValueTuple(Of Galaxon.Numerics.BigDecimal, Galaxon.Numerics.BigDecimal)
  name.vb: (, )(Of BigDecimal, BigDecimal)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Galaxon.Numerics.BigDecimal
    name: BigDecimal
    nameWithType: BigDecimal
    fullName: Galaxon.Numerics.BigDecimal
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  isExternal: true
  name: (, )<, >
  nameWithType: (, )<, >
  fullName: System.ValueTuple<, >
  nameWithType.vb: (, )(Of , )
  fullName.vb: System.ValueTuple(Of , )
  name.vb: (, )(Of , )
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Numerics.BigDecimal.SinCosPi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.SinCosPi
  name: SinCosPi
  nameWithType: BigDecimal.SinCosPi
  fullName: Galaxon.Numerics.BigDecimal.SinCosPi
- uid: Galaxon.Numerics.BigDecimal.Tan*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Tan
  name: Tan
  nameWithType: BigDecimal.Tan
  fullName: Galaxon.Numerics.BigDecimal.Tan
- uid: Galaxon.Numerics.BigDecimal.TanPi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.TanPi
  name: TanPi
  nameWithType: BigDecimal.TanPi
  fullName: Galaxon.Numerics.BigDecimal.TanPi
- uid: Galaxon.Numerics.BigDecimal.Asin*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Asin
  name: Asin
  nameWithType: BigDecimal.Asin
  fullName: Galaxon.Numerics.BigDecimal.Asin
- uid: Galaxon.Numerics.BigDecimal.AsinPi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.AsinPi
  name: AsinPi
  nameWithType: BigDecimal.AsinPi
  fullName: Galaxon.Numerics.BigDecimal.AsinPi
- uid: Galaxon.Numerics.BigDecimal.Acos*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Acos
  name: Acos
  nameWithType: BigDecimal.Acos
  fullName: Galaxon.Numerics.BigDecimal.Acos
- uid: Galaxon.Numerics.BigDecimal.AcosPi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.AcosPi
  name: AcosPi
  nameWithType: BigDecimal.AcosPi
  fullName: Galaxon.Numerics.BigDecimal.AcosPi
- uid: Galaxon.Numerics.BigDecimal.Atan*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Atan
  name: Atan
  nameWithType: BigDecimal.Atan
  fullName: Galaxon.Numerics.BigDecimal.Atan
- uid: Galaxon.Numerics.BigDecimal.AtanPi*
  commentId: Overload:Galaxon.Numerics.BigDecimal.AtanPi
  name: AtanPi
  nameWithType: BigDecimal.AtanPi
  fullName: Galaxon.Numerics.BigDecimal.AtanPi
- uid: Galaxon.Numerics.BigDecimal.Sinh*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Sinh
  name: Sinh
  nameWithType: BigDecimal.Sinh
  fullName: Galaxon.Numerics.BigDecimal.Sinh
- uid: Galaxon.Numerics.BigDecimal.Cosh*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Cosh
  name: Cosh
  nameWithType: BigDecimal.Cosh
  fullName: Galaxon.Numerics.BigDecimal.Cosh
- uid: Galaxon.Numerics.BigDecimal.Tanh*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Tanh
  name: Tanh
  nameWithType: BigDecimal.Tanh
  fullName: Galaxon.Numerics.BigDecimal.Tanh
- uid: Galaxon.Numerics.BigDecimal.Asinh*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Asinh
  name: Asinh
  nameWithType: BigDecimal.Asinh
  fullName: Galaxon.Numerics.BigDecimal.Asinh
- uid: Galaxon.Numerics.BigDecimal.Acosh*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Acosh
  name: Acosh
  nameWithType: BigDecimal.Acosh
  fullName: Galaxon.Numerics.BigDecimal.Acosh
- uid: Galaxon.Numerics.BigDecimal.Atanh*
  commentId: Overload:Galaxon.Numerics.BigDecimal.Atanh
  name: Atanh
  nameWithType: BigDecimal.Atanh
  fullName: Galaxon.Numerics.BigDecimal.Atanh
