### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XDecimal
  commentId: T:Galaxon.Core.Numbers.XDecimal
  id: XDecimal
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XDecimal.Acosh(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Asinh(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Assemble(System.Byte,System.Byte,UInt128)
  - Galaxon.Core.Numbers.XDecimal.Atanh(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Cosh(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Disassemble(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Exp10(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Exp2(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.GetRandom
  - Galaxon.Core.Numbers.XDecimal.IsInteger(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Log(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Log(System.Decimal,System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Log10(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Log2(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.MaxScale
  - Galaxon.Core.Numbers.XDecimal.NumExpBits
  - Galaxon.Core.Numbers.XDecimal.NumIntBits
  - Galaxon.Core.Numbers.XDecimal.RoundSigFigs(System.Decimal,System.Int32)
  - Galaxon.Core.Numbers.XDecimal.Sinh(System.Decimal)
  - Galaxon.Core.Numbers.XDecimal.Tanh(System.Decimal)
  langs:
  - csharp
  - vb
  name: XDecimal
  nameWithType: XDecimal
  fullName: Galaxon.Core.Numbers.XDecimal
  type: Class
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XDecimal
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 5
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: Extension methods for decimal.
  example: []
  syntax:
    content: 'public static class XDecimal : object'
    content.vb: >-
      Public Module XDecimal
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XDecimal.NumExpBits
  commentId: F:Galaxon.Core.Numbers.XDecimal.NumExpBits
  id: NumExpBits
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: NumExpBits
  nameWithType: XDecimal.NumExpBits
  fullName: Galaxon.Core.Numbers.XDecimal.NumExpBits
  type: Field
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: NumExpBits
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 10
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: The number of bits in the exponent.
  example: []
  syntax:
    content: public const byte NumExpBits = null
    return:
      type: System.Byte
    content.vb: Public Const NumExpBits As Byte = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDecimal.NumIntBits
  commentId: F:Galaxon.Core.Numbers.XDecimal.NumIntBits
  id: NumIntBits
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: NumIntBits
  nameWithType: XDecimal.NumIntBits
  fullName: Galaxon.Core.Numbers.XDecimal.NumIntBits
  type: Field
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: NumIntBits
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 13
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: The number of bits in the integer part.
  example: []
  syntax:
    content: public const byte NumIntBits = null
    return:
      type: System.Byte
    content.vb: Public Const NumIntBits As Byte = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDecimal.MaxScale
  commentId: F:Galaxon.Core.Numbers.XDecimal.MaxScale
  id: MaxScale
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: MaxScale
  nameWithType: XDecimal.MaxScale
  fullName: Galaxon.Core.Numbers.XDecimal.MaxScale
  type: Field
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: MaxScale
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 16
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: The minimum scale factor (inverse decimal exponent).
  example: []
  syntax:
    content: public const short MaxScale = null
    return:
      type: System.Int16
    content.vb: Public Const MaxScale As Short = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.XDecimal.Log(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Log(System.Decimal)
  id: Log(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Log(Decimal)
  nameWithType: XDecimal.Log(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Log(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Log
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 35
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCalculate the natural logarithm of a decimal.\nThe algorithm is from:\n<a href=\"https://en.wikipedia.org/wiki/Natural_logarithm\">https://en.wikipedia.org/wiki/Natural_logarithm</a>\nI found that DecimalEx.Log() hangs for very small values so I made this version.\nIt&apos;s tested, fast, and doesn&apos;t break with the largest or smallest decimal values.\n<see cref=\"!:Math.Log(double)\"></see>\n"
  example: []
  syntax:
    content: public static decimal Log(decimal m)
    parameters:
    - id: m
      type: System.Decimal
      description: A decimal value.
    return:
      type: System.Decimal
      description: The natural logarithm of the given value.
    content.vb: Public Shared Function Log(m As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Log(System.Decimal,System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Log(System.Decimal,System.Decimal)
  id: Log(System.Decimal,System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Log(Decimal, Decimal)
  nameWithType: XDecimal.Log(Decimal, Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Log(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Log
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 125
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nLogarithm of a decimal in a specified base.\n<see cref=\"!:Math.Log(double, double)\"></see>\n<xref href=\"Galaxon.Core.Numbers.XDecimal.Log(System.Decimal%2cSystem.Decimal)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static decimal Log(decimal m, decimal b)
    parameters:
    - id: m
      type: System.Decimal
      description: The decimal value.
    - id: b
      type: System.Decimal
      description: The base.
    return:
      type: System.Decimal
      description: The logarithm of z in base b.
    content.vb: Public Shared Function Log(m As Decimal, b As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Log10(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Log10(System.Decimal)
  id: Log10(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Log10(Decimal)
  nameWithType: XDecimal.Log10(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Log10(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Log10
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 153
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nLogarithm of a decimal in base 10.\n<see cref=\"!:Math.Log10\"></see>\n<xref href=\"Galaxon.Core.Numbers.XDecimal.Log10(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static decimal Log10(decimal m)
    parameters:
    - id: m
      type: System.Decimal
      description: The decimal value.
    return:
      type: System.Decimal
      description: The logarithm of the number in base 10.
    content.vb: Public Shared Function Log10(m As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Exp10(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Exp10(System.Decimal)
  id: Exp10(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Exp10(Decimal)
  nameWithType: XDecimal.Exp10(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Exp10(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Exp10
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 161
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCalculate 10 raised to a decimal power.\n"
  example: []
  syntax:
    content: public static decimal Exp10(decimal m)
    parameters:
    - id: m
      type: System.Decimal
      description: A decimal value.
    return:
      type: System.Decimal
      description: 10^d
    content.vb: Public Shared Function Exp10(m As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Exp10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Log2(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Log2(System.Decimal)
  id: Log2(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Log2(Decimal)
  nameWithType: XDecimal.Log2(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Log2(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Log2
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 172
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nLogarithm of a decimal in base 2.\n"
  example: []
  syntax:
    content: public static decimal Log2(decimal m)
    parameters:
    - id: m
      type: System.Decimal
      description: The decimal value.
    return:
      type: System.Decimal
      description: The logarithm of the number in base 2.
    content.vb: Public Shared Function Log2(m As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Log2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Exp2(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Exp2(System.Decimal)
  id: Exp2(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Exp2(Decimal)
  nameWithType: XDecimal.Exp2(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Exp2(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Exp2
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 180
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCalculate 2 raised to a decimal power.\n"
  example: []
  syntax:
    content: public static decimal Exp2(decimal m)
    parameters:
    - id: m
      type: System.Decimal
      description: A decimal value.
    return:
      type: System.Decimal
      description: 2^d
    content.vb: Public Shared Function Exp2(m As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Exp2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Sinh(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Sinh(System.Decimal)
  id: Sinh(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Sinh(Decimal)
  nameWithType: XDecimal.Sinh(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Sinh(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Sinh
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 192
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nHyperbolic sine.\n"
  example: []
  syntax:
    content: public static decimal Sinh(decimal x)
    parameters:
    - id: x
      type: System.Decimal
      description: The hyperbolic angle.
    return:
      type: System.Decimal
      description: The hyperbolic sine of the given angle.
    content.vb: Public Shared Function Sinh(x As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Cosh(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Cosh(System.Decimal)
  id: Cosh(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Cosh(Decimal)
  nameWithType: XDecimal.Cosh(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Cosh(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Cosh
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 200
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nHyperbolic cosine.\n"
  example: []
  syntax:
    content: public static decimal Cosh(decimal x)
    parameters:
    - id: x
      type: System.Decimal
      description: The hyperbolic angle.
    return:
      type: System.Decimal
      description: The hyperbolic cosine of the given angle.
    content.vb: Public Shared Function Cosh(x As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Tanh(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Tanh(System.Decimal)
  id: Tanh(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Tanh(Decimal)
  nameWithType: XDecimal.Tanh(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Tanh(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Tanh
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 208
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nHyperbolic tangent.\n"
  example: []
  syntax:
    content: public static decimal Tanh(decimal x)
    parameters:
    - id: x
      type: System.Decimal
      description: The hyperbolic angle.
    return:
      type: System.Decimal
      description: The hyperbolic tangent of the given angle.
    content.vb: Public Shared Function Tanh(x As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Asinh(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Asinh(System.Decimal)
  id: Asinh(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Asinh(Decimal)
  nameWithType: XDecimal.Asinh(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Asinh(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Asinh
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 219
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nInverse hyperbolic sine.\n"
  example: []
  syntax:
    content: public static decimal Asinh(decimal x)
    parameters:
    - id: x
      type: System.Decimal
      description: The hyperbolic sine of an angle.
    return:
      type: System.Decimal
      description: The angle.
    content.vb: Public Shared Function Asinh(x As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Asinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Acosh(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Acosh(System.Decimal)
  id: Acosh(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Acosh(Decimal)
  nameWithType: XDecimal.Acosh(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Acosh(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Acosh
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 227
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nInverse hyperbolic cosine.\n"
  example: []
  syntax:
    content: public static decimal Acosh(decimal x)
    parameters:
    - id: x
      type: System.Decimal
      description: The hyperbolic cosine of an angle.
    return:
      type: System.Decimal
      description: The angle.
    content.vb: Public Shared Function Acosh(x As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Acosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Atanh(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Atanh(System.Decimal)
  id: Atanh(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Atanh(Decimal)
  nameWithType: XDecimal.Atanh(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Atanh(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Atanh
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 235
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nInverse hyperbolic tangent.\n"
  example: []
  syntax:
    content: public static decimal Atanh(decimal x)
    parameters:
    - id: x
      type: System.Decimal
      description: The hyperbolic tangent of an angle.
    return:
      type: System.Decimal
      description: The angle.
    content.vb: Public Shared Function Atanh(x As Decimal) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Atanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.IsInteger(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.IsInteger(System.Decimal)
  id: IsInteger(System.Decimal)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: IsInteger(Decimal)
  nameWithType: XDecimal.IsInteger(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.IsInteger(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsInteger
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 245
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if a decimal value is an integer.\n"
  example: []
  syntax:
    content: public static bool IsInteger(decimal m)
    parameters:
    - id: m
      type: System.Decimal
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsInteger(m As Decimal) As Boolean
  overload: Galaxon.Core.Numbers.XDecimal.IsInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.RoundSigFigs(System.Decimal,System.Int32)
  commentId: M:Galaxon.Core.Numbers.XDecimal.RoundSigFigs(System.Decimal,System.Int32)
  id: RoundSigFigs(System.Decimal,System.Int32)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: RoundSigFigs(Decimal, Int32)
  nameWithType: XDecimal.RoundSigFigs(Decimal, Int32)
  fullName: Galaxon.Core.Numbers.XDecimal.RoundSigFigs(System.Decimal, System.Int32)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: RoundSigFigs
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 255
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nRound off a value to a given number of significant figures.\n"
  example: []
  syntax:
    content: public static decimal RoundSigFigs(decimal m, int n)
    parameters:
    - id: m
      type: System.Decimal
      description: The number to round.
    - id: n
      type: System.Int32
      description: The number of significant figures.
    return:
      type: System.Decimal
      description: The rounded number.
    content.vb: Public Shared Function RoundSigFigs(m As Decimal, n As Integer) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.RoundSigFigs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.GetRandom
  commentId: M:Galaxon.Core.Numbers.XDecimal.GetRandom
  id: GetRandom
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: GetRandom()
  nameWithType: XDecimal.GetRandom()
  fullName: Galaxon.Core.Numbers.XDecimal.GetRandom()
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetRandom
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 268
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nReturns a random decimal.\n"
  example: []
  syntax:
    content: public static decimal GetRandom()
    return:
      type: System.Decimal
    content.vb: Public Shared Function GetRandom As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.GetRandom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Disassemble(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Disassemble(System.Decimal)
  id: Disassemble(System.Decimal)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Disassemble(Decimal)
  nameWithType: XDecimal.Disassemble(Decimal)
  fullName: Galaxon.Core.Numbers.XDecimal.Disassemble(System.Decimal)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Disassemble
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 282
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nDisassemble the decimal into bitwise parts.\n"
  example: []
  syntax:
    content: public static (byte signBit, byte scaleBits, UInt128 intBits) Disassemble(this decimal x)
    parameters:
    - id: x
      type: System.Decimal
    return:
      type: System.ValueTuple{System.Byte,System.Byte,UInt128}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Disassemble(x As Decimal) As(signBit As Byte, scaleBits As Byte, intBits As UInt128)(Of Byte , Byte, UInt128)
  overload: Galaxon.Core.Numbers.XDecimal.Disassemble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XDecimal.Assemble(System.Byte,System.Byte,UInt128)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Assemble(System.Byte,System.Byte,UInt128)
  id: Assemble(System.Byte,System.Byte,UInt128)
  parent: Galaxon.Core.Numbers.XDecimal
  langs:
  - csharp
  - vb
  name: Assemble(Byte, Byte, UInt128)
  nameWithType: XDecimal.Assemble(Byte, Byte, UInt128)
  fullName: Galaxon.Core.Numbers.XDecimal.Assemble(System.Byte, System.Byte, UInt128)
  type: Method
  source:
    remote:
      path: Core/Numbers/XDecimal.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Assemble
    path: ../Core/Core/Numbers/XDecimal.cs
    startLine: 302
  assemblies:
  - Galaxon.Core
  namespace: Galaxon.Core.Numbers
  summary: "\nAssemble a new decimal value from bitwise parts.\n"
  example: []
  syntax:
    content: public static decimal Assemble(byte signBit, byte scaleBits, UInt128 intBits)
    parameters:
    - id: signBit
      type: System.Byte
      description: The sign bit (1 or 0).
    - id: scaleBits
      type: System.Byte
      description: The scale bits.
    - id: intBits
      type: UInt128
      description: The integer bits.
    return:
      type: System.Decimal
      description: The new decimal.
    content.vb: Public Shared Function Assemble(signBit As Byte, scaleBits As Byte, intBits As UInt128) As Decimal
  overload: Galaxon.Core.Numbers.XDecimal.Assemble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int16
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Galaxon.Core.Numbers.XDecimal.Log*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Log
  name: Log
  nameWithType: XDecimal.Log
  fullName: Galaxon.Core.Numbers.XDecimal.Log
- uid: System.Decimal
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Galaxon.Core.Numbers.XDecimal.Log(System.Decimal,System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Log(System.Decimal,System.Decimal)
  isExternal: true
- uid: Galaxon.Core.Numbers.XDecimal.Log10(System.Decimal)
  commentId: M:Galaxon.Core.Numbers.XDecimal.Log10(System.Decimal)
  isExternal: true
- uid: Galaxon.Core.Numbers.XDecimal.Log10*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Log10
  name: Log10
  nameWithType: XDecimal.Log10
  fullName: Galaxon.Core.Numbers.XDecimal.Log10
- uid: Galaxon.Core.Numbers.XDecimal.Exp10*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Exp10
  name: Exp10
  nameWithType: XDecimal.Exp10
  fullName: Galaxon.Core.Numbers.XDecimal.Exp10
- uid: Galaxon.Core.Numbers.XDecimal.Log2*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Log2
  name: Log2
  nameWithType: XDecimal.Log2
  fullName: Galaxon.Core.Numbers.XDecimal.Log2
- uid: Galaxon.Core.Numbers.XDecimal.Exp2*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Exp2
  name: Exp2
  nameWithType: XDecimal.Exp2
  fullName: Galaxon.Core.Numbers.XDecimal.Exp2
- uid: Galaxon.Core.Numbers.XDecimal.Sinh*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Sinh
  name: Sinh
  nameWithType: XDecimal.Sinh
  fullName: Galaxon.Core.Numbers.XDecimal.Sinh
- uid: Galaxon.Core.Numbers.XDecimal.Cosh*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Cosh
  name: Cosh
  nameWithType: XDecimal.Cosh
  fullName: Galaxon.Core.Numbers.XDecimal.Cosh
- uid: Galaxon.Core.Numbers.XDecimal.Tanh*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Tanh
  name: Tanh
  nameWithType: XDecimal.Tanh
  fullName: Galaxon.Core.Numbers.XDecimal.Tanh
- uid: Galaxon.Core.Numbers.XDecimal.Asinh*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Asinh
  name: Asinh
  nameWithType: XDecimal.Asinh
  fullName: Galaxon.Core.Numbers.XDecimal.Asinh
- uid: Galaxon.Core.Numbers.XDecimal.Acosh*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Acosh
  name: Acosh
  nameWithType: XDecimal.Acosh
  fullName: Galaxon.Core.Numbers.XDecimal.Acosh
- uid: Galaxon.Core.Numbers.XDecimal.Atanh*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Atanh
  name: Atanh
  nameWithType: XDecimal.Atanh
  fullName: Galaxon.Core.Numbers.XDecimal.Atanh
- uid: Galaxon.Core.Numbers.XDecimal.IsInteger*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.IsInteger
  name: IsInteger
  nameWithType: XDecimal.IsInteger
  fullName: Galaxon.Core.Numbers.XDecimal.IsInteger
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Galaxon.Core.Numbers.XDecimal.RoundSigFigs*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.RoundSigFigs
  name: RoundSigFigs
  nameWithType: XDecimal.RoundSigFigs
  fullName: Galaxon.Core.Numbers.XDecimal.RoundSigFigs
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Galaxon.Core.Numbers.XDecimal.GetRandom*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.GetRandom
  name: GetRandom
  nameWithType: XDecimal.GetRandom
  fullName: Galaxon.Core.Numbers.XDecimal.GetRandom
- uid: Galaxon.Core.Numbers.XDecimal.Disassemble*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Disassemble
  name: Disassemble
  nameWithType: XDecimal.Disassemble
  fullName: Galaxon.Core.Numbers.XDecimal.Disassemble
- uid: System.ValueTuple{System.Byte,System.Byte,UInt128}
  commentId: '!:System.ValueTuple{System.Byte,System.Byte,UInt128}'
  definition: System.ValueTuple`3
  name: (, , )<Byte, Byte, UInt128>
  nameWithType: (, , )<Byte, Byte, UInt128>
  fullName: System.ValueTuple<System.Byte, System.Byte, UInt128>
  nameWithType.vb: (, , )(Of Byte, Byte, UInt128)
  fullName.vb: System.ValueTuple(Of System.Byte, System.Byte, UInt128)
  name.vb: (, , )(Of Byte, Byte, UInt128)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UInt128
    name: UInt128
    nameWithType: UInt128
    fullName: UInt128
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UInt128
    name: UInt128
    nameWithType: UInt128
    fullName: UInt128
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  isExternal: true
  name: (, , )<, , >
  nameWithType: (, , )<, , >
  fullName: System.ValueTuple<, , >
  nameWithType.vb: (, , )(Of , , )
  fullName.vb: System.ValueTuple(Of , , )
  name.vb: (, , )(Of , , )
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Numbers.XDecimal.Assemble*
  commentId: Overload:Galaxon.Core.Numbers.XDecimal.Assemble
  name: Assemble
  nameWithType: XDecimal.Assemble
  fullName: Galaxon.Core.Numbers.XDecimal.Assemble
- uid: UInt128
  isExternal: true
  name: UInt128
  nameWithType: UInt128
  fullName: UInt128
